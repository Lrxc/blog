<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome</title>
    <url>/blog/2021/03/01/Welcome/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>#安装环境及版本：</p>
<ul>
<li>系统：Github</li>
</ul>
<p>欢迎访问</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Adb Logcat 抓取日志</title>
    <url>/blog/2016/07/01/Android/Android%20Adb%20Logcat%20%E6%8A%93%E5%8F%96%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>抓取指定报名的log保存电脑本地<br>adb logcat | find “com.bxlt.cpic.main” &gt;D:/hello.txt</p>
<p>抓取全部日志保存手机本地<br>adb logcat -f /sdcard/log.txt</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android RelativeLayout-布局重叠下层的控件会响应</title>
    <url>/blog/2016/07/01/Android/Android%20RelativeLayout-%E5%B8%83%E5%B1%80%E9%87%8D%E5%8F%A0%E4%B8%8B%E5%B1%82%E7%9A%84%E6%8E%A7%E4%BB%B6%E4%BC%9A%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>偶然间遇到的一个问题，自定义view上传图片进度条，发现下层的控件还可以选。。。后来改成自定义dialog了<br>抽空找了找资料 <a href="http://wenda.so.com/q/1447517100721093" target="_blank" rel="noopener">http://wenda.so.com/q/1447517100721093</a>  发现好像没什么卵用。。。<br>下面来干货：</p>
<p>方法：对当前LinearLayout(id : layout)增加监听就行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">findViewById(R.id.layout).setOnClickListener(null);</span><br></pre></td></tr></table></figure>

<p>布局如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class="line">    xmlns:tools&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;tools&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    tools:context&#x3D;&quot;com.bxlt.demo01.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;img&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:src&#x3D;&quot;@mipmap&#x2F;ic_launcher&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;layout&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:gravity&#x3D;&quot;center&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;btn&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line">&lt;&#x2F;RelativeLayout&gt;</span><br></pre></td></tr></table></figure>

<p>Activity：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">findViewById(R.id.img).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onClick(View view) &#123;</span><br><span class="line">              Log.i(TAG, &quot;onClick: img&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onClick(View view) &#123;</span><br><span class="line">              Log.i(TAG, &quot;onClick: btn&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>

<p>此刻点击图片或者Button都是可以响应的，怎么才能只响应上层的Button，而不响应下层的图片呢？<br>加上这句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">findViewById(R.id.layout).setOnClickListener(null);</span><br></pre></td></tr></table></figure>
<p>完美解决</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 热更新_Tinker</title>
    <url>/blog/2016/07/01/Android/Android%20%E7%83%AD%E6%9B%B4%E6%96%B0_Tinker/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>说明：TinkerPatch和Tinker并不是一个东西。TinkerPatch支持在线更新<br>想看TinkerPatch的点这个<a href="http://www.jianshu.com/p/4fbb7a5025df" target="_blank" rel="noopener">http://www.jianshu.com/p/4fbb7a5025df</a><br><a href="https://www.jianshu.com/p/ad7deea62a07" target="_blank" rel="noopener">http://www.jianshu.com/p/ad7deea62a07</a></p>
<p>官方指南：<a href="https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97</a><br>大神资料：<a href="https://juejin.im/post/5a27bdaf6fb9a044fa19bcfc" target="_blank" rel="noopener">https://juejin.im/post/5a27bdaf6fb9a044fa19bcfc</a></p>
<p>视频教程<br><a href="http://v.youku.com/v_show/id_XMzIzMTU2MjAyMA==.html?spm=a2h3j.8428770.3416059.1" target="_blank" rel="noopener">http://v.youku.com/v_show/id_XMzIzMTU2MjAyMA==.html?spm=a2h3j.8428770.3416059.1</a></p>
<p>一.  进入官网 <a href="http://www.tinkerpatch.com/" target="_blank" rel="noopener">http://www.tinkerpatch.com/</a><br>第三步才是重点。。。TinkerPatch 和Tinker好像不是一个 Fuck<br><img src="http://upload-images.jianshu.io/upload_images/2803682-bd5a5f1aec704d41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>二. 新建项目 </p>
<ol>
<li><p>项目的build.gradle中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath (&#39;com.tencent.tinker:tinker-patch-gradle-plugin:1.9.1&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>app的build.gradle中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &quot;com.android.support:multidex:1.0.2&quot;</span><br><span class="line">    &#x2F;&#x2F;tinker的核心库</span><br><span class="line">    implementation(&quot;com.tencent.tinker:tinker-android-lib:1.9.1&quot;) &#123; changing &#x3D; true &#125;</span><br><span class="line">    &#x2F;&#x2F;可选，用于生成application类</span><br><span class="line">    annotationProcessor(&quot;com.tencent.tinker:tinker-android-anno:1.9.1&quot;) &#123; changing &#x3D; true &#125;</span><br><span class="line">    compileOnly(&quot;com.tencent.tinker:tinker-android-anno:1.9.1&quot;) &#123; changing &#x3D; true &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>开启multiDex</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">		...</span><br><span class="line">        multiDexEnabled true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>app的build.gradle中额外配置(针对步骤6 BuildConfig 报错问题)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buildConfigField &quot;String&quot;, &quot;MESSAGE&quot;, &quot;\&quot;I am the base apk\&quot;&quot;</span><br><span class="line">buildConfigField &quot;String&quot;, &quot;TINKER_ID&quot;, &quot;\&quot;$&#123;getTinkerIdValue()&#125;\&quot;&quot;</span><br><span class="line">buildConfigField &quot;String&quot;, &quot;PLATFORM&quot;, &quot;\&quot;all\&quot;&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>配置app的build.gradle(不要管为什么 我也不知道。。。)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Tinker配置与任务</span><br><span class="line">def bakPath &#x3D; file(&quot;$&#123;buildDir&#125;&#x2F;bakApk&#x2F;&quot;)</span><br><span class="line">ext &#123;</span><br><span class="line">    &#x2F;&#x2F; 是否使用Tinker(当你的项目处于开发调试阶段时，可以改为false)</span><br><span class="line">    tinkerEnabled &#x3D; true</span><br><span class="line">    &#x2F;&#x2F; 基础包文件路径（名字这里写死为old-app.apk。用于比较新旧app以生成补丁包，不管是debug还是release编译）</span><br><span class="line">    tinkerOldApkPath &#x3D; &quot;$&#123;bakPath&#125;&#x2F;old-app.apk&quot;</span><br><span class="line">    &#x2F;&#x2F; 基础包的mapping.txt文件路径（用于辅助混淆补丁包的生成，一般在生成release版app时会使用到混淆，所以这个mapping.txt文件一般只是用于release安装包补丁的生成）</span><br><span class="line">    tinkerApplyMappingPath &#x3D; &quot;$&#123;bakPath&#125;&#x2F;old-app-mapping.txt&quot;</span><br><span class="line">    &#x2F;&#x2F; 基础包的R.txt文件路径（如果你的安装包中资源文件有改动，则需要使用该R.txt文件来辅助生成补丁包）</span><br><span class="line">    tinkerApplyResourcePath &#x3D; &quot;$&#123;bakPath&#125;&#x2F;old-app-R.txt&quot;</span><br><span class="line">    &#x2F;&#x2F;only use for build all flavor, if not, just ignore this field</span><br><span class="line">    tinkerBuildFlavorDirectory &#x3D; &quot;$&#123;bakPath&#125;&#x2F;flavor&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def getOldApkPath() &#123;</span><br><span class="line">    return hasProperty(&quot;OLD_APK&quot;) ? OLD_APK : ext.tinkerOldApkPath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def getApplyMappingPath() &#123;</span><br><span class="line">    return hasProperty(&quot;APPLY_MAPPING&quot;) ? APPLY_MAPPING : ext.tinkerApplyMappingPath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def getApplyResourceMappingPath() &#123;</span><br><span class="line">    return hasProperty(&quot;APPLY_RESOURCE&quot;) ? APPLY_RESOURCE : ext.tinkerApplyResourcePath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def getTinkerIdValue() &#123;</span><br><span class="line">    return hasProperty(&quot;TINKER_ID&quot;) ? TINKER_ID : android.defaultConfig.versionName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def buildWithTinker() &#123;</span><br><span class="line">    return hasProperty(&quot;TINKER_ENABLE&quot;) ? TINKER_ENABLE : ext.tinkerEnabled</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def getTinkerBuildFlavorDirectory() &#123;</span><br><span class="line">    return ext.tinkerBuildFlavorDirectory</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (buildWithTinker()) &#123;</span><br><span class="line">    &#x2F;&#x2F;apply tinker插件</span><br><span class="line">    apply plugin: &#39;com.tencent.tinker.patch&#39;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 全局信息相关的配置项</span><br><span class="line">    tinkerPatch &#123;</span><br><span class="line">        tinkerEnable &#x3D; buildWithTinker()&#x2F;&#x2F; 是否打开tinker的功能。</span><br><span class="line">        oldApk &#x3D; getOldApkPath()        &#x2F;&#x2F; 基准apk包的路径，必须输入，否则会报错。</span><br><span class="line">        ignoreWarning &#x3D; false           &#x2F;&#x2F; 是否忽略有风险的补丁包。这里选择不忽略，当补丁包风险时会中断编译。</span><br><span class="line">        useSign &#x3D; true                  &#x2F;&#x2F; 在运行过程中，我们需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名。</span><br><span class="line">        &#x2F;&#x2F; 编译相关的配置项</span><br><span class="line">        buildConfig &#123;</span><br><span class="line">            applyMapping &#x3D; getApplyMappingPath()</span><br><span class="line">            &#x2F;&#x2F; 可选参数；在编译新的apk时候，我们希望通过保持旧apk的proguard混淆方式，从而减少补丁包的大小。这个只是推荐设置，不设置applyMapping也不会影响任何的assemble编译。</span><br><span class="line">            applyResourceMapping &#x3D; getApplyResourceMappingPath()</span><br><span class="line">            &#x2F;&#x2F; 可选参数；在编译新的apk时候，我们希望通过旧apk的R.txt文件保持ResId的分配，这样不仅可以减少补丁包的大小，同时也避免由于ResId改变导致remote view异常。</span><br><span class="line">            tinkerId &#x3D; getTinkerIdValue()</span><br><span class="line">            &#x2F;&#x2F; 在运行过程中，我们需要验证基准apk包的tinkerId是否等于补丁包的tinkerId。这个是决定补丁包能运行在哪些基准包上面，一般来说我们可以使用git版本号、versionName等等。</span><br><span class="line">            keepDexApply &#x3D; false</span><br><span class="line">            &#x2F;&#x2F; 如果我们有多个dex,编译补丁时可能会由于类的移动导致变更增多。若打开keepDexApply模式，补丁包将根据基准包的类分布来编译。</span><br><span class="line">            isProtectedApp &#x3D; false &#x2F;&#x2F; 是否使用加固模式，仅仅将变更的类合成补丁。注意，这种模式仅仅可以用于加固应用中。</span><br><span class="line">            supportHotplugComponent &#x3D; false &#x2F;&#x2F; 是否支持新增非export的Activity（1.9.0版本开始才有的新功能）</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; dex相关的配置项</span><br><span class="line">        dex &#123;</span><br><span class="line">            dexMode &#x3D; &quot;jar&quot;</span><br><span class="line">&#x2F;&#x2F; 只能是&#39;raw&#39;或者&#39;jar&#39;。 对于&#39;raw&#39;模式，我们将会保持输入dex的格式。对于&#39;jar&#39;模式，我们将会把输入dex重新压缩封装到jar。如果你的minSdkVersion小于14，你必须选择‘jar’模式，而且它更省存储空间，但是验证md5时比&#39;raw&#39;模式耗时。默认我们并不会去校验md5,一般情况下选择jar模式即可。</span><br><span class="line">            pattern &#x3D; [&quot;classes*.dex&quot;,</span><br><span class="line">                       &quot;assets&#x2F;secondary-dex-?.jar&quot;]</span><br><span class="line">            &#x2F;&#x2F; 需要处理dex路径，支持*、?通配符，必须使用&#39;&#x2F;&#39;分割。路径是相对安装包的，例如assets&#x2F;...</span><br><span class="line">            loader &#x3D; [</span><br><span class="line">                    &#x2F;&#x2F; 定义哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。</span><br><span class="line">                    &#x2F;&#x2F; 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；</span><br><span class="line">                    &#x2F;&#x2F; 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。这里需要注意的是，这些类的直接引用类也需要加入到loader中。或者你需要将这个类变成非preverify。</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 	lib相关的配置项</span><br><span class="line">        lib &#123;</span><br><span class="line">            pattern &#x3D; [&quot;lib&#x2F;*&#x2F;*.so&quot;,&quot;src&#x2F;main&#x2F;jniLibs&#x2F;*&#x2F;*.so&quot;]</span><br><span class="line">            &#x2F;&#x2F; 需要处理lib路径，支持*、?通配符，必须使用&#39;&#x2F;&#39;分割。与dex.pattern一致, 路径是相对安装包的，例如assets&#x2F;...</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; res相关的配置项</span><br><span class="line">        res &#123;</span><br><span class="line">            pattern &#x3D; [&quot;res&#x2F;*&quot;, &quot;assets&#x2F;*&quot;, &quot;resources.arsc&quot;, &quot;AndroidManifest.xml&quot;]</span><br><span class="line">            &#x2F;&#x2F; 需要处理res路径，支持*、?通配符，必须使用&#39;&#x2F;&#39;分割。与dex.pattern一致, 路径是相对安装包的，例如assets&#x2F;...，务必注意的是，只有满足pattern的资源才会放到合成后的资源包。</span><br><span class="line">            ignoreChange &#x3D; [</span><br><span class="line">                    &#x2F;&#x2F; 支持*、?通配符，必须使用&#39;&#x2F;&#39;分割。若满足ignoreChange的pattern，在编译时会忽略该文件的新增、删除与修改。 最极端的情况，ignoreChange与上面的pattern一致，即会完全忽略所有资源的修改。</span><br><span class="line">                    &quot;assets&#x2F;sample_meta.txt&quot;</span><br><span class="line">            ]</span><br><span class="line">            largeModSize &#x3D; 100</span><br><span class="line">            &#x2F;&#x2F; 对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。这可以降低补丁包的大小，但是会增加合成时的复杂度。默认大小为100kb</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 用于生成补丁包中的&#39;package_meta.txt&#39;文件</span><br><span class="line">        packageConfig &#123;</span><br><span class="line">            &#x2F;&#x2F; configField(&quot;key&quot;, &quot;value&quot;), 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,并自动写入configField。</span><br><span class="line">            &#x2F;&#x2F; 在这里，你可以定义其他的信息，在运行时可以通过TinkerLoadResult.getPackageConfigByName得到相应的数值。</span><br><span class="line">            &#x2F;&#x2F; 但是建议直接通过修改代码来实现，例如BuildConfig。</span><br><span class="line">            configField(&quot;platform&quot;, &quot;all&quot;)</span><br><span class="line">            configField(&quot;patchVersion&quot;, &quot;1.0&quot;)</span><br><span class="line">&#x2F;&#x2F;            configField(&quot;patchMessage&quot;, &quot;tinker is sample to use&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 7zip路径配置项，执行前提是useSign为true</span><br><span class="line">        sevenZip &#123;</span><br><span class="line">            zipArtifact &#x3D; &quot;com.tencent.mm:SevenZip:1.1.10&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;String&gt; flavors &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">    project.android.productFlavors.each &#123; flavor -&gt;</span><br><span class="line">        flavors.add(flavor.name)</span><br><span class="line">    &#125;</span><br><span class="line">    boolean hasFlavors &#x3D; flavors.size() &gt; 0</span><br><span class="line">    def date &#x3D; new Date().format(&quot;MMdd-HH-mm-ss&quot;)</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * bak apk and mapping</span><br><span class="line">     *&#x2F;</span><br><span class="line">    android.applicationVariants.all &#123; variant -&gt;</span><br><span class="line">        &#x2F;**</span><br><span class="line">         * task type, you want to bak</span><br><span class="line">         *&#x2F;</span><br><span class="line">        def taskName &#x3D; variant.name</span><br><span class="line"></span><br><span class="line">        tasks.all &#123;</span><br><span class="line">            if (&quot;assemble$&#123;taskName.capitalize()&#125;&quot;.equalsIgnoreCase(it.name)) &#123;</span><br><span class="line"></span><br><span class="line">                it.doLast &#123;</span><br><span class="line">                    copy &#123;</span><br><span class="line">                        def fileNamePrefix &#x3D; &quot;$&#123;project.name&#125;-$&#123;variant.baseName&#125;&quot;</span><br><span class="line">                        def newFileNamePrefix &#x3D; hasFlavors ? &quot;$&#123;fileNamePrefix&#125;&quot; : &quot;$&#123;fileNamePrefix&#125;-$&#123;date&#125;&quot;</span><br><span class="line"></span><br><span class="line">                        def destPath &#x3D; hasFlavors ? file(&quot;$&#123;bakPath&#125;&#x2F;$&#123;project.name&#125;-$&#123;date&#125;&#x2F;$&#123;variant.flavorName&#125;&quot;) : bakPath</span><br><span class="line">                        from variant.outputs.first().outputFile</span><br><span class="line">                        into destPath</span><br><span class="line">                        rename &#123; String fileName -&gt;</span><br><span class="line">                            fileName.replace(&quot;$&#123;fileNamePrefix&#125;.apk&quot;, &quot;$&#123;newFileNamePrefix&#125;.apk&quot;)</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        from &quot;$&#123;buildDir&#125;&#x2F;outputs&#x2F;mapping&#x2F;$&#123;variant.dirName&#125;&#x2F;mapping.txt&quot;</span><br><span class="line">                        into destPath</span><br><span class="line">                        rename &#123; String fileName -&gt;</span><br><span class="line">                            fileName.replace(&quot;mapping.txt&quot;, &quot;$&#123;newFileNamePrefix&#125;-mapping.txt&quot;)</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        from &quot;$&#123;buildDir&#125;&#x2F;intermediates&#x2F;symbols&#x2F;$&#123;variant.dirName&#125;&#x2F;R.txt&quot;</span><br><span class="line">                        into destPath</span><br><span class="line">                        rename &#123; String fileName -&gt;</span><br><span class="line">                            fileName.replace(&quot;R.txt&quot;, &quot;$&#123;newFileNamePrefix&#125;-R.txt&quot;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    project.afterEvaluate &#123;</span><br><span class="line">        &#x2F;&#x2F;sample use for build all flavor for one time</span><br><span class="line">        if (hasFlavors) &#123;</span><br><span class="line">            task(tinkerPatchAllFlavorRelease) &#123;</span><br><span class="line">                group &#x3D; &#39;tinker&#39;</span><br><span class="line">                def originOldPath &#x3D; getTinkerBuildFlavorDirectory()</span><br><span class="line">                for (String flavor : flavors) &#123;</span><br><span class="line">                    def tinkerTask &#x3D; tasks.getByName(&quot;tinkerPatch$&#123;flavor.capitalize()&#125;Release&quot;)</span><br><span class="line">                    dependsOn tinkerTask</span><br><span class="line">                    def preAssembleTask &#x3D; tasks.getByName(&quot;process$&#123;flavor.capitalize()&#125;ReleaseManifest&quot;)</span><br><span class="line">                    preAssembleTask.doFirst &#123;</span><br><span class="line">                        String flavorName &#x3D; preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)</span><br><span class="line">                        project.tinkerPatch.oldApk &#x3D; &quot;$&#123;originOldPath&#125;&#x2F;$&#123;flavorName&#125;&#x2F;$&#123;project.name&#125;-$&#123;flavorName&#125;-release.apk&quot;</span><br><span class="line">                        project.tinkerPatch.buildConfig.applyMapping &#x3D; &quot;$&#123;originOldPath&#125;&#x2F;$&#123;flavorName&#125;&#x2F;$&#123;project.name&#125;-$&#123;flavorName&#125;-release-mapping.txt&quot;</span><br><span class="line">                        project.tinkerPatch.buildConfig.applyResourceMapping &#x3D; &quot;$&#123;originOldPath&#125;&#x2F;$&#123;flavorName&#125;&#x2F;$&#123;project.name&#125;-$&#123;flavorName&#125;-release-R.txt&quot;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            task(tinkerPatchAllFlavorDebug) &#123;</span><br><span class="line">                group &#x3D; &#39;tinker&#39;</span><br><span class="line">                def originOldPath &#x3D; getTinkerBuildFlavorDirectory()</span><br><span class="line">                for (String flavor : flavors) &#123;</span><br><span class="line">                    def tinkerTask &#x3D; tasks.getByName(&quot;tinkerPatch$&#123;flavor.capitalize()&#125;Debug&quot;)</span><br><span class="line">                    dependsOn tinkerTask</span><br><span class="line">                    def preAssembleTask &#x3D; tasks.getByName(&quot;process$&#123;flavor.capitalize()&#125;DebugManifest&quot;)</span><br><span class="line">                    preAssembleTask.doFirst &#123;</span><br><span class="line">                        String flavorName &#x3D; preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)</span><br><span class="line">                        project.tinkerPatch.oldApk &#x3D; &quot;$&#123;originOldPath&#125;&#x2F;$&#123;flavorName&#125;&#x2F;$&#123;project.name&#125;-$&#123;flavorName&#125;-debug.apk&quot;</span><br><span class="line">                        project.tinkerPatch.buildConfig.applyMapping &#x3D; &quot;$&#123;originOldPath&#125;&#x2F;$&#123;flavorName&#125;&#x2F;$&#123;project.name&#125;-$&#123;flavorName&#125;-debug-mapping.txt&quot;</span><br><span class="line">                        project.tinkerPatch.buildConfig.applyResourceMapping &#x3D; &quot;$&#123;originOldPath&#125;&#x2F;$&#123;flavorName&#125;&#x2F;$&#123;project.name&#125;-$&#123;flavorName&#125;-debug-R.txt&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制文件<br>打开Tinker Github： <a href="https://github.com/Tencent/tinker" target="_blank" rel="noopener">https://github.com/Tencent/tinker</a><br>选择<br><img src="http://upload-images.jianshu.io/upload_images/2803682-27fee21c53cf5629.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2803682-b69c66bf28af8377.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>将这六个文件夹复制到你的项目中 app中的MainActivity删掉就行，用自己的</p>
</li>
<li><p>配置Application<br>修改app/SampleApplicationLike 总之：图一的application名字对应manifest 中的即可，开始会有报错，build 项目后自动生成<br><img src="http://upload-images.jianshu.io/upload_images/2803682-903a7bc815448d21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>配置mainfest文件<br><img src="http://upload-images.jianshu.io/upload_images/2803682-50c2034c80f36449.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>添加服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;service</span><br><span class="line">    android:name&#x3D;&quot;.......service.SampleResultService&quot;</span><br><span class="line">    android:exported&#x3D;&quot;false&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>最后权限 一定要加，否则更新读取本地会失败</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.READ_EXTERNAL_STORAGE&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>MianActivity中<br>布局只需要一个TextView即可，默认显示Hello World!</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TextView tv&#x3D;findViewById(R.id.tv);</span><br><span class="line">&#x2F;&#x2F;tv.setText(&quot;这是更新后的数据&quot;);</span><br><span class="line">tv.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        &#x2F;&#x2F;安装更新</span><br><span class="line">        TinkerInstaller.onReceiveUpgradePatch(MainActivity.this,</span><br><span class="line">                Environment.getExternalStorageDirectory()+&quot;&#x2F;patch_signed_7zip.apk&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>三. 构建基础包<br>不要直接安装或者使用AS打包，AS右边选择这个<br><img src="http://upload-images.jianshu.io/upload_images/2803682-e11959fbc8e55ba1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>成功后 切换到project试图<br><img src="http://upload-images.jianshu.io/upload_images/2803682-04d30f7f2dc8d0f5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>然后安装这个app即可<br>界面如下<br><img src="http://upload-images.jianshu.io/upload_images/2803682-ab513601dea4dd4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p> 四. 构建补丁包<br>MainActivity中的注释打开<br><img src="http://upload-images.jianshu.io/upload_images/2803682-25b473c0232f60bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>修改包名,刚才安装的基础包重命名<br><img src="http://upload-images.jianshu.io/upload_images/2803682-d367022d132e491d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>和app build.grald下的这个名字一样即可<br><img src="http://upload-images.jianshu.io/upload_images/2803682-980f9ad901642b97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>这次选择tinker目录下的打补丁包<br><img src="http://upload-images.jianshu.io/upload_images/2803682-c636f72606247ca8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2803682-d0c7f51a56b4db7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>成功后，复制patch_signed_7zip.apk 到手机根目录<br>运行app，点击文本，成功后提示如下<br><img src="http://upload-images.jianshu.io/upload_images/2803682-fe016b6ad935eca2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>关闭App，后台也关闭、后台也关闭、后台也关闭，重启见证奇迹<br><img src="http://upload-images.jianshu.io/upload_images/2803682-646dc1e93a632870.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>项目demo地址：<a href="https://gitee.com/lrxcandroid/LrxcTinker.git" target="_blank" rel="noopener">https://gitee.com/lrxcandroid/LrxcTinker.git</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android RecyclerView-刷新闪屏</title>
    <url>/blog/2016/07/01/Android/Android%20RecyclerView-%E5%88%B7%E6%96%B0%E9%97%AA%E5%B1%8F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>项目中遇到的，使用notifyDataSetChanged() 刷新闪屏问题，网上找资料说 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notifyItemRangeChanged(0, list.size())</span><br></pre></td></tr></table></figure>
<p>试了下，确实可以，不过后来项目中加入Ndk又特么不行了。。。<br>后来又找资料，说什么动画问题，重写动画。。。麻烦的一塌糊涂啊</p>
<p>后来发现需要加上这句就行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">recyclerView.setItemAnimator(null);&#x2F;&#x2F;设置动画为null来解决闪烁问题</span><br></pre></td></tr></table></figure>
<p>完美解决。。。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android--极光推送</title>
    <url>/blog/2016/07/01/Android/Android--%E6%9E%81%E5%85%89%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一. 注册平台信息<br>官网：<a href="https://www.jiguang.cn/" target="_blank" rel="noopener">https://www.jiguang.cn/</a></p>
<ol>
<li>新建应用，名字随意</li>
<li>选择推送设置</li>
<li>填写项目包名，不可更改，一定不能错</li>
</ol>
<p>二. 项目集成<br>官方文档，很详细了<a href="https://docs.jiguang.cn/jpush/client/Android/android_guide/" target="_blank" rel="noopener">https://docs.jiguang.cn/jpush/client/Android/android_guide/</a><br>使用jcenter 自动集成步骤，简单，清晰</p>
<ol>
<li>app build.gradle中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ......</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.xxx.xxx&quot; &#x2F;&#x2F;JPush上注册的包名.</span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        ndk &#123;</span><br><span class="line">            &#x2F;&#x2F;选择要添加的对应cpu类型的.so库。</span><br><span class="line">            abiFilters &#39;armeabi&#39;, &#39;armeabi-v7a&#39;, &#39;arm64-v8a&#39;</span><br><span class="line">            &#x2F;&#x2F; 还可以添加 &#39;x86&#39;, &#39;x86_64&#39;, &#39;mips&#39;, &#39;mips64&#39;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        manifestPlaceholders &#x3D; [</span><br><span class="line">            JPUSH_PKGNAME : applicationId,</span><br><span class="line">            JPUSH_APPKEY : &quot;你的appkey&quot;, &#x2F;&#x2F;JPush上注册的包名对应的appkey.</span><br><span class="line">            JPUSH_CHANNEL : &quot;developer-default&quot;, &#x2F;&#x2F;暂时填写默认值即可.</span><br><span class="line">        ]</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    compile &#39;cn.jiguang.sdk:jpush:3.0.9&#39;  &#x2F;&#x2F; 此处以JPush 3.0.9 版本为例。</span><br><span class="line">    compile &#39;cn.jiguang.sdk:jcore:1.1.7&#39;  &#x2F;&#x2F; 此处以JCore 1.1.7 版本为例。</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>新建Application 类<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ExampleApplication extends Application &#123;</span><br><span class="line">@Override</span><br><span class="line">    public void onCreate() &#123;</span><br><span class="line">        super.onCreate();</span><br><span class="line">        JPushInterface.setDebugMode(true);</span><br><span class="line">        &#x2F;&#x2F;必须初始化</span><br><span class="line">        JPushInterface.init(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>mainfest 记得配置Application</li>
</ol>
<p>三.  开始推送<br><img src="http://upload-images.jianshu.io/upload_images/2803682-182a4437a0c0f182.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>点击发送 ，就这么简单</p>
<p>四.  接受通知内容触发活动<br>官方高级文档说明：<a href="https://docs.jiguang.cn/jpush/client/Android/android_senior/" target="_blank" rel="noopener">https://docs.jiguang.cn/jpush/client/Android/android_senior/</a></p>
<ol>
<li>自定义BroadcastRecevice<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyReceiver extends BroadcastReceiver &#123;</span><br><span class="line">    private static final String TAG &#x3D; &quot;MyReceiver&quot;;</span><br><span class="line"></span><br><span class="line">    private NotificationManager nm;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">        if (null &#x3D;&#x3D; nm) &#123;</span><br><span class="line">            nm &#x3D; (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Bundle bundle &#x3D; intent.getExtras();</span><br><span class="line">        Log.d(TAG, &quot;onReceive - &quot; + intent.getAction() + &quot;, extras: &quot;);</span><br><span class="line"></span><br><span class="line">        if (JPushInterface.ACTION_REGISTRATION_ID.equals(intent.getAction())) &#123;</span><br><span class="line">            Log.d(TAG, &quot;JPush用户注册成功&quot;);</span><br><span class="line"></span><br><span class="line">        &#125; else if (JPushInterface.ACTION_MESSAGE_RECEIVED.equals(intent.getAction())) &#123;</span><br><span class="line">            Log.d(TAG, &quot;接受到推送下来的自定义消息&quot;);</span><br><span class="line"></span><br><span class="line">        &#125; else if (JPushInterface.ACTION_NOTIFICATION_RECEIVED.equals(intent.getAction())) &#123;</span><br><span class="line">            Log.d(TAG, &quot;接受到推送下来的通知&quot;);</span><br><span class="line"></span><br><span class="line">            receivingNotification(context, bundle);</span><br><span class="line"></span><br><span class="line">        &#125; else if (JPushInterface.ACTION_NOTIFICATION_OPENED.equals(intent.getAction())) &#123;</span><br><span class="line">            Log.d(TAG, &quot;用户点击打开了通知&quot;);</span><br><span class="line"></span><br><span class="line">            openNotification(context, bundle);</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Log.d(TAG, &quot;Unhandled intent - &quot; + intent.getAction());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void receivingNotification(Context context, Bundle bundle) &#123;</span><br><span class="line">        String title &#x3D; bundle.getString(JPushInterface.EXTRA_NOTIFICATION_TITLE);</span><br><span class="line">        Log.d(TAG, &quot; title : &quot; + title);</span><br><span class="line">        String message &#x3D; bundle.getString(JPushInterface.EXTRA_ALERT);</span><br><span class="line">        Log.d(TAG, &quot;message : &quot; + message);</span><br><span class="line">        String extras &#x3D; bundle.getString(JPushInterface.EXTRA_EXTRA);</span><br><span class="line">        Log.d(TAG, &quot;extras : &quot; + extras);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void openNotification(Context context, Bundle bundle) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>mainfest 记得添加广播<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;receiver</span><br><span class="line">    android:name&#x3D;&quot;.MyReceiver&quot;</span><br><span class="line">    android:enabled&#x3D;&quot;true&quot;</span><br><span class="line">    android:exported&#x3D;&quot;false&quot;&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;action android:name&#x3D;&quot;cn.jpush.android.intent.REGISTRATION&quot; &#x2F;&gt; &lt;!--Required  用户注册SDK的intent--&gt;</span><br><span class="line">        &lt;action android:name&#x3D;&quot;cn.jpush.android.intent.MESSAGE_RECEIVED&quot; &#x2F;&gt; &lt;!--Required  用户接收SDK消息的intent--&gt;</span><br><span class="line">        &lt;action android:name&#x3D;&quot;cn.jpush.android.intent.NOTIFICATION_RECEIVED&quot; &#x2F;&gt; &lt;!--Required  用户接收SDK通知栏信息的intent--&gt;</span><br><span class="line">        &lt;action android:name&#x3D;&quot;cn.jpush.android.intent.NOTIFICATION_OPENED&quot; &#x2F;&gt; &lt;!--Required  用户打开自定义通知栏的intent--&gt;</span><br><span class="line">        &lt;action android:name&#x3D;&quot;cn.jpush.android.intent.ACTION_RICHPUSH_CALLBACK&quot; &#x2F;&gt; &lt;!--Optional 用户接受Rich Push Javascript 回调函数的intent--&gt;</span><br><span class="line">        &lt;action android:name&#x3D;&quot;cn.jpush.android.intent.CONNECTION&quot; &#x2F;&gt;&lt;!-- 接收网络变化 连接&#x2F;断开 since 1.6.3 --&gt;</span><br><span class="line">        &lt;category android:name&#x3D;&quot;你的项目包名&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;intent-filter&gt;</span><br><span class="line">&lt;&#x2F;receiver&gt;</span><br></pre></td></tr></table></figure>
3 .再次推送信息，并查看日志，对应的方法里面处理即可</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 在线热更新_TinkerPatch</title>
    <url>/blog/2016/07/01/Android/Android%20%E5%9C%A8%E7%BA%BF%E7%83%AD%E6%9B%B4%E6%96%B0_TinkerPatch/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>说明：TinkerPatch和Tinker并不是一个东西。TinkerPatch支持在线更新<br>想看Tinker的点这个<a href="http://www.jianshu.com/p/ad7deea62a07" target="_blank" rel="noopener">http://www.jianshu.com/p/ad7deea62a07</a></p>
<p>一 ，注册平台账号<br>官网：<a href="http://www.tinkerpatch.com/" target="_blank" rel="noopener">http://www.tinkerpatch.com/</a><br>新建app，名字与本地项目名字保持一致<br><img src="http://upload-images.jianshu.io/upload_images/2803682-cf373bbd5ba1b5da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>二 ：项目配置</p>
<ol>
<li><p>项目build.gradle配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">        ...</span><br><span class="line">        &#x2F;&#x2F; TinkerPatch 插件</span><br><span class="line">        classpath &quot;com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:1.2.2&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>2 app build.gradle中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &quot;com.android.support:multidex:1.0.2&quot;</span><br><span class="line">&#x2F;&#x2F;若使用annotation需要单独引用,对于tinker的其他库都无需再引用</span><br><span class="line">annotationProcessor(&quot;com.tinkerpatch.tinker:tinker-android-anno:1.9.2&quot;) &#123; changing &#x3D; true &#125;</span><br><span class="line">compileOnly(&quot;com.tinkerpatch.tinker:tinker-android-anno:1.9.2&quot;) &#123; changing &#x3D; true &#125;</span><br><span class="line">implementation(&quot;com.tinkerpatch.sdk:tinkerpatch-android-sdk:1.2.2&quot;) &#123; changing &#x3D; true &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">     ...</span><br><span class="line">    multiDexEnabled true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>app目录新建下新建tinkerpatch.gradle<br><a href="https://github.com/TinkerPatch/tinkerpatch-sample/blob/master/app/tinkerpatch.gradle" target="_blank" rel="noopener">https://github.com/TinkerPatch/tinkerpatch-sample/blob/master/app/tinkerpatch.gradle</a><br>全部复制进去<br>app build.gradle添加依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apply from: &#39;tinkerpatch.gradle&#39;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/2803682-27720cb6e20eca64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>初始化Application<br>新建SampleApplicationLike全部复制<br><a href="https://github.com/TinkerPatch/tinkerpatch-sample/blob/master/app/src/main/java/tinker/sample/android/app/SampleApplicationLike.java" target="_blank" rel="noopener">https://github.com/TinkerPatch/tinkerpatch-sample/blob/master/app/src/main/java/tinker/sample/android/app/SampleApplicationLike.java</a></p>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2803682-a027ae132d72b3a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>名字要改成这汇总</p>
<p>打开manifest，名字与上图保持一致，开始报错，build下就好了<br><img src="http://upload-images.jianshu.io/upload_images/2803682-816097a2c6d27f0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ol start="5">
<li>配置key，版本<br>打开tinkerpatch.gradle<br><img src="http://upload-images.jianshu.io/upload_images/2803682-1ac75ad810633b70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>key是刚才申请的</li>
<li>界面<br>一个显示信息，一个按钮关闭进程<br><img src="http://upload-images.jianshu.io/upload_images/2803682-631431d5fc42ae92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2803682-20f9b5244072e5fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>三. 编译</p>
<ol>
<li>构建基础包<br><img src="http://upload-images.jianshu.io/upload_images/2803682-c0b71c37be9a3ef7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>成功后 安装即可<br><img src="http://upload-images.jianshu.io/upload_images/2803682-de8c1a07d48adba5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>界面如下<br><img src="http://upload-images.jianshu.io/upload_images/2803682-9e21956a6cdb3f64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>2 构建补丁包</p>
<ol>
<li><p>这句注释打开<br><img src="http://upload-images.jianshu.io/upload_images/2803682-9f2b1ab454dcc741.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>修改基础包名称<br><img src="http://upload-images.jianshu.io/upload_images/2803682-d2718b3a837d3f7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2803682-30b4af5a1a1aa508.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>开始构建<br><img src="http://upload-images.jianshu.io/upload_images/2803682-f02b8047d79dfffa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2803682-f116d60b00c6d42d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>上传<br><img src="http://upload-images.jianshu.io/upload_images/2803682-d186b64e0e08b237.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2803682-1b6db60cf7b09a28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/2803682-8d966dad202102e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>提交即可</p>
<p>5.启动app下载补丁(失败的看末尾处说明)<br><img src="http://upload-images.jianshu.io/upload_images/2803682-05c3fa8a4e4d12ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>看log有请求记录,重启app<br><img src="http://upload-images.jianshu.io/upload_images/2803682-f00178a7833438fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>说明 ：重要<br><img src="http://upload-images.jianshu.io/upload_images/2803682-99ac2f9edb9e2e73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>SampleApplicationLike中默认配置3个小时才会检查一次，所以刚才启动一次，再启动是不会检查的。。。<br>方法：app清除数据或者卸载重装即可</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Cordova-自定义View</title>
    <url>/blog/2020/07/01/Android/Android-Cordova-%E8%87%AA%E5%AE%9A%E4%B9%89View/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一.  正常使用继承CordovaActivity<br>二.  重写 loadUrl(“<a href="http://www.jianshu.com/&quot;" target="_blank" rel="noopener">http://www.jianshu.com/&quot;</a>)<br>但是页面是全屏 且不能自定义 比如添加ToolBar</p>
<p>那么有没有办法自定义VIew呢，答案肯定是有的<br>一. 继承CordovaActivity 设置setContentView</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    loadUrl(&quot;http:&#x2F;&#x2F;www.jianshu.com&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二. 新建布局SystemWebView</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.Toolbar</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:background&#x3D;&quot;@color&#x2F;colorPrimary&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;org.apache.cordova.engine.SystemWebView</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;tutorialView&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>

<p>三.  重写makeWebView </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected CordovaWebView makeWebView() &#123;</span><br><span class="line">    &#x2F;&#x2F;自定义webview</span><br><span class="line">    SystemWebView tutorialView &#x3D; (SystemWebView) findViewById(R.id.systemWebview);</span><br><span class="line">    return new CordovaWebViewImpl(new SystemWebViewEngine(tutorialView));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>四. 重写createViews    super方法必须注释掉</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected void createViews() &#123;</span><br><span class="line">    &#x2F;&#x2F;super.createViews();必须注释</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实就是二、三方法 很简单，可以添加ToolBar的。。。</p>
]]></content>
      <categories>
        <category>Hybrid</category>
      </categories>
      <tags>
        <tag>hybrid</tag>
      </tags>
  </entry>
  <entry>
    <title>Android--自定义相机(前后切换、闪光灯、对焦、镜头缩放)</title>
    <url>/blog/2016/07/01/Android/Android--%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%B8%E6%9C%BA(%E5%89%8D%E5%90%8E%E5%88%87%E6%8D%A2%E3%80%81%E9%97%AA%E5%85%89%E7%81%AF%E3%80%81%E5%AF%B9%E7%84%A6%E3%80%81%E9%95%9C%E5%A4%B4%E7%BC%A9%E6%94%BE)/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>最近项目中使用相机功能，需要自定义，整理下，给需要的朋友<br>实现的功能：前后镜头切换、闪光灯模式(三种)、对焦、镜头手势缩放、本地保存、弹窗预览<br>实现逻辑：自定义View继承自SurfaceView，Activity 布局中引入，在Activity中进行各种操作 拍照，对焦等等</p>
<p>镜头切换方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;&#x2F;切换摄像头</span><br><span class="line">    private int cameraPosition &#x3D; 1; &#x2F;&#x2F;当前选用的摄像头，1后置 0前置</span><br><span class="line"></span><br><span class="line">    public void switchFrontCamera() &#123;</span><br><span class="line">        int cameraCount &#x3D; Camera.getNumberOfCameras();&#x2F;&#x2F;得到摄像头的个数</span><br><span class="line">        Camera.CameraInfo cameraInfo &#x3D; new Camera.CameraInfo();</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D; 0; i &lt; cameraCount; i++) &#123;</span><br><span class="line">            Camera.getCameraInfo(i, cameraInfo);&#x2F;&#x2F;得到每一个摄像头的信息</span><br><span class="line">            if (cameraPosition &#x3D;&#x3D; 1) &#123;</span><br><span class="line">                &#x2F;&#x2F;现在是后置，变更为前置</span><br><span class="line">                if (cameraInfo.facing &#x3D;&#x3D; Camera.CameraInfo.CAMERA_FACING_FRONT) &#123;&#x2F;&#x2F;代表摄像头的方位，CAMERA_FACING_FRONT前置      CAMERA_FACING_BACK后置</span><br><span class="line">                    &#x2F;&#x2F;重新打开</span><br><span class="line">                    reStartCamera(i);</span><br><span class="line">                    cameraPosition &#x3D; 0;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                &#x2F;&#x2F;现在是前置， 变更为后置</span><br><span class="line">                if (cameraInfo.facing &#x3D;&#x3D; Camera.CameraInfo.CAMERA_FACING_BACK) &#123;&#x2F;&#x2F;代表摄像头的方位，CAMERA_FACING_FRONT前置      CAMERA_FACING_BACK后置</span><br><span class="line">                    reStartCamera(i);</span><br><span class="line">                    cameraPosition &#x3D; 1;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;重新打开预览</span><br><span class="line">    public void reStartCamera(int i) &#123;</span><br><span class="line">        if (camera !&#x3D; null) &#123;</span><br><span class="line">            camera.stopPreview();&#x2F;&#x2F;停掉原来摄像头的预览</span><br><span class="line">            camera.release();&#x2F;&#x2F;释放资源</span><br><span class="line">            camera &#x3D; null;&#x2F;&#x2F;取消原来摄像头</span><br><span class="line">        &#125;</span><br><span class="line">        try &#123;</span><br><span class="line">            camera &#x3D; Camera.open(i);&#x2F;&#x2F;打开当前选中的摄像头</span><br><span class="line">            camera.setPreviewDisplay(holder);&#x2F;&#x2F;通过surfaceview显示取景画面</span><br><span class="line">&#x2F;&#x2F;            camera.setDisplayOrientation(90);&#x2F;&#x2F; 屏幕方向</span><br><span class="line">            camera.startPreview();&#x2F;&#x2F;开始预览</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>闪光灯模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">camePreview.setIsOpenFlashMode(Camera.Parameters.FLASH_MODE_AUTO);&#x2F;&#x2F;自动模式</span><br><span class="line">camePreview.setIsOpenFlashMode(Camera.Parameters.FLASH_MODE_ON);&#x2F;&#x2F;总是开启</span><br><span class="line">camePreview.setIsOpenFlashMode(Camera.Parameters.FLASH_MODE_OFF);&#x2F;&#x2F;总是关闭</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;设置开启闪光灯(重新预览)</span><br><span class="line">    public void setIsOpenFlashMode(String mIsOpenFlashMode) &#123;</span><br><span class="line">        Camera.Parameters mParameters &#x3D; camera.getParameters();</span><br><span class="line">        &#x2F;&#x2F;设置闪光灯模式</span><br><span class="line">        mParameters.setFlashMode(mIsOpenFlashMode);</span><br><span class="line">        camera.setParameters(mParameters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>镜头对焦</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 手动对焦</span><br><span class="line">public void autoFocus() &#123;</span><br><span class="line">    camera.autoFocus(null);&#x2F;&#x2F;自动对焦 不需要回调</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;自动连续对焦</span><br><span class="line">    Camera.Parameters parameters &#x3D; camera.getParameters();</span><br><span class="line">    if (parameters.getSupportedFocusModes().contains(android.hardware.Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE)) &#123;</span><br><span class="line">        parameters.setFocusMode(android.hardware.Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE);&#x2F;&#x2F; 连续对焦模式</span><br><span class="line">    &#125;</span><br><span class="line">    camera.setParameters(parameters);</span><br></pre></td></tr></table></figure>

<p>手势缩放</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Activity中初始化</span><br><span class="line">ScaleGestureDetector gestureDetector &#x3D; new ScaleGestureDetector(this, new ScaleGestureListener());</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;重写onTouchEvent方法 获取手势</span><br><span class="line">@Override</span><br><span class="line">public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">    &#x2F;&#x2F;识别手势</span><br><span class="line">    gestureDetector.onTouchEvent(event);</span><br><span class="line">    return super.onTouchEvent(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;操作类</span><br><span class="line">class ScaleGestureListener implements ScaleGestureDetector.OnScaleGestureListener &#123;</span><br><span class="line">    float mScaleFactor;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onScale(ScaleGestureDetector detector) &#123;</span><br><span class="line">        if (detector.getCurrentSpan() &gt; mScaleFactor) &#123;</span><br><span class="line">            camePreview.zoomOut();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            camePreview.zoomIn();</span><br><span class="line">        &#125;</span><br><span class="line">        mScaleFactor &#x3D; detector.getCurrentSpan();</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onScaleBegin(ScaleGestureDetector detector) &#123;</span><br><span class="line">        mScaleFactor &#x3D; detector.getCurrentSpan();</span><br><span class="line">        &#x2F;&#x2F;一定要返回true才会进入onScale()这个函数</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onScaleEnd(ScaleGestureDetector detector) &#123;</span><br><span class="line">        mScaleFactor &#x3D; detector.getCurrentSpan();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;自定义相机View中定义方法</span><br><span class="line">&#x2F;&#x2F;放大</span><br><span class="line">public void zoomOut() &#123;</span><br><span class="line">    Camera.Parameters parameters &#x3D; camera.getParameters();</span><br><span class="line">    if (!parameters.isZoomSupported()) return;</span><br><span class="line"></span><br><span class="line">    int zoom &#x3D; parameters.getZoom() + 1;</span><br><span class="line">    if (zoom &lt; parameters.getMaxZoom()) &#123;</span><br><span class="line">        parameters.setZoom(zoom);</span><br><span class="line">        camera.setParameters(parameters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;缩小</span><br><span class="line">public void zoomIn() &#123;</span><br><span class="line">    Camera.Parameters parameters &#x3D; camera.getParameters();</span><br><span class="line">    if (!parameters.isZoomSupported()) return;</span><br><span class="line"></span><br><span class="line">    int zoom &#x3D; parameters.getZoom() - 1;</span><br><span class="line">    if (zoom &gt;&#x3D; 0) &#123;</span><br><span class="line">        parameters.setZoom(zoom);</span><br><span class="line">        camera.setParameters(parameters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>预览使用Dialog，还有前后摄像头拍照方向问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;bitmap旋转90度</span><br><span class="line">Matrix matrix &#x3D; new Matrix();</span><br><span class="line">matrix.setRotate(90);</span><br><span class="line">Bitmap waterMarkBitmap &#x3D; Bitmap.createBitmap(waterMarkBitmap, 0, 0, waterMarkBitmap.getWidth(), waterMarkBitmap.getHeight(), matrix, true);</span><br></pre></td></tr></table></figure>
<p>项目源码 <a href="https://github.com/Lrxc/CustomCamera.git" target="_blank" rel="noopener">https://github.com/Lrxc/CustomCamera.git</a></p>
<p>测试的Demo</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-AlertDialog--设置确定不取消</title>
    <url>/blog/2016/07/01/Android/Android-AlertDialog--%E8%AE%BE%E7%BD%AE%E7%A1%AE%E5%AE%9A%E4%B8%8D%E5%8F%96%E6%B6%88/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>AlertDialog 点击空白处可以取消，点击确定、取消按钮也会取消，但是有些场景不需要取消的。。<br>空白处取消设置setCancelable(false) 即可 但是确定、取消按钮还是可以取消</p>
<p>方法如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AlertDialog show &#x3D; new AlertDialog.Builder(MainActivity.this)</span><br><span class="line">        .setTitle(&quot;提示&quot;).setMessage(&quot;不能打开&quot;).setCancelable(false)</span><br><span class="line">        .setPositiveButton(&quot;确定&quot;, null).show();</span><br><span class="line">&#x2F;&#x2F;点击确定按钮不消失(必须在show方法之后)</span><br><span class="line">show.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(null);</span><br></pre></td></tr></table></figure>



<p><img src="http://upload-images.jianshu.io/upload_images/2803682-83a5f2d16aa2b17a.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GIF.gif"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Emulator-模拟器-Root和文件互传</title>
    <url>/blog/2016/07/01/Android/Android-Emulator-%E6%A8%A1%E6%8B%9F%E5%99%A8-Root%E5%92%8C%E6%96%87%E4%BB%B6%E4%BA%92%E4%BC%A0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##一 文件互传、共享</p>
<h4 id="1-快接安装app或者复制文件到模拟器"><a href="#1-快接安装app或者复制文件到模拟器" class="headerlink" title="1. 快接安装app或者复制文件到模拟器"></a>1. 快接安装app或者复制文件到模拟器</h4><p><img src="https://upload-images.jianshu.io/upload_images/2803682-2ba99f6e924f412a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h4 id="2-文件导出"><a href="#2-文件导出" class="headerlink" title="2. 文件导出"></a>2. 文件导出</h4><p><img src="https://upload-images.jianshu.io/upload_images/2803682-419dbc39248eddff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>##一 Emulator 模拟器 获取 Root</p>
<h4 id="一-需要SuperSu-apk-和Recovery-Flashable-zip"><a href="#一-需要SuperSu-apk-和Recovery-Flashable-zip" class="headerlink" title="一. 需要SuperSu.apk 和Recovery Flashable.zip"></a>一. 需要SuperSu.apk 和Recovery Flashable.zip</h4><p>官网：<a href="http://www.supersu.com/download" target="_blank" rel="noopener">http://www.supersu.com/download</a><br><a href="https://supersuroot.org/downloads/?MA" target="_blank" rel="noopener">https://supersuroot.org/downloads/?MA</a><br>百度云：<a href="https://pan.baidu.com/s/1F28p9XkIpFEGpnlFObyXmg" target="_blank" rel="noopener">https://pan.baidu.com/s/1F28p9XkIpFEGpnlFObyXmg</a> 提取码:32iq</p>
<h4 id="二-获取Root"><a href="#二-获取Root" class="headerlink" title="二 获取Root"></a>二 获取Root</h4><ol>
<li><p>使用Android Studio 创建模拟器<br><img src="https://upload-images.jianshu.io/upload_images/2803682-1a86ecde6233808e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>启动模拟器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; cmd终端进入到android sdk的tools目录下</span><br><span class="line">&#x2F;&#x2F; 查看有几个虚拟机</span><br><span class="line">.&#x2F;emulator -list-avds</span><br><span class="line">&#x2F;&#x2F; 启动模拟器(avd_name 是创建的虚拟机的名称)</span><br><span class="line">.&#x2F;emulator -avd avd_name -writable-system</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-c602161068331b4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>安装SuperSu.apk<br>上面启动模拟器的终端不要关，新开一个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;apkpath SuperSu.apk路径</span><br><span class="line">adb install apkpath</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-8a4b33298623a71a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>获取Root</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\adb root</span><br><span class="line">.\adb shell setenforce 0</span><br><span class="line">.\adb remount</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-7e08f9aa7861058e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>Flashable.zip解压，把x86下的su.pie文件分别push到模拟器的system/bin和system/xbin目录下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;su.pie的路径不要有中文、空格等</span><br><span class="line">.\adb push .\x86\su.pie &#x2F;system&#x2F;bin&#x2F;su</span><br><span class="line">.\adb push .\x86\su.pie &#x2F;system&#x2F;xbin&#x2F;su</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-1e9a4d83b0486b30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>修改权限，安装su</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\adb shell chmod 0755 &#x2F;system&#x2F;bin&#x2F;su</span><br><span class="line">.\adb shell chmod 0755 &#x2F;system&#x2F;xbin&#x2F;su</span><br><span class="line">.\adb shell su --install</span><br><span class="line">.\adb shell &quot;su --daemon&amp;&quot;</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-d4a41f0b8bf2ee1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>打开SuperSu。选择CANCEL 取消就行了<br><img src="https://upload-images.jianshu.io/upload_images/2803682-9d9de76685a970e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>重启后root失效，重新执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.\adb root</span><br><span class="line">.\adb shell setenforce 0</span><br><span class="line">.\adb remount</span><br><span class="line">.\adb push .\x86\su.pie &#x2F;system&#x2F;bin&#x2F;su</span><br><span class="line">.\adb push .\x86\su.pie &#x2F;system&#x2F;xbin&#x2F;su</span><br><span class="line">.\adb shell chmod 0755 &#x2F;system&#x2F;bin&#x2F;su</span><br><span class="line">.\adb shell chmod 0755 &#x2F;system&#x2F;xbin&#x2F;su</span><br><span class="line">.\adb shell su --install</span><br><span class="line">.\adb shell &quot;su --daemon&amp;&quot;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>参考：<a href="https://juejin.im/post/5cd2839de51d453a6c23b080" target="_blank" rel="noopener">https://juejin.im/post/5cd2839de51d453a6c23b080</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-RecyclerView</title>
    <url>/blog/2016/07/01/Android/Android-RecyclerView/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />



<pre><code>holder.itemView.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            onItemClickListener.onItemClick(position);
        }
    });


private OnItemClickListener onItemClickListener;

public void setOnItemClickListener(OnItemClickListener onItemClickListener) {
    this.onItemClickListener = onItemClickListener;
}

public interface OnItemClickListener {
    void onItemClick(int position);
}</code></pre>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Fragment-嵌套使用</title>
    <url>/blog/2016/07/01/Android/Android-Fragment-%E5%B5%8C%E5%A5%97%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>1 setUserVisibleHint<br>只有fragment与viewpager配合使用，才会调用<br>3 onHiddenChanged的回调时机<br>当使用add()+show()，hide()跳转新的Fragment时，旧的Fragment回调onHiddenChanged()，不会回调onStop()等生命周期方法，而新的Fragment在创建时是不会回调onHiddenChanged()，这点要切记。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Retrofit-入门教程</title>
    <url>/blog/2016/07/01/Android/Android-Retrofit-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>首先添加依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &#39;com.squareup.retrofit2:retrofit:2.3.0&#39;</span><br><span class="line">compile &#39;com.squareup.retrofit2:converter-gson:2.3.0&#39;&#x2F;&#x2F;请求结果直接转化为实体类，省略gson转化</span><br></pre></td></tr></table></figure>

<p>创建一个接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 完整地址: http:&#x2F;&#x2F;www.wuhaojun.com&#x2F;api&#x2F;android&#x2F;customer?type&#x3D;1</span><br><span class="line">public interface CustomerService &#123;</span><br><span class="line">    @GET(&quot;&#x2F;api&#x2F;android&#x2F;customer&quot;)&#x2F;&#x2F;Get请求地址</span><br><span class="line">    Call&lt;Customer&gt; getCustomer(@Query(&quot;type&quot;) int type);&#x2F;&#x2F;定义参数type的当前是第几页 1,2,3 ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请求方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String baseUrl &#x3D; &quot;http:&#x2F;&#x2F;www.wuhaojun.com&#x2F;&quot;;&#x2F;&#x2F;请求地址，固定的一部分</span><br><span class="line">Retrofit retrofit &#x3D; new Retrofit.Builder()</span><br><span class="line">        .baseUrl(baseUrl)</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())&#x2F;&#x2F;请求结果直接转化实体类</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">CustomerService movieService &#x3D; retrofit.create(CustomerService.class);&#x2F;&#x2F;创建对象</span><br><span class="line">Call&lt;Customer&gt; call &#x3D; movieService.getCustomer(1);&#x2F;&#x2F;传递请求参数 对应接口中的定义</span><br><span class="line">call.enqueue(new Callback&lt;Customer&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onResponse(Call&lt;Customer&gt; call, Response&lt;Customer&gt; response) &#123;</span><br><span class="line">        Log.i(TAG, &quot;onResponse: &quot;+response.body().getMessage());&#x2F;&#x2F;返回的就是实体类，不需要Gson转换</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onFailure(Call&lt;Customer&gt; call, Throwable t) &#123;</span><br><span class="line">        Log.i(TAG, &quot;onFailure: &quot;+t.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>最后，别忘了添加网络权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.INTERNET&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>附加其他上传类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;post json</span><br><span class="line">    @POST</span><br><span class="line">    Call&lt;String&gt; reJson(@Url String url, @Body RequestBody body);</span><br><span class="line"></span><br><span class="line">	HashMap&lt;String, String&gt; params &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">	params.put(&quot;phone_num&quot;, &quot;123&quot;);</span><br><span class="line">	JSONObject json &#x3D; new JSONObject(params);</span><br><span class="line">    RequestBody body &#x3D; RequestBody.create(okhttp3.MediaType.parse(&quot;application&#x2F;json;charset&#x3D;utf-8&quot;), json);&#x2F;&#x2F;转化类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;post params</span><br><span class="line">    @POST</span><br><span class="line">    @FormUrlEncoded</span><br><span class="line">    Call&lt;String&gt; reParams(@Url String url, @FieldMap Map&lt;String, String&gt; map);</span><br><span class="line"></span><br><span class="line">	HashMap&lt;String, String&gt; hashMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">    hashMap.put(&quot;user&quot;, &quot;test&quot;);	</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;post file map</span><br><span class="line">    @POST</span><br><span class="line">    @Multipart</span><br><span class="line">    Call&lt;String&gt; reUploadFile(@Url String url, @PartMap Map&lt;String, RequestBody&gt; params);</span><br><span class="line">    </span><br><span class="line">    File file &#x3D; new File(&quot;&quot;);</span><br><span class="line">    Map&lt;String, RequestBody&gt; hashMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">    hashMap.put(&quot;json&quot;, RequestBody.create(MediaType.parse(&quot;text&#x2F;plain&quot;), &quot;jsonargs&quot;));&#x2F;&#x2F;键值对</span><br><span class="line">    hashMap.put(&quot;file\&quot;; filename&#x3D;\&quot;&quot; + file.getName(), RequestBody.create(MediaType.parse(&quot;multipart&#x2F;form-data&quot;), file));&#x2F;&#x2F;文件</span><br></pre></td></tr></table></figure>

<p>大神tough1985文章：<a href="http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="noopener">http://gank.io/post/56e80c2c677659311bed9841</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-RxJava1-入门教程</title>
    <url>/blog/2016/07/01/Android/Android-RxJava1-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>添加依赖（注意是rxjava1 不是rxjava2 ！！）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &#39;io.reactivex:rxjava:1.3.0&#39;</span><br><span class="line">compile &#39;io.reactivex:rxandroid:1.2.1&#39;</span><br></pre></td></tr></table></figure>

<p>一。  基本使用</p>
<ol>
<li><p>首先新建被观察者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;被观察者</span><br><span class="line">        Observable&lt;String&gt; observable &#x3D; Observable.create(new Observable.OnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void call(Subscriber&lt;? super String&gt; subscriber) &#123;</span><br><span class="line">                subscriber.onNext(&quot;this is a message 1&quot;);&#x2F;&#x2F;发送第一条信息</span><br><span class="line">                subscriber.onNext(&quot;this is a message 2&quot;);&#x2F;&#x2F;发送第二条信息</span><br><span class="line">                subscriber.onCompleted();&#x2F;&#x2F;发送完成</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>订阅者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Subscriber&lt;String&gt; subscriber &#x3D; new Subscriber&lt;String&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onCompleted() &#123;</span><br><span class="line">               &#x2F;&#x2F;全部接受完回调</span><br><span class="line">               Log.i(TAG, &quot;onCompleted: &quot;);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onError(Throwable e) &#123;</span><br><span class="line">               &#x2F;&#x2F;错误的回调</span><br><span class="line">               Log.i(TAG, &quot;onError: &quot; + e.getMessage());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onNext(String o) &#123;</span><br><span class="line">               &#x2F;&#x2F;接受单条数据</span><br><span class="line">               Log.i(TAG, &quot;onNext: &quot; + o);</span><br><span class="line">               Toast.makeText(MainActivity.this, o, Toast.LENGTH_SHORT).show();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>订阅关系</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;订阅关系</span><br><span class="line">        observable.subscribe(subscriber);&#x2F;&#x2F;添加订阅者</span><br></pre></td></tr></table></figure>
<p>运行下(上面全部放到activity oncreate方法中就行了)，这就是最基本的使用了，是不是很简单呢</p>
</li>
</ol>
<p>二：耗时操作，RxJava本来就是处理异步的 而且特别简单</p>
<p>添加耗时操作，上面 被观察者代码中 增加就行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    Thread.sleep(9000);&#x2F;&#x2F;模拟耗时操作，网络请求</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">subscriber.onNext(&quot;this is a message 1&quot;);</span><br><span class="line">subscriber.onNext(&quot;this is a message 2&quot;);</span><br><span class="line">subscriber.onCompleted();</span><br></pre></td></tr></table></figure>

<p>现在直接运行肯定会ANR的。。<br>很简单 ，只需要修改下订阅关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">observable.subscribeOn(Schedulers.io())&#x2F;&#x2F;订阅者运行在子线程</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())&#x2F;&#x2F;Toast回到主线程</span><br><span class="line">        .subscribe(subscriber);</span><br></pre></td></tr></table></figure>

<p>怎么样？是不是不需要Handler发过来发过去了。。。</p>
<p>这是最原始的用法，下面开始精简用法<br>三。  精简使用</p>
<p>针对上面第一个的简单实现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String[] values &#x3D; &#123;&quot;this is a message 1&quot;, &quot;this is a message 2&quot;&#125;;&#x2F;&#x2F;定义一个数组</span><br><span class="line">Observable.from(values)</span><br><span class="line">         .subscribe(new Subscriber&lt;String&gt;() &#123;</span><br><span class="line">             @Override</span><br><span class="line">             public void onCompleted() &#123;&#125;</span><br><span class="line"></span><br><span class="line">             @Override</span><br><span class="line">             public void onError(Throwable e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">             @Override</span><br><span class="line">             public void onNext(String s) &#123;</span><br><span class="line">                 Toast.makeText(MainActivity.this, s, Toast.LENGTH_SHORT).show();</span><br><span class="line">             &#125;</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure>

<p>当然，还可以更简单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String[] values &#x3D; &#123;&quot;this is a message 1&quot;, &quot;this is a message 2&quot;, &quot;this is a message 3&quot;&#125;;</span><br><span class="line">Observable.from(values)</span><br><span class="line">               .subscribe(new Action1&lt;String&gt;() &#123;</span><br><span class="line">                   @Override</span><br><span class="line">                   public void call(String s) &#123;</span><br><span class="line">                       Toast.makeText(MainActivity.this, s, Toast.LENGTH_SHORT).show();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure>
<p>怎么？还不够简洁，再来！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String[] values &#x3D; &#123;&quot;this is a message 1&quot;, &quot;this is a message 2&quot;, &quot;this is a message 3&quot;&#125;;</span><br><span class="line">Observable.from(values)</span><br><span class="line">        .subscribe(s -&gt; Toast.makeText(MainActivity.this, s, Toast.LENGTH_SHORT).show());&#x2F;&#x2F;lambda表达式形式</span><br></pre></td></tr></table></figure>
<p>这已经是最简单了。。。<br>关于lambda语法，自己看下吧 特备简单，就是一些缩写而已，<br>AS需要配置 ：<a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="noopener">https://github.com/evant/gradle-retrolambda</a>  </p>
<p>最后附一个  过滤非偶数，并乘以2，转换成String类型，输出的例子(lambda语法形式)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Integer[] values &#x3D; &#123;1, 3, 4, 7, 8&#125;;</span><br><span class="line">Observable.from(values)</span><br><span class="line">        .filter(integer -&gt; integer % 2 &#x3D;&#x3D; 0)&#x2F;&#x2F;过滤非偶数</span><br><span class="line">        .scan((integer, integer2) -&gt; integer2 * 2)&#x2F;&#x2F;函数*2</span><br><span class="line">        .map(value -&gt; value + &quot;&quot;)&#x2F;&#x2F;转换string格式</span><br><span class="line">        .subscribeOn(Schedulers.io())&#x2F;&#x2F;调度器分配线程</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())&#x2F;&#x2F;回到主线程</span><br><span class="line">        .subscribe(s -&gt; Log.i(TAG, &quot;test:--- &quot; + s));&#x2F;&#x2F;打印日志</span><br></pre></td></tr></table></figure>

<p>…………………………..END………………………….</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-SqLite</title>
    <url>/blog/2016/07/01/Android/Android-SqLite/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />



<h2 id="Sqlite"><a href="#Sqlite" class="headerlink" title="Sqlite"></a>Sqlite</h2><pre><code>//1.使用这种query方法%号前不能加&apos; ;        
Cursor c_test = mDatabase.query(tab_name, new String[]{tab_field02}, tab_field02+&quot;  LIKE ? &quot;,new String[] { &quot;%&quot; + str[0] + &quot;%&quot; }, null, null, null);


//2.使用这种query方法%号前必须加&apos; 
&quot;select * from &quot; + TABLE_NAME + &quot; where status= &quot; + status+ &quot; and accdientAddress like &apos;%&quot; + accdientAddress + &quot;%&apos; and insureName like &apos;%&quot; + insureName + &quot;%&apos; and outDate like &apos;%&quot; + outDate+&quot;%&apos;&quot;

//and or 组合(多个or需要括号)
&quot;select * form table where id=3 and (age&gt;20 or adress=&quot;北京&quot;)&quot;</code></pre><h2 id="OrmLite"><a href="#OrmLite" class="headerlink" title="OrmLite"></a>OrmLite</h2><pre><code>all = dao.queryBuilder().orderBy(&quot;Id&quot;, true).where().eq(&quot;Type&quot;, key).and().eq(&quot;owner&quot;, Pub.user.getAccount()).and().eq(&quot;UserType&quot;, Pub.user.getUserType()).query();  

例如：
sql=&quot;select top 18 id,schoolnam,img from schoolinfo order by num desc,id desc&quot;
表示 首先按照num 降序排列，当num相同时，按id降序排列</code></pre><h2 id="GreenDao"><a href="#GreenDao" class="headerlink" title="GreenDao"></a>GreenDao</h2><pre><code>List&lt;FilePhoto&gt; list = filePhotoDao.queryBuilder().where(FilePhotoDao.Properties.ImageName.eq(file.getName().substring(0, 8))).build().list();


//Greendao的模糊查询需要对传人的值前后加&quot;%&quot;，如：&quot;%&quot;+value+&quot;%&quot;；
List&lt;FilePhoto&gt; lists = filePhotoDao.queryBuilder().where(FilePhotoDao.Properties.ImageName.like(&quot;%&quot; + file.getName().substring(0, 8) + &quot;%&quot;)).build().list();</code></pre>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Studio-Cordova-自定义插件之Toast(一)</title>
    <url>/blog/2020/07/01/Android/Android-Studio-Cordova-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E4%B9%8BToast(%E4%B8%80)/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>#####说明： 这种方式是Cordova原生调用方式，优点是代码和逻辑简单，容易理解。标准版插件格式<a href="http://www.jianshu.com/p/2f00e1864fbd" target="_blank" rel="noopener">http://www.jianshu.com/p/2f00e1864fbd</a></p>
<p><strong>一  配置Android Studio Cordova项目，不会的参考这个 <a href="http://www.jianshu.com/p/968747f4dcf9" target="_blank" rel="noopener">http://www.jianshu.com/p/968747f4dcf9</a></strong></p>
<p><strong>二  自定义插件</strong></p>
<p><strong>1  新建Toast Plugin 插件</strong><br>    如图目录 新建文件 Toast</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2803682-54e36bc54bf2ea8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>代码如下<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.apache.cordova.CallbackContext;</span><br><span class="line">import org.apache.cordova.CordovaPlugin;</span><br><span class="line">import org.json.JSONArray;</span><br><span class="line">import org.json.JSONException;</span><br><span class="line"></span><br><span class="line">public class Toast extends CordovaPlugin &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException &#123;</span><br><span class="line">        if (&quot;Java_Toast&quot;.equals(action)) &#123;</span><br><span class="line">            showToast(args.getString(0), args.getInt(1));</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void showToast(String text, int type) &#123;</span><br><span class="line">        android.widget.Toast.makeText(cordova.getActivity(), text, type).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>2  配置config 文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;feature name&#x3D;&quot;Config_Toast&quot;&gt;</span><br><span class="line">       &lt;param name&#x3D;&quot;android-package&quot; value&#x3D;&quot;org.apache.cordova.toast.Toast&quot; &#x2F;&gt;</span><br><span class="line"> &lt;&#x2F;feature&gt;</span><br></pre></td></tr></table></figure>

<p><strong>3  编写h5页面调用js代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function showToast()&#123;</span><br><span class="line">       Cordova.exec(pluginSuccess, pluginFailed, &quot;Config_Toast&quot;, &quot;Java_Toast&quot;, [&quot;测试Toast成功&quot;,0]);</span><br><span class="line"> &#125;</span><br><span class="line">&#x2F;&#x2F;成功回调</span><br><span class="line">var pluginSuccess &#x3D; function(message) &#123;</span><br><span class="line">     alert(&quot;success&gt;&gt;&quot; + message);</span><br><span class="line"> &#125;</span><br><span class="line">&#x2F;&#x2F;失败回调</span><br><span class="line"> var pluginFailed &#x3D; function(message) &#123;</span><br><span class="line">     alert(&quot;failed&gt;&gt;&quot; + message);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>#####说明1：上面代码中的  <strong>Config_Toast</strong>  <strong>Java_Toast</strong> 都是有对应的，改名记得对应地方也要改</p>
]]></content>
      <categories>
        <category>Hybrid</category>
      </categories>
      <tags>
        <tag>hybrid</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Rxjava-Retrofit-入门教程</title>
    <url>/blog/2016/07/01/Android/Android-Rxjava-Retrofit-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>首先会Rxjava和Retrofit基本使用<br>Rxjava入门使用：<a href="http://www.jianshu.com/p/43a6ff622c54" target="_blank" rel="noopener">http://www.jianshu.com/p/43a6ff622c54</a><br>Retrofit入门使用：<a href="http://www.jianshu.com/p/12a1ca7e428f" target="_blank" rel="noopener">http://www.jianshu.com/p/12a1ca7e428f</a></p>
<p>一。 添加依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &#39;com.squareup.retrofit2:retrofit:2.3.0&#39;</span><br><span class="line">compile &#39;com.squareup.retrofit2:converter-gson:2.3.0&#39; &#x2F;&#x2F;请求结果直接转化为实体类，省略gson转化</span><br><span class="line">compile &#39;com.squareup.retrofit2:adapter-rxjava:2.3.0&#39; &#x2F;&#x2F;支持Rajava</span><br><span class="line">compile &#39;io.reactivex:rxjava:1.3.0&#39;</span><br><span class="line">compile &#39;io.reactivex:rxandroid:1.2.1&#39;</span><br></pre></td></tr></table></figure>

<p>二。  定义Retrofit接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;完整地址: http:&#x2F;&#x2F;www.wuhaojun.com&#x2F;api&#x2F;android&#x2F;customer?type&#x3D;1</span><br><span class="line">public interface CustomerService &#123;</span><br><span class="line">    @GET(&quot;&#x2F;api&#x2F;android&#x2F;customer&quot;)</span><br><span class="line">    Observable&lt;Customer&gt; getCustomer(@Query(&quot;type&quot;) int type);&#x2F;&#x2F;定义参数type的当前是第几页 1,2,3 ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对比Retrofit定义的接口可以看到 就是把Call换成了Observable….</p>
<p>三 。  调用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String baseUrl &#x3D; &quot;http:&#x2F;&#x2F;www.wuhaojun.com&#x2F;&quot;;</span><br><span class="line">Retrofit retrofit &#x3D; new Retrofit.Builder()</span><br><span class="line">        .baseUrl(baseUrl)</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())&#x2F;&#x2F;返回值直接转化实体类</span><br><span class="line">        .addCallAdapterFactory(RxJavaCallAdapterFactory.create())&#x2F;&#x2F;添加RxJava支持</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">CustomerRjService service &#x3D; retrofit.create(CustomerRjService.class);&#x2F;&#x2F;创建对象</span><br><span class="line">service.getCustomer(1)&#x2F;&#x2F;传递参数</span><br><span class="line">        .subscribeOn(Schedulers.io())&#x2F;&#x2F;分配订阅者在子线程</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())&#x2F;&#x2F;Toast时回到主线程</span><br><span class="line">        .subscribe(new Action1&lt;Customer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void call(Customer customer) &#123;</span><br><span class="line">                Toast.makeText(MainActivity.this, &quot;完成  &quot; + customer.getCode() + &quot;---&quot; + customer.getMessage(), Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>四 附录：常用地址定义 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;----------------------------------- 分割线 以下是Retrofit -------------------------------------&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * retrofit get</span><br><span class="line"> *&#x2F;</span><br><span class="line">@GET</span><br><span class="line">Call&lt;ResponseBody&gt; reGet(@Url String url);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * post json</span><br><span class="line"> *&#x2F;</span><br><span class="line">@POST</span><br><span class="line">Call&lt;String&gt; reJson(@Url String url, @Body RequestBody body);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * post params 必须FormUrlEncoded</span><br><span class="line"> *&#x2F;</span><br><span class="line">@POST</span><br><span class="line">@FormUrlEncoded</span><br><span class="line">Call&lt;String&gt; reParams(@Url String url, @FieldMap Map&lt;String, String&gt; map);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * post file map</span><br><span class="line"> *&#x2F;</span><br><span class="line">@POST</span><br><span class="line">@Multipart</span><br><span class="line">Call&lt;String&gt; reUploadFile(@Url String url, @PartMap Map&lt;String, RequestBody&gt; map);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;----------------------------------- 分割线 以下是RxJava -------------------------------------&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * rxjava get</span><br><span class="line"> *&#x2F;</span><br><span class="line">@GET</span><br><span class="line">Observable&lt;ResponseBody&gt; rxGet(@Url String url);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * post json</span><br><span class="line"> *&#x2F;</span><br><span class="line">@POST</span><br><span class="line">Observable&lt;String&gt; rxJson(@Url String url, @Body RequestBody body);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * post params</span><br><span class="line"> *&#x2F;</span><br><span class="line">@POST</span><br><span class="line">@FormUrlEncoded</span><br><span class="line">Observable&lt;String&gt; rxParams(@Url String url, @FieldMap Map&lt;String, String&gt; map);</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * post file map</span><br><span class="line"> *&#x2F;</span><br><span class="line">@POST</span><br><span class="line">@Multipart</span><br><span class="line">Observable&lt;String&gt; rxUploadFile(@Url String url, @PartMap Map&lt;String, RequestBody&gt; map);</span><br></pre></td></tr></table></figure>
<p>调用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;post json</span><br><span class="line">String json &#x3D; &quot;&quot;;</span><br><span class="line">RequestBody body &#x3D; RequestBody.create(okhttp3.MediaType.parse(&quot;application&#x2F;json;charset&#x3D;utf-8&quot;), json);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;post params</span><br><span class="line">HashMap&lt;String, String&gt; map &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">map.put(&quot;user&quot;, &quot;test&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;json file map</span><br><span class="line">File file &#x3D; new File(&quot;&quot;);</span><br><span class="line">Map&lt;String, RequestBody&gt; hashMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">hashMap.put(&quot;json&quot;, RequestBody.create(MediaType.parse(&quot;text&#x2F;plain&quot;), &quot;jsonargs&quot;));&#x2F;&#x2F;键值对</span><br><span class="line">hashMap.put(&quot;file\&quot;; filename&#x3D;\&quot;&quot; + file.getName(), RequestBody.create(MediaType.parse(&quot;multipart&#x2F;form-data&quot;), file));&#x2F;&#x2F;文件</span><br></pre></td></tr></table></figure>

<p>这就是最基本的Rxjava+Retrofit使用了，怎么样？是不是特别简单。。。<br>当然，这仅仅是最最简单的入门而已，深度的学习还是靠自己哈<br>大神tough1985文章：<a href="http://gank.io/post/56e80c2c677659311bed9841" target="_blank" rel="noopener">http://gank.io/post/56e80c2c677659311bed9841</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Studio-Cordova-详细教程（相机-纯小白篇）</title>
    <url>/blog/2020/07/01/Android/Android-Studio-Cordova-%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%88%E7%9B%B8%E6%9C%BA-%E7%BA%AF%E5%B0%8F%E7%99%BD%E7%AF%87%EF%BC%89/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一。  首先安装Cordova</p>
<ol>
<li>打开Cordova官网 <a href="http://cordova.axuer.com" target="_blank" rel="noopener">http://cordova.axuer.com</a> 点击入门</li>
<li>先安装Node，点击步骤1中的Node.js,下载安装 </li>
<li>打开cmd 依次输入上图命令 创建第一个cordova demo（第一个命令安装cordova是从服务器下载 跟网速有关，耐心等待）</li>
<li>创建Cordova项目</li>
</ol>
<p>二。  添加Camera插件<br>上面步骤后cmd不要闭关 继续输入 添加相机插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cordova plugin add cordova-plugin-camera</span><br></pre></td></tr></table></figure>


<p>三。  生成Android Studio 可用的Cordova jar包</p>
<ol>
<li>Android Cordova 官方github：<a href="https://github.com/apache/cordova-android" target="_blank" rel="noopener">https://github.com/apache/cordova-android</a> 直接整个项目Download下来就行了</li>
<li>下载ant 官网：<a href="http://ant.apache.org/" target="_blank" rel="noopener">http://ant.apache.org/</a>  下载解压  配置path环境<br>进入解压Cordova目录的/framework，然后执行指令ant jar(目录下需要新建local.properties文件 指定sdk路径 可以从其他的Android Studio项目中直接复制一个过来),生成cordova-X.X.X-dev.jar</li>
</ol>
<p>四。  新建Android Studio Cordova 项目</p>
<ol>
<li>新建正常Android studio 项目 复制cordova-X.X.X-dev.jar 到libs下    Add As Library…</li>
<li>MainActiviaty页面<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CordovaViewTestActivity extends CordovaActivity &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">       super.onCreate(savedInstanceState);</span><br><span class="line">       loadUrl(launchUrl);&#x2F;&#x2F;加载h5页面</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>新建assets目录，并把Cordova项目中assets目录下的www文件复制过去</li>
<li>把Cordova项目下src下的org复制到src/mian/java 下面</li>
<li>把Cordova项目下res下xml复制到 res下</li>
<li>打开AndroidManifest  相机权限<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
并在application 标签下 加入调用相机的代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&#x2F;application&gt;</span><br><span class="line">...</span><br><span class="line">   &lt;!--js调用原生相机--&gt;</span><br><span class="line">  &lt;provider</span><br><span class="line">          android:name&#x3D;&quot;android.support.v4.content.FileProvider&quot;</span><br><span class="line">          android:authorities&#x3D;&quot;$&#123;applicationId&#125;.provider&quot;</span><br><span class="line">          android:exported&#x3D;&quot;false&quot;</span><br><span class="line">          android:grantUriPermissions&#x3D;&quot;true&quot;&gt;</span><br><span class="line">          &lt;meta-data</span><br><span class="line">              android:name&#x3D;&quot;android.support.FILE_PROVIDER_PATHS&quot;</span><br><span class="line">              android:resource&#x3D;&quot;@xml&#x2F;provider_paths&quot; &#x2F;&gt;</span><br><span class="line">      &lt;&#x2F;provider&gt;</span><br><span class="line">  &lt;&#x2F;application&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>五。  配置js文件<br>1 index.html文件中添加一个按钮 设置一个点击方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button onclick&#x3D;&quot;takephoto()&quot;&gt;takephoto&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure>
<p>js中写对应方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;只有在deviceready事件触发以后才可以监听拍照事件</span><br><span class="line">document.addEventListener(&quot;deviceready&quot;, onDeviceReady, false);</span><br><span class="line">function onDeviceReady() &#123;</span><br><span class="line">    console.log(navigator.camera);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;拍照方法(对应button方法名字)</span><br><span class="line">function takephoto()&#123;</span><br><span class="line">     navigator.camera.getPicture(onSuccess, onFail, &#123; quality: 50,</span><br><span class="line">                destinationType: Camera.DestinationType.DATA_URL</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;成功回调</span><br><span class="line">function onSuccess(imageData) &#123;</span><br><span class="line">    var image &#x3D; document.getElementById(&#39;myImage&#39;);</span><br><span class="line">    image.src &#x3D; &quot;data:image&#x2F;jpeg;base64,&quot; + imageData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;失败回调</span><br><span class="line">function onFail(message) &#123;</span><br><span class="line">    alert(&#39;Failed because: &#39; + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>运行试试效果吧<br>附个人demo： <a href="https://git.coding.net/Lrxc/LrxcCordova.git" target="_blank" rel="noopener">https://git.coding.net/Lrxc/LrxcCordova.git</a></p>
]]></content>
      <categories>
        <category>Hybrid</category>
      </categories>
      <tags>
        <tag>hybrid</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Studio-Cordova-自定义插件之Toast(二)</title>
    <url>/blog/2020/07/01/Android/Android-Studio-Cordova-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E4%BB%B6%E4%B9%8BToast(%E4%BA%8C)/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>#####说明：推荐Cordova原生调用方式，优点是代码和逻辑简单，容易理解<a href="http://www.jianshu.com/p/526d6872e271" target="_blank" rel="noopener">http://www.jianshu.com/p/526d6872e271</a> 本文是<em>标准插件版</em></p>
<p>######一  配置Android Studio Cordova项目，不会的参考这个 <a href="http://www.jianshu.com/p/968747f4dcf9" target="_blank" rel="noopener">http://www.jianshu.com/p/968747f4dcf9</a></p>
<p>######二  自定义插件<br><strong>1.新建Toast Plugin 插件.如图目录 新建类文件 Toast</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2803682-54e36bc54bf2ea8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>代码如下<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.apache.cordova.CallbackContext;</span><br><span class="line">import org.apache.cordova.CordovaPlugin;</span><br><span class="line">import org.json.JSONArray;</span><br><span class="line">import org.json.JSONException;</span><br><span class="line"></span><br><span class="line">public class Toast extends CordovaPlugin &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException &#123;</span><br><span class="line">        if (&quot;showToast&quot;.equals(action)) &#123;</span><br><span class="line">            showToast(args.getString(0), args.getInt(1));</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void showToast(String text, int type) &#123;</span><br><span class="line">        android.widget.Toast.makeText(cordova.getActivity(), text, type).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>2.配置config 文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;feature name&#x3D;&quot;CustomToast&quot;&gt;</span><br><span class="line">       &lt;param name&#x3D;&quot;android-package&quot; value&#x3D;&quot;org.apache.cordova.toast.Toast&quot; &#x2F;&gt;</span><br><span class="line"> &lt;&#x2F;feature&gt;</span><br></pre></td></tr></table></figure>

<p><strong>3.编写h5页面调用js代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function showToast()&#123;</span><br><span class="line">      navigator.toast.callToast(&quot;测试Toast成功&quot;,0);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><strong>4.编写插件js文件,如图目录新建toast.js</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2803682-83e051a8552baaa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; define中填写 cordova_plugins 中 填写的相应的 id</span><br><span class="line">cordova.define(&quot;cordova-plugin-toast.toast&quot;, function(require, exports, module) &#123;</span><br><span class="line">var exec &#x3D; require(&#39;cordova&#x2F;exec&#39;);</span><br><span class="line">module.exports &#x3D;&#123;</span><br><span class="line">callToast:function (content,type) &#123;</span><br><span class="line">     exec(null, null, &quot;CustomToast&quot;, &quot;showToast&quot;, [content,type]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>5.配置清单 cordova_plugins.js</strong></p>
<p>module.exports添加(<strong>若不是最后一个,不要忘了语文逗号</strong>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     &quot;id&quot;: &quot;cordova-plugin-toast.toast&quot;,&#x2F;&#x2F;cordova.define的id</span><br><span class="line">     &quot;file&quot;: &quot;plugins&#x2F;cordova-plugin-toast&#x2F;www&#x2F;toast.js&quot;,&#x2F;&#x2F;js文件</span><br><span class="line">     &quot;pluginId&quot;: &quot;cordova-plugin-toast&quot;,</span><br><span class="line">     &quot;clobbers&quot;: [</span><br><span class="line">         &quot;navigator.toast&quot;&#x2F;&#x2F;js调用时方法名</span><br><span class="line">     ]</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<p>module.exports.metadata中添加(<strong>若不是最后一个,不要忘了语文逗号</strong>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;cordova-plugin-toast&quot;:&quot;1.0.0&quot;,</span><br></pre></td></tr></table></figure>

<p>#####说明1：上面代码中的  <strong>CustomToast</strong> <strong>showToast</strong>  <strong>callToast</strong> 都是有对应的，改名记得对应地方也要改</p>
<p>#####说明2：创建顺序不必纠结，这个是为了对比原生(<a href="http://www.jianshu.com/p/526d6872e271)的方式" target="_blank" rel="noopener">http://www.jianshu.com/p/526d6872e271)的方式</a></p>
]]></content>
      <categories>
        <category>Hybrid</category>
      </categories>
      <tags>
        <tag>hybrid</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Studio-Ndk-So-文件</title>
    <url>/blog/2016/07/01/Android/Android-Studio-Ndk-So-%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一 下载NKD,并解压<br>官网：<a href="https://developer.android.com/index.html" target="_blank" rel="noopener">https://developer.android.com/index.html</a><br>二 新建项目<br>1 新建Android Studio项目<br>2 项目配置NDK路径<br><img src="https://upload-images.jianshu.io/upload_images/2803682-e9111656bbe2cb3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>3 gradle.properties 增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;使用NDK</span><br><span class="line">android.useDeprecatedNdk&#x3D;true</span><br></pre></td></tr></table></figure>
<p>3 项目的build.gradle defaultConfig增加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ndk &#123;</span><br><span class="line">           moduleName &quot;native-jni&quot;        &#x2F;&#x2F; 生成的so动态库名称</span><br><span class="line">           abiFilters &quot;armeabi&quot;, &quot;armeabi-v7a&quot;, &quot;x86&quot; &#x2F;&#x2F; 输出指定三种abi体系结构下的so库</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>三 写相关代码<br>1 新建jni目录<br>2 新建jni调用类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class JNIUtils &#123;</span><br><span class="line">    &#x2F;&#x2F; 加载native-jni</span><br><span class="line">    static &#123;</span><br><span class="line">        System.loadLibrary(&quot;native-jni&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;java调C中的方法都需要用native声明且方法名必须和c的方法名一样</span><br><span class="line">    public native String stringFromJNI();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3 打开底部Terminal  进入到 ../src/main/java路径下 生成  .h文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javah -d jni com.example.bxlt.myapplication.JNIUtils</span><br></pre></td></tr></table></figure>
<p>成功后生成对应文件<br><img src="https://upload-images.jianshu.io/upload_images/2803682-3137b5be0666cd10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ol start="4">
<li>jni路径下新建c文件，保持名字一致<br><img src="https://upload-images.jianshu.io/upload_images/2803682-6748aaa00181841f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>内容如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &quot;com_example_bxlt_myapplication_JNIUtils.h&quot;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_example_bxlt_myapplication_JNIUtils_stringFromJNI</span><br><span class="line">  (JNIEnv *env, jobject obj)&#123;</span><br><span class="line">    return (*env)-&gt;NewStringUTF(env,&quot;这里是C++代码&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
C的内容说明：这三个地方名字一致<br><img src="https://upload-images.jianshu.io/upload_images/2803682-90f3902034e47583.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>5 Android 调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TextView tv &#x3D; findViewById(R.id.tv);</span><br><span class="line">tv.setText(new JNIUtils().stringFromJNI());</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-f2c76e7215324dbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>6 SO文件<br><img src="https://upload-images.jianshu.io/upload_images/2803682-620f7e25425fa36c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Studio-导入依赖包(jar-so-aar)</title>
    <url>/blog/2016/07/01/Android/Android-Studio-%E5%AF%BC%E5%85%A5%E4%BE%9D%E8%B5%96%E5%8C%85(jar-so-aar)/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一.  Jar<br>直接放到lib目录，选中右键 add as library  即可</p>
<p>二.  so<br>在src/main中添加 jniLibs(与java目录同级)文件夹 ，把.so复制进去<br>build.gradle</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        jniLibs.srcDirs &#x3D; [&#39;libs&#39;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三.  aar<br>复制外部aar包FmMobile.so到libs目录下<br>build.gradle 配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repositories&#123;&#x2F;&#x2F;添加aar依赖包</span><br><span class="line">    flatDir&#123;</span><br><span class="line">        dirs &#39;libs&#39;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#x2F;&#x2F;添加依赖 </span><br><span class="line">compile(name:&#39;FmMobile&#39;,ext:&#39;aar&#39;)&#x2F;&#x2F;FmMobile对应aar名字</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Studio打-aar-jar包</title>
    <url>/blog/2016/07/01/Android/Android-Studio%E6%89%93-aar-jar%E5%8C%85/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>aar 打包：<br>1  新建Module 选择Android Libray<br><img src="https://upload-images.jianshu.io/upload_images/2803682-67bc81c4aef20afc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2 gradle直接生成<br><img src="https://upload-images.jianshu.io/upload_images/2803682-88b02cf95fb67c4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>3 生成目录<br><img src="https://upload-images.jianshu.io/upload_images/2803682-14a38b7ee663005b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>jar 打包：<br>1  新建Module 选择Android Libray<br>在library工程的build.gradle文件中添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">task makeJar(type: Copy) &#123;</span><br><span class="line">    delete &#39;build&#x2F;outputs&#x2F;libs&#x2F;mysdk.jar&#39;&#x2F;&#x2F;删除存在的</span><br><span class="line">    from(&#39;build&#x2F;intermediates&#x2F;bundles&#x2F;release&#x2F;&#39;)&#x2F;&#x2F;这行表示要打包的文件的路径</span><br><span class="line">    into(&#39;build&#x2F;outputs&#x2F;libs&#x2F;&#39;)&#x2F;&#x2F;生成jar包后的文件目录</span><br><span class="line">    include(&#39;classes.jar&#39;)&#x2F;&#x2F;设置过滤</span><br><span class="line">    rename (&#39;classes.jar&#39;, &#39;mysdk.jar&#39;)&#x2F;&#x2F;重命名</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2 终端运行<br>gradlew makeJar</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-ToolBar</title>
    <url>/blog/2016/07/01/Android/Android-ToolBar/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />






<pre><code>private void initToolbar() {
    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
    toolbar.setTitle(&quot;匹配结果&quot;);
    setSupportActionBar(toolbar);
    getSupportActionBar().setDisplayHomeAsUpEnabled(true);//显示返回按钮
}

@Override
public boolean onCreateOptionsMenu(Menu menu) {
    //1、组别，如果不分组的话就写Menu.NONE,
    //2、Id，这个很重要，Android根据这个Id来确定不同的菜单
    //3、顺序，哪个菜单项在前面由这个参数的大小决定
    //4、文本，菜单项的显示文本
    menu.add(Menu.NONE, 1, 0, &quot;重新匹配&quot;).setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
    //menu 布局
    getMenuInflater().inflate(R.menu.recycled, menu);
    return super.onCreateOptionsMenu(menu);
}

@Override
public boolean onOptionsItemSelected(MenuItem item) {
    switch (item.getItemId()) {
        case android.R.id.home:
            finish();
            break;
        case 1:
            initHttp();
            break;
    }
    return super.onOptionsItemSelected(item);
}</code></pre>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-TextView 跑马灯</title>
    <url>/blog/2016/07/01/Android/Android-TextView%20%E8%B7%91%E9%A9%AC%E7%81%AF/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<pre><code>&lt;TextView
    android:id=&quot;@+id/tv&quot;
    android:layout_width=&quot;wrap_content&quot;
    android:layout_height=&quot;wrap_content&quot;
    android:ellipsize=&quot;marquee&quot;
    android:focusable=&quot;true&quot;
    android:focusableInTouchMode=&quot;true&quot;
    android:singleLine=&quot;true&quot; /&gt;</code></pre>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-canvas-drawText-不规则自动换行</title>
    <url>/blog/2016/07/01/Android/Android-canvas-drawText-%E4%B8%8D%E8%A7%84%E5%88%99%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>最近有个需求，水印图片，右上角有个logo，然后上面有些文字。涉及到不规则自动换行<br><img src="https://upload-images.jianshu.io/upload_images/2803682-bc74cf6392dc84bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>开始考虑StaticLayout 直接处理，发现每行都是一样宽度。。然后想到了一些其他的方法，挺简单的还不错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * Created by Lrxc on 2018&#x2F;6&#x2F;13.17:17</span><br><span class="line"> * Email: Lrxc1117@163.com</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class MyView extends View &#123;</span><br><span class="line">    private final int screenWidth;&#x2F;&#x2F;屏幕宽度</span><br><span class="line">    private final TextPaint textPaint;&#x2F;&#x2F;画笔</span><br><span class="line">    private final int textSize &#x3D; 50;&#x2F;&#x2F;画笔大小</span><br><span class="line">    private final Bitmap logo;&#x2F;&#x2F;logo图片</span><br><span class="line">    private final int logoPadingTop &#x3D; 200;&#x2F;&#x2F;logo上边距</span><br><span class="line"></span><br><span class="line">    private final String str &#x3D; &quot;我仰望星空，浩瀚的银河系，哪一颗才是属于我的那个你？无论你在哪里，我都等着你，盼着你，直到遇见你。如果你看见了我，请你一定联系我，请不要让我等的太久，我会遗憾陪伴你的日子太过短暂。&quot; +</span><br><span class="line">            &quot;我仰望星空，浩瀚的银河系，哪一颗才是属于我的那个你？无论你在哪里，我都等着你，盼着你，直到遇见你。如果你看见了我，请你一定联系我，请不要让我等的太久，我会遗憾陪伴你的日子太过短暂&quot;;</span><br><span class="line"></span><br><span class="line">    public MyView(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line"></span><br><span class="line">        textPaint &#x3D; new TextPaint();</span><br><span class="line">        textPaint.setTextSize(textSize);</span><br><span class="line">        textPaint.setColor(Color.RED);</span><br><span class="line"></span><br><span class="line">        DisplayMetrics dm &#x3D; getResources().getDisplayMetrics();</span><br><span class="line">        screenWidth &#x3D; dm.widthPixels;</span><br><span class="line"></span><br><span class="line">        logo &#x3D; BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">        super.onDraw(canvas);</span><br><span class="line">        &#x2F;&#x2F;绘制logo</span><br><span class="line">        canvas.drawBitmap(logo, screenWidth - logo.getWidth() - 5, logoPadingTop, null);</span><br><span class="line">        &#x2F;&#x2F;绘制不规则文字</span><br><span class="line">        lineFeed(canvas, str, textSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * @param canvas 画布</span><br><span class="line">     * @param str    绘制内容</span><br><span class="line">     * @param heigth 每一行的高度</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private void lineFeed(Canvas canvas, String str, int heigth) &#123;</span><br><span class="line">        int lineWidth &#x3D; screenWidth;</span><br><span class="line">        &#x2F;&#x2F;右边有logo 空出位置</span><br><span class="line">        if (heigth &gt;&#x3D; logoPadingTop &amp;&amp; heigth &lt;&#x3D; logoPadingTop + logo.getHeight() + textSize) &#123;</span><br><span class="line">            lineWidth &#x3D; screenWidth - logo.getWidth();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;计算当前宽度(width)能显示多少个汉字</span><br><span class="line">        int subIndex &#x3D; textPaint.breakText(str, 0, str.length(), true, lineWidth, null);</span><br><span class="line">        &#x2F;&#x2F;截取可以显示的汉字</span><br><span class="line">        String mytext &#x3D; str.substring(0, subIndex);</span><br><span class="line">        canvas.drawText(mytext, 0, heigth, textPaint);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;计算剩下的汉字</span><br><span class="line">        String ss &#x3D; str.substring(subIndex, str.length());</span><br><span class="line">        if (ss.length() &gt; 0) &#123;</span><br><span class="line">            lineFeed(canvas, ss, heigth + textSize + 10);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-studio-Connection-failed-(dl-google-com)</title>
    <url>/blog/2016/07/01/Android/Android-studio-Connection-failed-(dl-google-com)/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>公司的网，莫名其妙的不能更新了，却可以下载compile文件。。。<br>于是乎翻墙，hosts，修改studio.exe.vmoptions文件 然并卵，都特么不行 搞了一天还是不行</p>
<p>这种问题或许可以找到办法 但是如果下次是 Connection failed (xxxx.xxxx.com)该怎么办呢，授人以鱼不如授人以渔，同样，学人以鱼不如学人以渔，我们要的是下次遇到类似问题的解决能力，而不是一次的解决方案</p>
<p>入正题：<br>1.别管那个网站打开失败，记下来</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2803682-03af6c1b37165f7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>2.百度 站长工具</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2803682-b279361e2079fcd5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>打开这个 把失败的网站输进去</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2803682-765fc13cb6abe7db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>相应时间越短越好，记下对应ip<br>3.打开C:\Windows\System32\drivers\etc，打开hosts文件，加入一行<br>    203.208.40.142 dl.google.com  (可以试试直接复制这句到hosts)<br>   前面ip是刚才记下的，后面地址就是打不开的那个 中间空格 </p>
<p>保存后再次更新，完美解决<br>参考大神文章：<a href="http://blog.csdn.net/cswoniu111/article/details/52187840" target="_blank" rel="noopener">http://blog.csdn.net/cswoniu111/article/details/52187840</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-事件分发简单理解</title>
    <url>/blog/2016/07/01/Android/Android-%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>简单理解：Activity、ViewGroup(LinearLayout,RelativeLayout…)，View（Button,TextView…）</p>
<p>Activity :老板<br>ViewGroup:组长<br>View:程序员小王</p>
<p>Activity如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.touchView).setOnClickListener(this);</span><br><span class="line">        findViewById(R.id.btn).setOnClickListener(this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onClick(View v) &#123;</span><br><span class="line">        switch (v.getId()) &#123;</span><br><span class="line">            case R.id.touchView:</span><br><span class="line">                Log.i(&quot;ddms&quot;, &quot;onClick: 点击了空白&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case R.id.btn:</span><br><span class="line">                Log.i(&quot;ddms&quot;, &quot;onClick: 点击了按钮&quot;);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        Log.i(&quot;ddms&quot;, &quot;dispatchTouchEvent:老板: 我要增加功能&quot;);</span><br><span class="line">        return super.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        Log.i(&quot;ddms&quot;, &quot;onTouchEvent:老板: 太复杂,简化下&quot;);</span><br><span class="line">        return super.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XML 如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;android.support.constraint.ConstraintLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;com.example.bxlt.myapplication.TouchViewGroup</span><br><span class="line">        android:id&#x3D;&quot;@+id&#x2F;touchView&quot;</span><br><span class="line">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;match_parent&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;com.example.bxlt.myapplication.TouchButton</span><br><span class="line">            android:id&#x3D;&quot;@+id&#x2F;btn&quot;</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;btn&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;com.example.bxlt.myapplication.TouchViewGroup&gt;</span><br><span class="line">&lt;&#x2F;android.support.constraint.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure>

<p>ViewGroup如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TouchViewGroup extends RelativeLayout &#123;</span><br><span class="line"></span><br><span class="line">    public TouchViewGroup(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        Log.i(&quot;ddms&quot;, &quot;dispatchTouchEvent:组长: 老大要加功能&quot;);</span><br><span class="line">        return super.dispatchTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">        Log.i(&quot;ddms&quot;, &quot;onInterceptTouchEvent: 组长: 先问问小王&quot;);</span><br><span class="line">        return super.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        boolean b &#x3D; super.onTouchEvent(event);</span><br><span class="line">        Log.i(&quot;ddms&quot;, &quot;onTouchEvent:组长: 小王说搞不了,自己搞？&quot; + b);</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>VIew如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TouchButton extends Button &#123;</span><br><span class="line"></span><br><span class="line">    public TouchButton(Context context, AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean dispatchTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        Log.i(&quot;ddms&quot;, &quot;dispatchTouchEvent:小王: 要加功能？&quot;);</span><br><span class="line">        return super.dispatchTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">        boolean b &#x3D; super.onTouchEvent(event);</span><br><span class="line">        Log.i(&quot;ddms&quot;, &quot;onTouchEvent:小王: 能搞？&quot; + b);</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击按钮(为什么两遍Log?因为down 和up 各一遍)<br><img src="https://upload-images.jianshu.io/upload_images/2803682-e1ca72b96ca6b7e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>改成小王不干，onTouchEvent返回false<br><img src="https://upload-images.jianshu.io/upload_images/2803682-50b5443e15316a53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2803682-f5b35541d08ac005.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>说明：View的onTouchEvent返回false，ViewGroup的onTouchEvent 开始执行。另外最后的log是点击了空白，说明btn的点击事件已失效</p>
<p>改成组长也不干，onTouchEvent返回false<br><img src="https://upload-images.jianshu.io/upload_images/2803682-053deb38ddf102ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2803682-790e0a962b6705a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>说明:老板下次下发任务，直接无效应。最后的log没有了，说明ViewGroup点击事件也失效了</p>
<p>大神文章：<a href="http://wuxiaolong.me/2015/12/19/MotionEvent/" target="_blank" rel="noopener">http://wuxiaolong.me/2015/12/19/MotionEvent/</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-照片属性写入经纬度</title>
    <url>/blog/2016/07/01/Android/Android-%E7%85%A7%E7%89%87%E5%B1%9E%E6%80%A7%E5%86%99%E5%85%A5%E7%BB%8F%E7%BA%AC%E5%BA%A6/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p><img src="http://upload-images.jianshu.io/upload_images/2803682-a754be67f99fa5b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>拍照后保存到本地文件，借助ExifInterface<br>保存格式必须是JPEG，否则不支持写入编辑</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fos);</span><br></pre></td></tr></table></figure>

<p>写入方法很简单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    &#x2F;&#x2F;保存照片的经纬度信息</span><br><span class="line">    ExifInterface exif &#x3D; new ExifInterface(file.getAbsolutePath());</span><br><span class="line">    exif.setAttribute(ExifInterface.TAG_GPS_LATITUDE, ConvertUtils.convertToDegree(116.2353515625));</span><br><span class="line">    exif.setAttribute(ExifInterface.TAG_GPS_LONGITUDE, ConvertUtils.convertToDegree(39.5379397452));</span><br><span class="line">    exif.saveAttributes();</span><br><span class="line">    &#x2F;&#x2F;打印结果</span><br><span class="line">    String latValue &#x3D; exif.getAttribute(ExifInterface.TAG_GPS_LATITUDE);</span><br><span class="line">    String lngValue &#x3D; exif.getAttribute(ExifInterface.TAG_GPS_LONGITUDE);</span><br><span class="line">    Log.i(TAG, &quot;onCameraData: &quot; + ConvertUtils.convertToCoordinate(latValue) + &quot;--&quot; + ConvertUtils.convertToCoordinate(lngValue));</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ConvertUtils 工具类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ConvertUtils &#123;</span><br><span class="line">    &#x2F;&#x2F;经纬度转度分秒</span><br><span class="line">    public static String convertToDegree(double gpsInfo) &#123;</span><br><span class="line">        String dms &#x3D; Location.convert(gpsInfo, Location.FORMAT_SECONDS);</span><br><span class="line">        return dms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;度分秒转经纬度</span><br><span class="line">    public static Double convertToCoordinate(String stringDMS) &#123;</span><br><span class="line">        if (stringDMS &#x3D;&#x3D; null) return null;</span><br><span class="line">        String[] split &#x3D; stringDMS.split(&quot;:&quot;, 3);</span><br><span class="line">        return Double.parseDouble(split[0]) + Double.parseDouble(split[1]) &#x2F; 60 + Double.parseDouble(split[2]) &#x2F; 3600;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搞定。 最后别忘了文件读写权限</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-性能优化(基础篇)</title>
    <url>/blog/2016/07/01/Android/Android-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E5%9F%BA%E7%A1%80%E7%AF%87)/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>1 if else switch case 效率</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if else：小场景</span><br><span class="line">switch case：分支语句较多</span><br></pre></td></tr></table></figure>
<p>2 setimageresource vs setimagedrawable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setImageResource：这会在UI线程上进行 Bitmap读取和解码，这会导致延迟</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-微信分享</title>
    <url>/blog/2016/07/01/Android/Android-%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一 .  获取开发者APP_ID<br>打开微信开发者平台 创建应用 获取APP_ID，一般两三天审核通过</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;open.weixin.qq.com</span><br></pre></td></tr></table></figure>

<p>二.   集成微信SDK</p>
<ol>
<li><p>添加依赖  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &#39;com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>AndroidManifest.xml 设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.INTERNET&quot;&#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.ACCESS_NETWORK_STATE&quot;&#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.ACCESS_WIFI_STATE&quot;&#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.READ_PHONE_STATE&quot;&#x2F;&gt;</span><br><span class="line">&lt;uses-permission android:name&#x3D;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>3.调用的页面 例如MainActivity中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    private IWXAPI api;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        api &#x3D; WXAPIFactory.createWXAPI(this, WXEntryActivity.APP_ID, true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;分享文本</span><br><span class="line">    public void WeChatShare1(View view) &#123;</span><br><span class="line">        String text &#x3D; &quot;测试数据&quot;;</span><br><span class="line">        WXTextObject textObj &#x3D; new WXTextObject();</span><br><span class="line">        textObj.text &#x3D; text;</span><br><span class="line"></span><br><span class="line">        initSend(textObj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;分享图片</span><br><span class="line">    public void WeChatShare2(View view) &#123;</span><br><span class="line">        Bitmap bitmap &#x3D; BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher);</span><br><span class="line">        WXImageObject object &#x3D; new WXImageObject(bitmap);</span><br><span class="line"></span><br><span class="line">        initSend(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;分享链接</span><br><span class="line">    public void WeChatShare(View view) &#123;</span><br><span class="line">        WXWebpageObject webpage &#x3D; new WXWebpageObject();</span><br><span class="line">        webpage.webpageUrl &#x3D; &quot;http:&#x2F;&#x2F;www.baidu.com&quot;;</span><br><span class="line"></span><br><span class="line">        initSend(webpage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void initSend(WXMediaMessage.IMediaObject webpage) &#123;</span><br><span class="line">        WXMediaMessage msg &#x3D; new WXMediaMessage();</span><br><span class="line">        msg.title &#x3D; &quot;测试标题&quot;;</span><br><span class="line">        msg.description &#x3D; &quot;测试说明...&quot;;</span><br><span class="line">        msg.mediaObject &#x3D; webpage;</span><br><span class="line"></span><br><span class="line">        SendMessageToWX.Req req &#x3D; new SendMessageToWX.Req();</span><br><span class="line">        req.transaction &#x3D; buildTransaction(&quot;webpage&quot;);</span><br><span class="line">        req.message &#x3D; msg;</span><br><span class="line">        req.scene &#x3D; SendMessageToWX.Req.WXSceneSession;    &#x2F;&#x2F;设置发送到朋友</span><br><span class="line">&#x2F;&#x2F;        req.scene &#x3D; SendMessageToWX.Req.WXSceneTimeline;    &#x2F;&#x2F;设置发送到朋友圈</span><br><span class="line"></span><br><span class="line">        api.sendReq(req);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String buildTransaction(final String type) &#123;</span><br><span class="line">        return (type &#x3D;&#x3D; null) ? String.valueOf(System.currentTimeMillis()) : type + System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三.  设置分享</p>
<ol>
<li>包名相应目录下新建包名 wxapi，在里面新建类 WXEntryActivity 继承自AppCompatActivity即可(名字必须是这两个)<br><img src="http://upload-images.jianshu.io/upload_images/2803682-bffd7a253af1c43a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> public class WXEntryActivity extends AppCompatActivity implements IWXAPIEventHandler &#123;</span><br><span class="line">    &#x2F;&#x2F;申请的appid</span><br><span class="line">    public static final String APP_ID &#x3D; &quot;申请的ID&quot;;</span><br><span class="line">    &#x2F;&#x2F;第三方app和微信通信的接口</span><br><span class="line">    private IWXAPI api;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        regToWx();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void regToWx() &#123;</span><br><span class="line">        &#x2F;&#x2F;获取IWXAPI的实例</span><br><span class="line">        api &#x3D; WXAPIFactory.createWXAPI(this, APP_ID, true);</span><br><span class="line">        &#x2F;&#x2F;将应用appid注册到微信</span><br><span class="line">        api.registerApp(APP_ID);</span><br><span class="line">        &#x2F;&#x2F;回调监听</span><br><span class="line">        api.handleIntent(getIntent(), this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onReq(BaseReq baseReq) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onResp(BaseResp resp) &#123;</span><br><span class="line">        String result;</span><br><span class="line">        switch (resp.errCode) &#123;</span><br><span class="line">            case BaseResp.ErrCode.ERR_OK:</span><br><span class="line">                result &#x3D; &quot;分享成功&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case BaseResp.ErrCode.ERR_USER_CANCEL:</span><br><span class="line">                result &#x3D; &quot;取消分享&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case BaseResp.ErrCode.ERR_AUTH_DENIED:</span><br><span class="line">                result &#x3D; &quot;分享被拒绝&quot;;</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                result &#x3D; &quot;发送失败&quot;;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        Toast.makeText(this, result, Toast.LENGTH_SHORT).show();</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>AndroidManifest.xml 添加，用于接受分享后的回掉，否则上一步中onReq()，onResp()无效<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--微信回调--&gt;</span><br><span class="line">&lt;application&gt;</span><br><span class="line">...</span><br><span class="line">   &lt;activity</span><br><span class="line">       android:name&#x3D;&quot;.wxapi.WXEntryActivity&quot;</span><br><span class="line">       android:exported&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;application&gt;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>最后说明：必须要用真机测试 虚拟机会有各种莫名其妙的问题！<br>最后说明：必须要用真机测试 虚拟机会有各种莫名其妙的问题！<br>最后说明：必须要用真机测试 虚拟机会有各种莫名其妙的问题！</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-组件化简单使用</title>
    <url>/blog/2016/07/01/Android/Android-%E7%BB%84%E4%BB%B6%E5%8C%96%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一 创建Module </p>
<ol>
<li>主Module app   地图Module map   相机Module camera，基础Module commonlib<br><img src="https://upload-images.jianshu.io/upload_images/2803682-44405c4adec4b9ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>二. 添加全局控制文件<br><img src="https://upload-images.jianshu.io/upload_images/2803682-4d6986f2f998a68e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    isAlone &#x3D; false;&#x2F;&#x2F;false:作为Lib组件存在，true:作为application存在</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>build.gradle 添加饮用<br><img src="https://upload-images.jianshu.io/upload_images/2803682-058cfb378c2e2859.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>三. 配置Module 的gradle文件</p>
<ol>
<li>是否是组建形式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;控制组件模式和集成模式</span><br><span class="line">if (rootProject.ext.isAlone) &#123;</span><br><span class="line">    apply plugin: &#39;com.android.application&#39;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    apply plugin: &#39;com.android.library&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (rootProject.ext.isAlone) &#123;</span><br><span class="line">           &#x2F;&#x2F;组件模式下设置applicationId</span><br><span class="line">           applicationId &quot;com.example.camera&quot;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
//是否设置独立module模块<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            if (rootProject.ext.isAlone) &#123;</span><br><span class="line">                manifest.srcFile &#39;src&#x2F;main&#x2F;module&#x2F;AndroidManifest.xml&#39;</span><br><span class="line">                java.srcDirs &#x3D; [&#39;src&#x2F;main&#x2F;java&#39;, &#39;src&#x2F;main&#x2F;module&#x2F;java&#39;]</span><br><span class="line">                res.srcDirs &#x3D; [&#39;src&#x2F;main&#x2F;res&#39;, &#39;src&#x2F;main&#x2F;module&#x2F;res&#39;]</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                manifest.srcFile &#39;src&#x2F;main&#x2F;AndroidManifest.xml&#39;</span><br><span class="line">            &#125;</span><br><span class="line">&#x2F;&#x2F;            jniLibs.srcDirs &#x3D; [&#39;libs&#39;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>最后应用commonlib</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation project(&#39;:commonlib&#39;)</span><br></pre></td></tr></table></figure>
<p>四. 集成关系</p>
<ol>
<li>camera，map 都需要继承 commonlib</li>
<li>app<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation project(&#39;:commonlib&#39;)</span><br><span class="line">if (!rootProject.ext.isAlone) &#123;</span><br><span class="line">    implementation project(&#39;:camera&#39;)</span><br><span class="line">    implementation project(&#39;:map&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>说明：<br>1.commonlib中 不要使用implementation ,要用compile，具体区别百度下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;&#x2F;这个失败</span><br><span class="line"> implementation &#39;com.android.support:design:26.1.0&#39;</span><br><span class="line">&#x2F;&#x2F;这个可以</span><br><span class="line"> compile &#39;com.android.support:design:26.1.0&#39;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>multiDexEnabled 一定要放在app module模块下，不能放在commonlib中</li>
<li>遇到莫名其妙问题可以尝试打开或关闭instant run </li>
</ol>
<p>详细的可以下载demo跑一下 很简单 <a href="https://git.coding.net/Lrxc/LrxcModularization.git" target="_blank" rel="noopener">https://git.coding.net/Lrxc/LrxcModularization.git</a><br>大神文章:<a href="https://mp.weixin.qq.com/s/4dc38cpZKCfxWxxRdUQfTQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/4dc38cpZKCfxWxxRdUQfTQ</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android_自定义Dialog底部弹出动画</title>
    <url>/blog/2016/07/01/Android/Android_%E8%87%AA%E5%AE%9A%E4%B9%89Dialog%E5%BA%95%E9%83%A8%E5%BC%B9%E5%87%BA%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>效果图如下<br><img src="http://upload-images.jianshu.io/upload_images/2803682-a275b5a23e0357a8.gif?imageMogr2/auto-orient/strip" alt="GIF.gif"></p>
<p>点击Button调用代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void show() &#123;</span><br><span class="line">       Dialog dialog &#x3D; new Dialog(this);</span><br><span class="line">       &#x2F;&#x2F;去掉标题线</span><br><span class="line">       dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);</span><br><span class="line">       dialog.setContentView(R.layout.dialog);</span><br><span class="line">       &#x2F;&#x2F;背景透明</span><br><span class="line">       dialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);</span><br><span class="line">       dialog.show();</span><br><span class="line"></span><br><span class="line">       Window window &#x3D; dialog.getWindow();</span><br><span class="line">       WindowManager.LayoutParams lp &#x3D; window.getAttributes();</span><br><span class="line">       lp.gravity &#x3D; Gravity.CENTER; &#x2F;&#x2F; 居中位置</span><br><span class="line">       lp.width &#x3D; WindowManager.LayoutParams.MATCH_PARENT;</span><br><span class="line">       lp.height &#x3D; WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">       window.setAttributes(lp);</span><br><span class="line">       window.setWindowAnimations(R.style.mystyle);  &#x2F;&#x2F;添加动画</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>Dialog的自定义布局</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;LinearLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class="line">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class="line">    android:gravity&#x3D;&quot;center&quot;</span><br><span class="line">    android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width&#x3D;&quot;300dp&quot;</span><br><span class="line">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">        android:background&#x3D;&quot;@drawable&#x2F;dialog&quot;</span><br><span class="line">        android:gravity&#x3D;&quot;center&quot;</span><br><span class="line">        android:orientation&#x3D;&quot;vertical&quot;</span><br><span class="line">        android:padding&#x3D;&quot;10dp&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:hint&#x3D;&quot;用户名&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:hint&#x3D;&quot;密码&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class="line">            android:text&#x3D;&quot;确定&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;LinearLayout&gt;</span><br><span class="line">&lt;&#x2F;LinearLayout&gt;</span><br></pre></td></tr></table></figure>

<p>Dialog的自定义布局Share样式，drawable里面新建</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;shape xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class="line">    &lt;!--圆角--&gt;</span><br><span class="line">    &lt;corners android:radius&#x3D;&quot;30dp&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--填充色--&gt;</span><br><span class="line">    &lt;solid android:color&#x3D;&quot;#ffffff&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;shape&gt;</span><br></pre></td></tr></table></figure>

<p>弹出动画样式，在styles里面添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--弹窗动画--&gt;</span><br><span class="line">   &lt;style name&#x3D;&quot;mystyle&quot; parent&#x3D;&quot;android:Animation&quot;&gt;</span><br><span class="line">       &lt;!--&#x2F;&#x2F;进入时的动画--&gt;</span><br><span class="line">       &lt;item name&#x3D;&quot;@android:windowEnterAnimation&quot;&gt;@anim&#x2F;dialog_enter&lt;&#x2F;item&gt;</span><br><span class="line">       &lt;!--&#x2F;&#x2F;退出时的动画--&gt;</span><br><span class="line">       &lt;item name&#x3D;&quot;@android:windowExitAnimation&quot;&gt;@anim&#x2F;dialog_exit&lt;&#x2F;item&gt;</span><br><span class="line">   &lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<p>弹出动画,新建anim文件目录，一个进入 一个退出的，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;set xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class="line">    &lt;translate</span><br><span class="line">        android:duration&#x3D;&quot;500&quot;</span><br><span class="line">        android:fromYDelta&#x3D;&quot;100%&quot;</span><br><span class="line">        android:toYDelta&#x3D;&quot;0&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;set&gt;</span><br></pre></td></tr></table></figure>

<p>退出的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;set xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;&gt;</span><br><span class="line">    &lt;translate</span><br><span class="line">        android:duration&#x3D;&quot;500&quot;</span><br><span class="line">        android:fromYDelta&#x3D;&quot;0&quot;</span><br><span class="line">        android:toYDelta&#x3D;&quot;100%&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;set&gt;</span><br></pre></td></tr></table></figure>

<p>参考大神的文章 <a href="http://www.jianshu.com/p/9e3cac6aca17" target="_blank" rel="noopener">http://www.jianshu.com/p/9e3cac6aca17</a><br>主要是自己备份下。。。顺便能帮到人更好哈哈</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Github发布compile依赖</title>
    <url>/blog/2016/07/01/Android/Github%E5%8F%91%E5%B8%83compile%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<ol>
<li><p>本地新建Android Studio项目</p>
</li>
<li><p>新建Module，选择Android library(我的名字是dialog)<br><img src="http://upload-images.jianshu.io/upload_images/2803682-a8928b8a63a273f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>删除项目下的app Module，只留Android library<br><img src="http://upload-images.jianshu.io/upload_images/2803682-1332d96acd94e979.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>编写内容 项目中 无需 无需 无需 做任何特殊处理  例如这种</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classpath &#39;com.github.dcendents:android-maven-gradle-plugin:1.5&#39;</span><br><span class="line"> apply plugin: &#39;com.github.dcendents.android-maven&#39;  </span><br><span class="line"> group&#x3D;&#39;com.github.你的guihub的账户名字&#39;</span><br></pre></td></tr></table></figure></li>
<li><p>使用git上传到github</p>
</li>
<li><p>选择发布<br><img src="http://upload-images.jianshu.io/upload_images/2803682-3b8c5ad8b82794ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>发布内容<br><img src="http://upload-images.jianshu.io/upload_images/2803682-e2858992cd6935d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>打开<a href="https://jitpack.io/" target="_blank" rel="noopener">https://jitpack.io/</a><br><img src="http://upload-images.jianshu.io/upload_images/2803682-cee89e06d7a4374d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>集成进项目<br><img src="http://upload-images.jianshu.io/upload_images/2803682-3ac50e5ed4d1e739.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<p>我的测试项目<br><img src="http://upload-images.jianshu.io/upload_images/2803682-e5b60c6a49471862.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GIF.gif"></p>
<p><a href="https://github.com/Lrxc/lrxcdialog" target="_blank" rel="noopener">https://github.com/Lrxc/lrxcdialog</a><br>添加依赖 参考步骤9</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">maven &#123; url &#39;https:&#x2F;&#x2F;jitpack.io&#39; &#125;</span><br><span class="line">compile &#39;com.github.Lrxc:lrxcdialog:1.2&#39;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android_自定义View_圆角头像</title>
    <url>/blog/2016/07/01/Android/Android_%E8%87%AA%E5%AE%9A%E4%B9%89View_%E5%9C%86%E8%A7%92%E5%A4%B4%E5%83%8F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>效果图如下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2803682-d87caed50a14e717.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>原图如下<br><img src="http://upload-images.jianshu.io/upload_images/2803682-44b3a51446e3a8f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>实现方法：</p>
<p>自定义View 代码如下(可直接Copy适用)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.bxlt.customstudy;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.graphics.Bitmap;</span><br><span class="line">import android.graphics.Canvas;</span><br><span class="line">import android.graphics.Color;</span><br><span class="line">import android.graphics.Matrix;</span><br><span class="line">import android.graphics.Paint;</span><br><span class="line">import android.graphics.PorterDuff;</span><br><span class="line">import android.graphics.PorterDuffXfermode;</span><br><span class="line">import android.support.annotation.Nullable;</span><br><span class="line">import android.util.AttributeSet;</span><br><span class="line">import android.view.View;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 自定义圆角头像</span><br><span class="line"> * Created by Lrxc on 2017&#x2F;5&#x2F;22.</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">public class CircleIco extends View &#123;</span><br><span class="line">    private Bitmap bitmap;</span><br><span class="line"></span><br><span class="line">    public CircleIco(Context context, @Nullable AttributeSet attrs) &#123;</span><br><span class="line">        super(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDraw(Canvas canvas) &#123;</span><br><span class="line">        super.onDraw(canvas);</span><br><span class="line">        &#x2F;&#x2F;绘制</span><br><span class="line">        if (bitmap !&#x3D; null)</span><br><span class="line">            canvas.drawBitmap(getCircleBitmap(), 0, 0, null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 设置bitmap</span><br><span class="line">    public void setImageBitmap(Bitmap bitmap) &#123;</span><br><span class="line">        this.bitmap &#x3D; bitmap;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;获取圆角图片</span><br><span class="line">    public Bitmap getCircleBitmap() &#123;</span><br><span class="line">        &#x2F;&#x2F;获取屏幕宽高</span><br><span class="line">        int w &#x3D; getWidth();</span><br><span class="line">        int h &#x3D; getHeight();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;新建一个位图文件</span><br><span class="line">        Bitmap newBitmap &#x3D; Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);</span><br><span class="line">        &#x2F;&#x2F;在此位图上进行绘制</span><br><span class="line">        Canvas canvas &#x3D; new Canvas(newBitmap);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;初始化画笔</span><br><span class="line">        Paint paint &#x3D; new Paint();</span><br><span class="line">&#x2F;&#x2F;        paint.setStrokeWidth(5);&#x2F;&#x2F;画笔宽度</span><br><span class="line">&#x2F;&#x2F;        paint.setAntiAlias(true);&#x2F;&#x2F;是否抗锯齿</span><br><span class="line">&#x2F;&#x2F;        paint.setDither(true); &#x2F;&#x2F;防抖动</span><br><span class="line">&#x2F;&#x2F;        paint.setStyle(Paint.Style.FILL); &#x2F;&#x2F;画笔类型 STROKE空心 FILL 实心</span><br><span class="line">&#x2F;&#x2F;        paint.setColor(Color.BLUE);&#x2F;&#x2F;画笔颜色</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;绘制一个圆</span><br><span class="line">        int radius &#x3D; Math.min(w, h) &#x2F; 2;&#x2F;&#x2F;获取宽和高的较小数</span><br><span class="line">        canvas.drawCircle(w &#x2F; 2, h &#x2F; 2, radius, paint);</span><br><span class="line"></span><br><span class="line">        paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));&#x2F;&#x2F;图片相交模式</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;绘制图片底图</span><br><span class="line">        Matrix matrix &#x3D; new Matrix();</span><br><span class="line">&#x2F;&#x2F;        matrix.postScale(1, 1);&#x2F;&#x2F;不缩放，原图显示</span><br><span class="line">        matrix.postScale((float) w &#x2F; bitmap.getWidth(), (float) h &#x2F; bitmap.getHeight(), 0, 0);&#x2F;&#x2F;缩放全部显示</span><br><span class="line">        canvas.drawBitmap(bitmap, matrix, paint);</span><br><span class="line">        return newBitmap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 测量模式</span><br><span class="line">    @Override</span><br><span class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        if (bitmap &#x3D;&#x3D; null) return;</span><br><span class="line"></span><br><span class="line">       int bw &#x3D; bitmap.getWidth();</span><br><span class="line">        int bh &#x3D; bitmap.getHeight();</span><br><span class="line"></span><br><span class="line">        int sizeW &#x3D; MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        int sizeH &#x3D; MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        int modeW &#x3D; MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        int modeH &#x3D; MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">        if (modeW &#x3D;&#x3D; MeasureSpec.AT_MOST)</span><br><span class="line">            sizeW &#x3D; bw;</span><br><span class="line"></span><br><span class="line">        if (modeH &#x3D;&#x3D; MeasureSpec.AT_MOST)</span><br><span class="line">            sizeH &#x3D; bh;</span><br><span class="line"></span><br><span class="line">        setMeasuredDimension(sizeW, sizeH);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用自定义View:</p>
<p>布局页面中,加上这个就行了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;com.bxlt.customstudy.CircleIco</span><br><span class="line">       android:id&#x3D;&quot;@+id&#x2F;customCreame&quot;</span><br><span class="line">       android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class="line">       android:layout_height&#x3D;&quot;wrap_content&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<p>主页面调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CircleIco circleIco &#x3D; (CircleIco) findViewById(R.id.customCreame);</span><br><span class="line"> circleIco.setImageBitmap(BitmapFactory.decodeResource(getResources(), R.mipmap.test));</span><br></pre></td></tr></table></figure>

<p>好了，就这么简单而已。。。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Fragment 更改Activity Menu</title>
    <url>/blog/2016/07/01/Android/Fragment%20%E6%9B%B4%E6%94%B9Activity%20Menu/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />



<pre><code>oncreate() 中调用  
setHasOptionsMenu(true);

重写
onPrepareOptionsMenu
menu.clear();

刷新Menu  
getActivity().supportInvalidateOptionsMenu();</code></pre>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle 优化</title>
    <url>/blog/2016/07/01/Android/Gradle%20%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h1 id="AS优化"><a href="#AS优化" class="headerlink" title="AS优化"></a>AS优化</h1><p>内存配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xms512m</span><br><span class="line">-Xmx2048m</span><br><span class="line">-XX:MaxPermSize&#x3D;768m</span><br><span class="line">-XX:ReservedCodeCacheSize&#x3D;768m</span><br><span class="line">-XX:+UseCompressedOops</span><br><span class="line"></span><br><span class="line">修改android-studio&#x2F;bin&#x2F;studio.vmoptions   studio64.vmoptions  两个文件的以下属性就可以了</span><br><span class="line">-Xms1024m</span><br><span class="line">-Xmx2048m</span><br><span class="line">-XX:MaxPermSize&#x3D;2048m</span><br><span class="line">-XX:ReservedCodeCacheSize&#x3D;1024m</span><br></pre></td></tr></table></figure>



<h1 id="Gradle优化"><a href="#Gradle优化" class="headerlink" title="Gradle优化"></a>Gradle优化</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启Daemon</span><br><span class="line">org.gradle.daemon&#x3D;true</span><br><span class="line"></span><br><span class="line"># 调整 daemon’s 的堆大小，默认是 1 GB</span><br><span class="line">org.gradle.jvmargs&#x3D;-Xmx2048M</span><br><span class="line">org.gradle.jvmargs&#x3D;-Xmx5120m -XX:MaxPermSize&#x3D;2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Configuration on demand开启(按需配置)</span><br><span class="line">org.gradle.configureondemand&#x3D;true</span><br><span class="line"></span><br><span class="line"># 开启parallel(并行执行多项目编译提升编译速度)</span><br><span class="line">org.gradle.parallel&#x3D;true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Gson 序列化使用</title>
    <url>/blog/2016/07/01/Android/Gson%20%E5%BA%8F%E5%88%97%E5%8C%96%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>gson 注解 一个字段对应多个名字  </p>
<pre><code>@SerializedName(value = &quot;proposal_no&quot;, alternate = {&quot;proposalNo&quot;})
pritvate String name;
@SerializedName(&quot;title&quot;)
pritvate String age;</code></pre><p>gson 解析数组</p>
<pre><code>List&lt;String&gt; list = gson.fromJson(&quot;&quot;, new TypeToken&lt;List&lt;String&gt;&gt;() {
  }.getType());</code></pre>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Weex-Android-原生交互</title>
    <url>/blog/2020/07/01/Android/Weex-Android-%E5%8E%9F%E7%94%9F%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>不会新建项目的小伙伴点这儿<a href="http://www.jianshu.com/p/94267514204f" target="_blank" rel="noopener">http://www.jianshu.com/p/94267514204f</a></p>
<p>一.  配置Android项目</p>
<ol>
<li><p>自定义Module<br>官方文档：<a href="http://weex.apache.org/cn/references/advanced/extend-to-android.html" target="_blank" rel="noopener">http://weex.apache.org/cn/references/advanced/extend-to-android.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyModule extends WXModule &#123;</span><br><span class="line">    @WXModuleAnno(runOnUIThread &#x3D; true)</span><br><span class="line">    public void printLog(String msg) &#123;</span><br><span class="line">        Toast.makeText(mWXSDKInstance.getContext(), msg, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @WXModuleAnno(runOnUIThread &#x3D; false)</span><br><span class="line">    public void nativeCallBack(JSCallback callback) &#123;</span><br><span class="line">        &#x2F;&#x2F;回调信息</span><br><span class="line">        callback.invoke(&quot;I am callback message&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>application onCreate中注册</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化Weex</span><br><span class="line">InitConfig config &#x3D; new InitConfig.Builder().setImgAdapter(null).build();</span><br><span class="line">WXSDKEngine.initialize(this, config);</span><br><span class="line">try &#123;</span><br><span class="line">    &#x2F;&#x2F;通信方法 myModule是weex调用原生的方法名</span><br><span class="line">    WXSDKEngine.registerModule(&quot;myModule&quot;, MyModule.class);</span><br><span class="line">&#125; catch (WXException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>二. 配置Weex项目</p>
<ol>
<li>编写index.vue 内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;text @click&#x3D;&quot;onClick&quot;&gt;Android Toast&lt;&#x2F;text&gt;</span><br><span class="line">        &lt;text @click&#x3D;&quot;onCallBack&quot;&gt;CallBack&lt;&#x2F;text&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    module.exports &#x3D; &#123;</span><br><span class="line">        methods: &#123;</span><br><span class="line">            onClick: function () &#123;</span><br><span class="line">                weex.requireModule(&#39;myModule&#39;).printLog(&quot;我是一个测试!&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            onCallBack: function () &#123;</span><br><span class="line">                let func &#x3D; weex.requireModule(&#39;myModule&#39;);</span><br><span class="line">                func.nativeCallBack(function (event) &#123;</span><br><span class="line">                    &#x2F;&#x2F;回调后处理</span><br><span class="line">                    func.printLog(&#39;回调: &#39; + event);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li>编译为js文件<br>FirstApp 根目录执行命令，成功后生成dist目录，进去复制index.js到Android Studio项目assets中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
三. 运行Android Studio 看效果吧<br><img src="http://upload-images.jianshu.io/upload_images/2803682-315a8c18736be596.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GIF.gif"></li>
</ol>
]]></content>
      <categories>
        <category>Hybrid</category>
      </categories>
      <tags>
        <tag>hybrid</tag>
      </tags>
  </entry>
  <entry>
    <title>Xposed-插件开发记录</title>
    <url>/blog/2016/07/01/Android/Xposed-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一  SharedPreferences数据保存<br>putStringSet：一个key对应多个字段使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> values &#x3D; preferences.getStringSet(CommonName.PACKAGE_NAME, values);</span><br><span class="line">&#x2F;&#x2F;bug说明： Xposed插件杀掉后，再次获取数据时，发现只能获取到一个数据</span><br><span class="line"> edit.clear();</span><br></pre></td></tr></table></figure>
<p>二 方法说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;方法使用</span><br><span class="line">XposedHelpers.findAndHookMethod()</span><br><span class="line">&#x2F;&#x2F;成员变量</span><br><span class="line">XposedHelpers.setObjectField()</span><br><span class="line">&#x2F;&#x2F;静态成员变量（两种都可以）</span><br><span class="line">XposedHelpers.setObjectField()</span><br><span class="line">XposedHelpers.setStaticObjectField()</span><br></pre></td></tr></table></figure>
<p>三 代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;hook成员变量</span><br><span class="line">XposedHelpers.findAndHookMethod(&quot;com.lrxc.test.MainActivity&quot;, lpparam.classLoader, &quot;getString&quot;, String.class</span><br><span class="line">        , new XC_MethodHook() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                super.beforeHookedMethod(param);</span><br><span class="line">                &#x2F;&#x2F;核心方法</span><br><span class="line">                XposedHelpers.setStaticObjectField(param.thisObject.getClass(), &quot;li&quot;, &quot;智障&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;hook静态成员变量，不需要借助findAndHookMethod，直接反射</span><br><span class="line">Class&lt;?&gt; aClass &#x3D; lpparam.classLoader.loadClass(&quot;android.os.Build&quot;);</span><br><span class="line">&#x2F;&#x2F;修改手机厂商</span><br><span class="line">XposedHelpers.setStaticObjectField(aClass, &quot;BRAND&quot;, vendor);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Weex-Android-Studio</title>
    <url>/blog/2020/07/01/Android/Weex-Android-Studio/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一. 搭建Weex开发环境  官网<a href="http://weex.apache.org/cn/" target="_blank" rel="noopener">http://weex.apache.org/cn/</a></p>
<ol>
<li>node<br>官网:<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li>
<li>安装weex环境<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g weex-toolkit</span><br><span class="line">weex -v &#x2F;&#x2F;查看当前weex版本</span><br></pre></td></tr></table></figure>
能显示版本说明正常</li>
</ol>
<p>二 新建Weex项目</p>
<ol>
<li>新建一个本地目录，目录下执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">weex create FirstApp  &#x2F;&#x2F;FirstApp  项目名</span><br></pre></td></tr></table></figure></li>
<li>安装项目依赖<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install &#x2F;&#x2F;一定要执行 否则后续编译失败</span><br></pre></td></tr></table></figure></li>
<li>打开FristApp ，找到start.bat并运行，浏览器显示如下，成功<br><img src="http://upload-images.jianshu.io/upload_images/2803682-79e509ac7aa8597f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>运行到Android设备(知道这种方式就好 有坑, 跳过就行)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">weex platform add android &#x2F;&#x2F;添加Android平台</span><br><span class="line">weex run android &#x2F;&#x2F;运行到Android 设备</span><br></pre></td></tr></table></figure>
说明：垃圾Weex官方坑，自己的项目地址都不能用。因为下面的地址打不开(翻墙也不行),Build就死了。。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;这是官方的项目maven地址，既然打不开还用，尼玛。。。</span><br><span class="line">maven &#123; url &quot;http:&#x2F;&#x2F;mvnrepo.alibaba-inc.com&#x2F;mvn&#x2F;repository&quot; &#125;</span><br><span class="line">maven &#123; url &quot;http:&#x2F;&#x2F;mvnrepo.alibaba-inc.com&#x2F;mvn&#x2F;snapshots&quot; &#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>三. 配置Android Studio 新建项目<br>官方文档：<a href="http://weex.apache.org/cn/guide/integrate-to-your-app.html" target="_blank" rel="noopener">http://weex.apache.org/cn/guide/integrate-to-your-app.html</a></p>
<ol>
<li>app build.gradle中，这三个是必须要有的<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &#39;com.android.support:recyclerview-v7:26.1.0&#39;</span><br><span class="line">compile &#39;com.alibaba:fastjson:1.1.46.android&#39;</span><br><span class="line">compile &#39;com.taobao.android:weex_sdk:0.10.0@aar&#39; &#x2F;&#x2F;核心依赖</span><br></pre></td></tr></table></figure>
一定要更新最新版本，否则可能加载JS失败，垃圾Weex官方坑<br><img src="http://upload-images.jianshu.io/upload_images/2803682-dbd8d44721784346.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>新建application onCreate中初始化<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;不想新建ImageAdapter 直接用null也可以</span><br><span class="line">InitConfig config&#x3D;new InitConfig.Builder().setImgAdapter(null).build();</span><br><span class="line">&#x2F;&#x2F;InitConfig config&#x3D;new InitConfig.Builder().setImgAdapter(new ImageAdapter()).build();</span><br><span class="line"> WXSDKEngine.initialize(this,config);</span><br></pre></td></tr></table></figure>
记得mainfest配置,记得mainfest配置,记得mainfest配置</li>
<li>MainActivity 参考官方 全部复制即可<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;因为核心依赖库是最新的，所以和官方有区别</span><br><span class="line"> mWXSDKInstance.render(&quot;WXSample&quot;, WXFileUtils.loadAsset(&quot;index.js&quot;, this), null, null, -1, -1, WXRenderStrategy.APPEND_ASYNC);&#x2F;&#x2F;index.js 名字对用assets中的</span><br></pre></td></tr></table></figure>
注意：默认是不会重写setContentView()方法的<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onViewCreated(WXSDKInstance instance, View view) &#123;</span><br><span class="line">    setContentView(view);&#x2F;&#x2F;一定重写 否则js页面不会加载</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>添加weex编写的文件<br>FirstApp 根目录执行命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
附加：编译就是将.vue编译成js文件，下面两种方式也可以<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">weex index.vue -o .  &#x2F;&#x2F;后面是个英文 .  意思是说存放到当前目录</span><br><span class="line">weex compile index.vue js</span><br></pre></td></tr></table></figure>
成功后生成dist目录，进去复制index.js到Android Studio项目assets中</li>
<li>Android Studio 运行看效果</li>
</ol>
]]></content>
      <categories>
        <category>Hybrid</category>
      </categories>
      <tags>
        <tag>hybrid</tag>
      </tags>
  </entry>
  <entry>
    <title>CICD-打包流程</title>
    <url>/blog/2020/07/01/Config/CICD-%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一 上报源码至215内网(开发人员提供)<br><img src="https://upload-images.jianshu.io/upload_images/2803682-93171cdc611072d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>二 登录廋客户机下载上传的源码<br><img src="https://upload-images.jianshu.io/upload_images/2803682-ea6a203440dfc004.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>三 解压并替换git路径下文件，然后提交<br>1选中除了.git之外所有文件并删除，<br><img src="https://upload-images.jianshu.io/upload_images/2803682-fac5a7f6f21ce2a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2 所以解压的源码，全部复制到git目录下<br><img src="https://upload-images.jianshu.io/upload_images/2803682-ceca50289cceafde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>3 提交git代码<br><img src="https://upload-images.jianshu.io/upload_images/2803682-be2dcd2b8e889315.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>4 点击commit，<br><img src="https://upload-images.jianshu.io/upload_images/2803682-041688a20b9e5088.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>出现success 代表提交成功<br><img src="https://upload-images.jianshu.io/upload_images/2803682-467207e875ffb14c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>5 推送至服务器<br>再次点击push，出现上图类似的success就成功了</p>
<p>四 登录cicd网站，开始构建<br>1 登录成功如下<br><img src="https://upload-images.jianshu.io/upload_images/2803682-821af009ca49458b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2803682-4daf0b415385c9cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2803682-6f045497b9393a88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2803682-7c11ee5ea0a85700.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2803682-109b64caafb554da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>五 构建成功后下载解压</p>
]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next 主题配置</title>
    <url>/blog/2020/07/01/Config/Hexo%20Next%20%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>官网教程：<a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">https://theme-next.iissnan.com/getting-started.html</a></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</span><br><span class="line">为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件</span><br></pre></td></tr></table></figure>

<h4 id="一-下载主题"><a href="#一-下载主题" class="headerlink" title="一 下载主题"></a>一 下载主题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your-hexo-site</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<h4 id="二-启用主题"><a href="#二-启用主题" class="headerlink" title="二 启用主题"></a>二 启用主题</h4><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h4 id="三-编辑菜单"><a href="#三-编辑菜单" class="headerlink" title="三 编辑菜单"></a>三 编辑菜单</h4><p>启用需要的菜单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;----|| 前面是路径,后面是图标ico</span><br><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home</span><br><span class="line">  categories: &#x2F; categories&#x2F;|| th</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br><span class="line">  about: &#x2F;about&#x2F; || user</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || calendar</span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || sitemap</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || heartbeat</span><br></pre></td></tr></table></figure>

<p>手动创建对应页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &#39;categories&#39;</span><br><span class="line">hexo new page &#39;tags&#39;</span><br><span class="line">hexo new page &#39;about&#39;</span><br></pre></td></tr></table></figure>

<p>\source路径下对应名称的index.md增加type属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-07-30 16:28:33</span><br><span class="line">type: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-07-30 16:28:54</span><br><span class="line">type: tags</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2018-07-30 16:29:13</span><br><span class="line">type: about</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>新建一篇文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;test&quot;</span><br></pre></td></tr></table></figure>

<p>编辑 \source_posts\test.md 文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: one</span><br><span class="line">date: 2020-07-01 16:01:33</span><br><span class="line">tags: [标签1,标签2]</span><br><span class="line">categories: </span><br><span class="line">- Java分类</span><br><span class="line">- Java分类的二级菜单</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>刷新浏览器，就可以看到效果了</p>
<h4 id="六-主题设置"><a href="#六-主题设置" class="headerlink" title="六 主题设置"></a>六 主题设置</h4><p>默认针对主题配置文件</p>
<h5 id="1-页面样式"><a href="#1-页面样式" class="headerlink" title="1. 页面样式"></a>1. 页面样式</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scheme: Muse    <span class="comment">#上下布局</span></span><br><span class="line">scheme: Pisces  <span class="comment">#左右布局</span></span><br></pre></td></tr></table></figure>

<h5 id="2-设置语言"><a href="#2-设置语言" class="headerlink" title="2. 设置语言"></a>2. 设置语言</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;站点配置文件</span><br><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure>

<h5 id="3-头像"><a href="#3-头像" class="headerlink" title="3. 头像"></a>3. 头像</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  url: &#x2F;images&#x2F;ico.jpg #图片路径</span><br><span class="line">  rounded: true  # 圆角</span><br><span class="line">  rotated: true  # 旋转</span><br></pre></td></tr></table></figure>

<h5 id="4-友情链接"><a href="#4-友情链接" class="headerlink" title="4. 友情链接"></a>4. 友情链接</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">links:</span><br><span class="line">  Github: https:&#x2F;&#x2F;github.com&#x2F;Lrxc</span><br><span class="line">  Weibo: http:&#x2F;&#x2F;example.com&#x2F;</span><br><span class="line">  WeChat: http:&#x2F;&#x2F;example.com&#x2F;</span><br><span class="line">  </span><br><span class="line">social_icons:</span><br><span class="line">  enable: true      # 显示社交图标</span><br><span class="line">  icons_only: false # 只显示图标，不显示文字</span><br></pre></td></tr></table></figure>

<h5 id="5-底部"><a href="#5-底部" class="headerlink" title="5. 底部"></a>5. 底部</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">footer:</span><br><span class="line">  since: 2018        # 建站开始时间</span><br><span class="line">  icon:</span><br><span class="line">    name: user       # 设置 建站初始时间和至今时间中间的图标，默认是一个&#39;小人像&#39;，更改user为heart可以变成一个心</span><br><span class="line">    animated: true</span><br><span class="line">    color: &quot;#808080&quot; # 更改图标的颜色，红色为&#39;#ff0000&#39;</span><br><span class="line">  powered:</span><br><span class="line">    enable: true     # 开启hexo驱动</span><br><span class="line">    version: true    # 开启hexo版本号</span><br><span class="line">  theme:</span><br><span class="line">    enable: true     # 开启主题驱动</span><br><span class="line">    version: true    # 开启主题版本号</span><br><span class="line">  custom_text: Hosted by &lt;a target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;external nofollow&quot; href&#x3D;&quot;https:&#x2F;&#x2F;pages.coding.me&quot;&gt;&lt;b&gt;Coding Pages&lt;&#x2F;b&gt;&lt;&#x2F;a&gt; # 这里的底部标识是为了添加coding page服务时的版权声明 打开注释就可以看到底部有一个 hosted by coding pages</span><br></pre></td></tr></table></figure>

<h5 id="6-文章自动折叠"><a href="#6-文章自动折叠" class="headerlink" title="6. 文章自动折叠"></a>6. 文章自动折叠</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true #自动折叠文章</span><br><span class="line">  length: 150  #显示行数</span><br></pre></td></tr></table></figure>

<h5 id="7-首页显示几篇文章"><a href="#7-首页显示几篇文章" class="headerlink" title="7. 首页显示几篇文章"></a>7. 首页显示几篇文章</h5><p>站点配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  per_page: 6  #一页显示几条文章</span><br></pre></td></tr></table></figure>

<h5 id="8-页面统计人数"><a href="#8-页面统计人数" class="headerlink" title="8. 页面统计人数"></a>8. 页面统计人数</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: false              # 设true 开启</span><br><span class="line">  total_visitors: true       # 总阅读人数（uv数）</span><br><span class="line">  total_visitors_icon: user  # 阅读总人数的图标</span><br><span class="line">  total_views: true          # 总阅读次数（pv数）</span><br><span class="line">  total_views_icon: eye      # 阅读总次数的图标</span><br><span class="line">  post_views: true           # 开启内容阅读次数</span><br><span class="line">  post_views_icon: eye       # 内容页阅读数的图标</span><br></pre></td></tr></table></figure>

<h5 id="9-本地搜索功能"><a href="#9-本地搜索功能" class="headerlink" title="9. 本地搜索功能"></a>9. 本地搜索功能</h5><p>安装搜索插件： <code>hexo-generator-searchdb</code>，根目录下执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>站点配置文件_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>主题配置文件_config.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h5 id="10-字数统计，阅读时长"><a href="#10-字数统计，阅读时长" class="headerlink" title="10. 字数统计，阅读时长"></a>10. 字数统计，阅读时长</h5><p>安装插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<p>主题配置文件<code>_config.yml</code> 修改如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true  # false会显示一行</span><br><span class="line">  item_text_post: true  # 显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字</span><br><span class="line">  item_text_total: true # 底部footer是否显示字数统计属性文字</span><br><span class="line">  awl: 4                # 计算字数的一个设置,没设置过</span><br><span class="line">  wpm: 275              # 一分钟阅读的字数</span><br></pre></td></tr></table></figure>

<p>站点配置文件<code>_config.yml</code> 新增如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line"> #文章内是否显示</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line"> # 网页底部是否显示</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: true</span><br></pre></td></tr></table></figure>

<h5 id="11-内容页里的代码块新增复制按钮"><a href="#11-内容页里的代码块新增复制按钮" class="headerlink" title="11. 内容页里的代码块新增复制按钮"></a>11. 内容页里的代码块新增复制按钮</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: false      # 增加复制按钮的开关</span><br><span class="line">    show_result: false # 点击复制完后是否显示 复制成功 结果提示</span><br></pre></td></tr></table></figure>

<h5 id="12-配置微信，支付宝打赏"><a href="#12-配置微信，支付宝打赏" class="headerlink" title="12. 配置微信，支付宝打赏"></a>12. 配置微信，支付宝打赏</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Reward</span><br><span class="line">reward_comment:                   # 打赏描述</span><br><span class="line">wechatpay: &#x2F;images&#x2F;wechatpay.png  # 微信支付的二维码图片地址</span><br><span class="line">alipay: &#x2F;images&#x2F;alipay.png        # 支付宝的地址</span><br><span class="line">#bitcoin: &#x2F;images&#x2F;bitcoin.png     # 比特币地址</span><br></pre></td></tr></table></figure>

<h5 id="13-声明文章原创"><a href="#13-声明文章原创" class="headerlink" title="13. 声明文章原创"></a>13. 声明文章原创</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">creative_commons:</span><br><span class="line">  license: by-nc-sa</span><br><span class="line">  sidebar: false</span><br><span class="line">  post: true       # 默认显示版权信息</span><br><span class="line">  language:</span><br></pre></td></tr></table></figure>

<h5 id="14-相关文章推荐"><a href="#14-相关文章推荐" class="headerlink" title="14. 相关文章推荐"></a>14. 相关文章推荐</h5><p>安装推荐文章的插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure>

<p>主题配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">related_posts:</span><br><span class="line">  enable: true</span><br><span class="line">  title: 相关文章推荐      # 属性的命名</span><br><span class="line">  display_in_home: false # false代表首页不显示</span><br><span class="line">  params:</span><br><span class="line">    maxCount: 5          # 最多5条</span><br><span class="line">    #PPMixingRate: 0.0   # 相关度</span><br><span class="line">    #isDate: true        # 是否显示日期</span><br><span class="line">    #isImage: false      # 是否显示配图</span><br><span class="line">    isExcerpt: false     # 是否显示摘要</span><br></pre></td></tr></table></figure>

<h5 id="15-背景动画设置"><a href="#15-背景动画设置" class="headerlink" title="15. 背景动画设置"></a>15. 背景动画设置</h5><h4 id="Canvas-nest-风格"><a href="#Canvas-nest-风格" class="headerlink" title="Canvas-nest 风格"></a>Canvas-nest 风格</h4><p>进入 <code>theme/next</code> 目录，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-canvas-nest source&#x2F;lib&#x2F;canvas-nest</span><br></pre></td></tr></table></figure>

<p>实际上就是将一个显示动效的 js 文件 clone 到对应目录。</p>
<p>这时将配置文件<code>_config.yml</code> 中的 <code>canvas_nest: false</code> 改为 <code>canvas_nest: true</code> 才能真正生效。</p>
]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Page Hexo 搭建个人博客</title>
    <url>/blog/2020/07/01/Config/Github%20Page%20Hexo%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>环境</p>
<ul>
<li><p>nodejs</p>
</li>
<li><p>git</p>
</li>
</ul>
<p>官网教程：<a href="https://hexo.io/zh-cn/docs/github-pages" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/github-pages</a></p>
<p>初始化hexo项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>浏览器访问localhost:4000</p>
<p>新建github 项目</p>
<p>开启GitHub Pages</p>
<p>打开根目录下的<code>_config.yml</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;url是github pages给我们分配的网址</span><br><span class="line">&#x2F;&#x2F;root是我们搭建该博客的仓库名!</span><br><span class="line">url: https:&#x2F;&#x2F;lrxc.github.io&#x2F;blog&#x2F;</span><br><span class="line">root: &#x2F;blog&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//repo修改为你自己的github项目地址</span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/Lrxc/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>安装hexo git发布插件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>推送项目到github</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">&#x2F;&#x2F;hexo generate deploy</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>

<p>查看github厂库，有新代码推送成功了</p>
<p>访问github page <a href="https://lrxc.github.io/blog/">https://lrxc.github.io/blog/</a></p>
]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Notepad 加入右键菜单</title>
    <url>/blog/2020/07/01/Config/Notepad%20%E5%8A%A0%E5%85%A5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>下内容保存为 .reg 文件，双击运行即可：</p>
<pre><code>Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\*\shell\NotePad++]
@=&quot;Edit with &amp;Notepad++&quot;
&quot;Icon&quot;=&quot;C:\\Program Files\\Notepad++\\notepad++.exe&quot;

[HKEY_CLASSES_ROOT\*\shell\NotePad++\Command]
@=&quot;C:\\Program Files\\Notepad++\\notepad++.exe \&quot;%1\&quot;&quot;</code></pre><p>Sublime：</p>
<pre><code>Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\*\shell\sublime_text]
@=&quot;Edit with sublime_text&quot;
&quot;Icon&quot;=&quot;D:\\Java\\Sublime\\sublime_text.exe&quot;

[HKEY_CLASSES_ROOT\*\shell\sublime_text\Command]
@=&quot;D:\\Java\\Sublime\\sublime_text.exe \&quot;%1\&quot;&quot;</code></pre><p>如果要删除右键菜单，也是一样的道理：</p>
<pre><code>Windows Registry Editor Version 5.00

[-HKEY_CLASSES_ROOT\*\shell\NotePad++]</code></pre>]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>RobotFramework自动化测试</title>
    <url>/blog/2020/07/01/Config/RobotFramework%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<ul>
<li><p>系统：Win10 x64</p>
</li>
<li><p>Python：3.7.5</p>
</li>
</ul>
<h1 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一. 环境搭建"></a>一. 环境搭建</h1><h3 id="1-python环境"><a href="#1-python环境" class="headerlink" title="1. python环境"></a>1. python环境</h3><p>官网地址：<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a></p>
<p>介绍：RF框架是基于python 的，所以一定要有python环境。</p>
<p>安装后配置python、pip环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">python 版本</span></span><br><span class="line">python --version</span><br><span class="line"><span class="meta">#</span><span class="bash">pip 版本</span></span><br><span class="line">pip --version</span><br><span class="line"><span class="meta">#</span><span class="bash">查看已安装插件</span></span><br><span class="line">pip list</span><br><span class="line"><span class="meta">#</span><span class="bash">查看安装插件详细信息</span></span><br><span class="line">pip show xxx</span><br></pre></td></tr></table></figure>

<h3 id="2-robotframework-安装"><a href="#2-robotframework-安装" class="headerlink" title="2. robotframework 安装"></a>2. robotframework 安装</h3><p>官网地址：<a href="https://pypi.org/project/robotframework/" target="_blank" rel="noopener">https://pypi.org/project/robotframework/</a></p>
<p>介绍：测试框架</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install robotframework</span><br></pre></td></tr></table></figure>


<h3 id="3-robotframework-ride-安装"><a href="#3-robotframework-ride-安装" class="headerlink" title="3. robotframework-ride 安装"></a>3. robotframework-ride 安装</h3><p>官网地址：<a href="https://github.com/robotframework/RIDE/releases" target="_blank" rel="noopener">https://github.com/robotframework/RIDE/releases</a></p>
<p>介绍：RIDE就是一个图形界面的用于创建、组织、运行测试的软件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install robotframework-ride</span><br></pre></td></tr></table></figure>

<h3 id="4-wxpython-安装（可选）"><a href="#4-wxpython-安装（可选）" class="headerlink" title="4. wxpython 安装（可选）"></a>4. wxpython 安装（可选）</h3><p>官网地址：<a href="https://www.wxpython.org/pages/downloads/" target="_blank" rel="noopener">https://www.wxpython.org/pages/downloads/</a></p>
<p>介绍：Wxpython 是python 非常有名的一个GUI库，因为RIDE 是基于这个库开发的，所以这个必须安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install wxPython</span><br></pre></td></tr></table></figure>

<h3 id="5-启动软件"><a href="#5-启动软件" class="headerlink" title="5. 启动软件"></a>5. 启动软件</h3><p>进入python路径下Scripts下,双击ride.py即可，或者右键选择python打开</p>
<p>启动报错的参考下面</p>
<h1 id="二-测试"><a href="#二-测试" class="headerlink" title="二. 测试"></a>二. 测试</h1><h3 id="1-hello-world-测试"><a href="#1-hello-world-测试" class="headerlink" title="1 hello world 测试"></a>1 hello world 测试</h3><ol>
<li>新建测试文件：New Project –&gt; New Suite –&gt; New Test Case</li>
<li>测试用例</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">test01</span><br><span class="line">    log    hello world</span><br></pre></td></tr></table></figure>

<h3 id="2-selenium测试"><a href="#2-selenium测试" class="headerlink" title="2 selenium测试"></a>2 selenium测试</h3><ol>
<li><p>安装依赖</p>
<p>官网地址：<a href="https://github.com/carbonblack/robotframework-selenium2library" target="_blank" rel="noopener">https://github.com/carbonblack/robotframework-selenium2library</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install robotframework-selenium2library</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入依赖库</p>
</li>
</ol>
<img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20200721182629247.png" alt="image-20200721182629247" style="zoom:80%;" />

<ol start="3">
<li>测试用例</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#测试代码</span><br></pre></td></tr></table></figure>

<h3 id="3-接口测试"><a href="#3-接口测试" class="headerlink" title="3 接口测试"></a>3 接口测试</h3><ol>
<li><p>安装依赖</p>
<p>官网地址：<a href="https://github.com/MarketSquare/robotframework-requests#readme" target="_blank" rel="noopener">https://github.com/MarketSquare/robotframework-requests#readme</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install robotframework-requests</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入依赖库</p>
</li>
<li><p>测试用例</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*** Settings ***</span><br><span class="line">Library               Collections</span><br><span class="line">Library               RequestsLibrary</span><br><span class="line"></span><br><span class="line">*** Test Cases ***</span><br><span class="line">Get Requests</span><br><span class="line">    Create Session    github         http:&#x2F;&#x2F;api.github.com</span><br><span class="line">    Create Session    google         http:&#x2F;&#x2F;www.google.com</span><br><span class="line">    $&#123;resp&#125;&#x3D;          Get Request    google               &#x2F;</span><br><span class="line">    Status Should Be  200            $&#123;resp&#125;</span><br><span class="line">    $&#123;resp&#125;&#x3D;          Get Request    github               &#x2F;users&#x2F;bulkan</span><br><span class="line">    Request Should Be Successful     $&#123;resp&#125;</span><br><span class="line">    Dictionary Should Contain Value  $&#123;resp.json()&#125;       Bulkan Evcimen</span><br></pre></td></tr></table></figure>

<h1 id="3-技巧"><a href="#3-技巧" class="headerlink" title="3. 技巧"></a>3. 技巧</h1><h3 id="1-桌面快捷启动方式"><a href="#1-桌面快捷启动方式" class="headerlink" title="1. 桌面快捷启动方式"></a>1. 桌面快捷启动方式</h3><p>桌面空白处右击–&gt; 新建–&gt; 快捷方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 前面是python安装的路径，主要是-c及后面参数</span><br><span class="line">D:\Python37\pythonw.exe -c &quot;from robotide import main; main()&quot;</span><br></pre></td></tr></table></figure>

<h3 id="2-三方插件"><a href="#2-三方插件" class="headerlink" title="2. 三方插件"></a>2. 三方插件</h3><p>官网：<a href="https://robotframework.org/#libraries" target="_blank" rel="noopener">https://robotframework.org/#libraries</a></p>
<h3 id="3-启动报错"><a href="#3-启动报错" class="headerlink" title="3. 启动报错"></a>3. 启动报错</h3><img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20200721161906148.png" alt="image-20200721161906148" style="zoom:80%;" />

<p>解决：</p>
<p>修改\Lib\site-packages\robotide\application\application.py,增加一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.locale &#x3D; wx.Locale(wx.LANGUAGE_CHINESE_SIMPLIFIED)</span><br></pre></td></tr></table></figure>

<img src="C:\Users\Admin\AppData\Roaming\Typora\typora-user-images\image-20200721162028135.png" alt="image-20200721162028135" style="zoom:80%;" />

]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime-优化指南</title>
    <url>/blog/2020/07/01/Config/Sublime-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p><strong>插件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 Ctl（Command）+Shift+P </span><br><span class="line">2 安装：Package Control:Install Package</span><br><span class="line">3 卸载：Package Control:Remove Package</span><br></pre></td></tr></table></figure>

<p><strong>汉化</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ChineseLocalizations</span><br></pre></td></tr></table></figure>

<p>*<em>格式化 *</em>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pretty，html&#x2F;css&#x2F;js</span><br></pre></td></tr></table></figure>

<p><strong>主题</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主题：ayu</span><br><span class="line">图标：A File Icon</span><br><span class="line">使用：settings Preferences &gt; Theme（Color Scheme） 选择即可</span><br></pre></td></tr></table></figure>

<p><strong>vue</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue Syntax Highlight</span><br></pre></td></tr></table></figure>

<p><strong>终端</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">terminal</span><br></pre></td></tr></table></figure>

<p><strong>Eclipse 快捷键</strong></p>
<p>Preferences -&gt; Key bindings - User </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[  </span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;shift+enter&quot;], &quot;command&quot;: &quot;run_macro_file&quot;, &quot;args&quot;: &#123;&quot;file&quot;: &quot;Packages&#x2F;Default&#x2F;Add Line.sublime-macro&quot;&#125; &#125;,  </span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;alt+&#x2F;&quot;], &quot;command&quot;: &quot;auto_complete&quot; &#125;,&#x2F;&#x2F;自动提示</span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;alt+up&quot;], &quot;command&quot;: &quot;swap_line_up&quot; &#125;,&#x2F;&#x2F;整行上移</span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;alt+down&quot;], &quot;command&quot;: &quot;swap_line_down&quot; &#125;,&#x2F;&#x2F;整行下移</span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;alt+left&quot;], &quot;command&quot;: &quot;jump_back&quot; &#125;,&#x2F;&#x2F;跳转到上一个编辑处</span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;alt+right&quot;], &quot;command&quot;: &quot;jump_forward&quot; &#125;,</span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+alt+j&quot;], &quot;command&quot;: &quot;join_lines&quot; &#125;,  </span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+d&quot;], &quot;command&quot;: &quot;run_macro_file&quot;, &quot;args&quot;: &#123;&quot;file&quot;: &quot;Packages&#x2F;Default&#x2F;Delete Line.sublime-macro&quot;&#125; &#125;,&#x2F;&#x2F;整行删除</span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+h&quot;], &quot;command&quot;: &quot;show_panel&quot;, &quot;args&quot;: &#123;&quot;panel&quot;: &#x2F;&#x2F;搜索全文</span><br><span class="line"> &quot;find_in_files&quot;&#125; &#125;,</span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+l&quot;], &quot;command&quot;: &quot;show_overlay&quot;, &quot;args&quot;: &#123;&quot;overlay&quot;: &quot;goto&quot;, &quot;text&quot;: &quot;:&quot;&#125; &#125;,  </span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+o&quot;], &quot;command&quot;: &quot;show_overlay&quot;, &quot;args&quot;: &#123;&quot;overlay&quot;: &#x2F;&#x2F;跳转到当前的某个方法</span><br><span class="line"> &quot;goto&quot;, &quot;text&quot;: &quot;@&quot;&#125; &#125;,</span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+up&quot;], &quot;command&quot;: &quot;goto_definition&quot; &#125;,&#x2F;&#x2F;跳转到定义，比如在某个函数上按此键，则跳转到它的定义。</span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+down&quot;], &quot;command&quot;: &quot;find_under_prev&quot; &#125;,&#x2F;&#x2F;选中光标所在的变量或者函数，非常有用</span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+alt+down&quot;], &quot;command&quot;: &quot;duplicate_line&quot; &#125;,&#x2F;&#x2F;向下复制整行</span><br><span class="line"> &#123;&quot;keys&quot;: [&quot;ctrl+shift+f&quot;], &quot;command&quot;: &quot;reindent&quot; , &quot;args&quot;:&#123;&quot;single_line&quot;: &#x2F;&#x2F;格式化代码，当然也可以利用html+css+js prettify插件来格式化</span><br><span class="line"> false&#125;&#125;,</span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+shift+r&quot;], &quot;command&quot;: &quot;show_overlay&quot;, &quot;args&quot;: &#123;&quot;overlay&quot;: &quot;goto&quot;, &quot;show_files&quot;: true&#125; &#125;,  </span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+shift+s&quot;], &quot;command&quot;: &quot;save_all&quot; &#125;,  </span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+shift+f4&quot;], &quot;command&quot;: &quot;close_all&quot; &#125;,  </span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+shift+y&quot;], &quot;command&quot;: &quot;lower_case&quot; &#125;,  </span><br><span class="line"> &#123; &quot;keys&quot;: [&quot;ctrl+shift+x&quot;], &quot;command&quot;: &quot;upper_case&quot; &#125; </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue ProxyTable 跨域 部署Nginx</title>
    <url>/blog/2020/07/01/Config/Vue%20ProxyTable%20%E8%B7%A8%E5%9F%9F%20%E9%83%A8%E7%BD%B2Nginx/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>说明：proxyTable 只是前端开发调试时有效，真正的转发需要Nginx。</p>
<p><strong>整体流程：</strong><br>前端地址：10.10.3.120:8080  后端地址:10.10.3.120:8082<br>vue请求 10.10.3.120:8080/api/login –&gt; nginx得到/api/login–&gt;nginx转发到10.10.3.120:8082/api/login<br><strong>也就是说，这个过程和proxyTable 的转发没关系了。</strong></p>
<h2 id="Vue前端配置"><a href="#Vue前端配置" class="headerlink" title="Vue前端配置"></a>Vue前端配置</h2><h4 id="1-vue-proxtTable-配置"><a href="#1-vue-proxtTable-配置" class="headerlink" title="1 vue proxtTable 配置"></a>1 vue proxtTable 配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dev: &#123;</span><br><span class="line">  port: 80,</span><br><span class="line">  assetsSubDirectory: &#39;static&#39;, &#x2F;&#x2F;打包后生成的路径名</span><br><span class="line">  assetsPublicPath: &#39;&#x2F;&#39;,</span><br><span class="line">  proxyTable: &#123;</span><br><span class="line">    &#39;&#x2F;api&#39;: &#123;</span><br><span class="line">      target: &#39;http:&#x2F;&#x2F;10.10.3.120:8082&#39;, &#x2F;&#x2F;服务器ip地址</span><br><span class="line">      changeOrigin: true,    &#x2F;&#x2F; 是否跨域</span><br><span class="line">      pathRewrite: &#123;  &#x2F;&#x2F;pathRewrite可以不加</span><br><span class="line">        &#39;^&#x2F;api&#39;: &#39;&#x2F;api&#39;   &#x2F;&#x2F; 这种接口配置出来     http:&#x2F;&#x2F;10.10.3.120:8082&#x2F;api&#x2F;login</span><br><span class="line">        &#39;^&#x2F;api&#39;: &#39;&#x2F;&#39;        &#x2F;&#x2F; 这种接口配置出来      http:&#x2F;&#x2F;10.10.3.120:8082&#x2F;login</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 请求使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       &#x2F;&#x2F; 登录</span><br><span class="line">login()&#123;</span><br><span class="line">  this.$ajaxget(&#123;</span><br><span class="line">    url: &#39;&#x2F;api&#x2F;login&#39;,</span><br><span class="line">    data: &#123;&#125;,</span><br><span class="line">    successFc: data &#x3D;&gt; &#123;</span><br><span class="line">      console.log(data.data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h4 id="2-打包上传，不需要特殊修改代码"><a href="#2-打包上传，不需要特殊修改代码" class="headerlink" title="2 打包上传，不需要特殊修改代码"></a>2 打包上传，不需要特殊修改代码</h4><p>打包好的代码位于dist目录下，上传dist文件夹到服务器指定路径<br><img src="https://upload-images.jianshu.io/upload_images/2803682-1435266efc15e819.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h2><h4 id="1-配置nginx-conf"><a href="#1-配置nginx-conf" class="headerlink" title="1 配置nginx.conf"></a>1 配置nginx.conf</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	&#x2F;&#x2F;xxx</span><br><span class="line">	&#x2F;&#x2F;xxx</span><br><span class="line">	</span><br><span class="line">    #前端代理</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location &#x2F;&#123;</span><br><span class="line">            root   &#x2F;var&#x2F;www&#x2F;dist&#x2F;;   #前端代码存放地址</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        #前端proxyTable(重点)</span><br><span class="line">        location &#x2F;api&#x2F; &#123;  #此名称api对应vue的proxyTable名称</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;10.10.3.120:8082&#x2F;; #对应proxyTable的target地址</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ngnx转发超时（org.apache.catalina.connector.ClientabortException:java.io.IOException:Broken pipe）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#代理转发超时配置(broken pipe错误)</span><br><span class="line">proxy_send_timeout 1200s;</span><br><span class="line">proxy_read_timeout 1200s;</span><br><span class="line">proxy_connect_timeout 1200s;</span><br><span class="line">send_timeout 1200s;</span><br></pre></td></tr></table></figure>

<h4 id="2-启动nginx"><a href="#2-启动nginx" class="headerlink" title="2 启动nginx"></a>2 启动nginx</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure>
<h4 id="3-访问"><a href="#3-访问" class="headerlink" title="3 访问"></a>3 访问</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.10.3.120:8080</span><br></pre></td></tr></table></figure>



<h2 id="转发地址"><a href="#转发地址" class="headerlink" title="转发地址"></a>转发地址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设下面四种情况分别用 http:&#x2F;&#x2F;192.168.1.1&#x2F;proxy&#x2F;test.html 进行访问。</span><br><span class="line"></span><br><span class="line">第一种：</span><br><span class="line">location &#x2F;proxy&#x2F; &#123;</span><br><span class="line">proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;;</span><br><span class="line">&#125;</span><br><span class="line">代理到URL：http:&#x2F;&#x2F;127.0.0.1&#x2F;test.html</span><br><span class="line"></span><br><span class="line">第二种（相对于第一种，最后少一个 &#x2F; ）</span><br><span class="line">location &#x2F;proxy&#x2F; &#123;</span><br><span class="line">proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line">&#125;</span><br><span class="line">代理到URL：http:&#x2F;&#x2F;127.0.0.1&#x2F;proxy&#x2F;test.html</span><br><span class="line"></span><br><span class="line">第三种：</span><br><span class="line">location &#x2F;proxy&#x2F; &#123;</span><br><span class="line">proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;aaa&#x2F;;</span><br><span class="line">&#125;</span><br><span class="line">代理到URL：http:&#x2F;&#x2F;127.0.0.1&#x2F;aaa&#x2F;test.html</span><br><span class="line"></span><br><span class="line">第四种（相对于第三种，最后少一个 &#x2F; ）</span><br><span class="line">location &#x2F;proxy&#x2F; &#123;</span><br><span class="line">proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;aaa;</span><br><span class="line">&#125;</span><br><span class="line">代理到URL：http:&#x2F;&#x2F;127.0.0.1&#x2F;aaatest.html</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse-优化指南</title>
    <url>/blog/2020/07/01/Java/Eclipse-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h1 id="常用插件安装"><a href="#常用插件安装" class="headerlink" title="常用插件安装"></a>常用插件安装</h1><h2 id="1-安装流程"><a href="#1-安装流程" class="headerlink" title="1. 安装流程"></a>1. 安装流程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装方法：</span><br><span class="line">1 在Eclipse内上方菜单栏点击help，找到install new software</span><br><span class="line">2 work with 中输入下面地址，然后回车</span><br></pre></td></tr></table></figure>

<h2 id="2-插件url"><a href="#2-插件url" class="headerlink" title="2. 插件url"></a>2. 插件url</h2><h3 id="1-汉化"><a href="#1-汉化" class="headerlink" title="1. 汉化"></a>1. 汉化</h3>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: http:&#x2F;&#x2F;download.eclipse.org&#x2F;technology&#x2F;babel&#x2F;update-site&#x2F;R0.15.1&#x2F;oxygen</span><br></pre></td></tr></table></figure>

<p>   汉化后使用英文版，桌面快捷图标–&gt;属性–&gt;目标<br>   加上 D:\Eclipse\eclipse\eclipse.exe -nl en</p>
<h3 id="2-PropertiesEditor"><a href="#2-PropertiesEditor" class="headerlink" title="2. PropertiesEditor"></a>2. PropertiesEditor</h3><pre><code>url: http://propedit.sourceforge.jp/eclipse/updates/
1 Eclipse - help- Install New Software
2 输入上面url 回车 选择PropertiesEditor </code></pre><h3 id="3-Spring-Tool-Suite-properties-小叶子"><a href="#3-Spring-Tool-Suite-properties-小叶子" class="headerlink" title="3. Spring Tool Suite(properties 小叶子)"></a>3. Spring Tool Suite(properties 小叶子)</h3>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Help -&gt; Eclipse Marketplace</span><br><span class="line">2. Search或选择“Popular”标签，选择Spring Tool Suite (STS) for Eclipse插件</span><br><span class="line">3. 安装，重启</span><br></pre></td></tr></table></figure>

<h3 id="4-SVN"><a href="#4-SVN" class="headerlink" title="4. SVN"></a>4. SVN</h3>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 打开插件地址</span><br><span class="line">Eclipse - help- Install New Software</span><br><span class="line">MyEclipse - help - Install from Site</span><br><span class="line"></span><br><span class="line">2. 添加插件地址</span><br><span class="line">http:&#x2F;&#x2F;subclipse.tigris.org&#x2F;update_1.8.x</span><br><span class="line"></span><br><span class="line">3. 两个都打勾，然后就是一直下一步，直到安装成功，安装完成后会提示重启</span><br><span class="line"></span><br><span class="line">4. 显示SVN资源库</span><br><span class="line">Window - Show View - Other - SVN - SVN资源库 - 新建资源库</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA-优化指南</title>
    <url>/blog/2020/07/01/Java/IDEA-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>常用快捷键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">折叠代码块 Collapse All  </span><br><span class="line">展开代码块 Expand All</span><br><span class="line">转到声明   Go to declaration</span><br><span class="line">提示       Show Intention Actions</span><br><span class="line">类补全     Class Name Completion</span><br><span class="line">格式化代码 Reformat Code</span><br></pre></td></tr></table></figure>

<p>配置 JVM </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xms1024m</span><br><span class="line">-Xmx2048m</span><br><span class="line">-XX:ReservedCodeCacheSize&#x3D;840m</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB&#x3D;50</span><br></pre></td></tr></table></figure>

<p>Mavne settings.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;settings xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0&quot;</span><br><span class="line">          xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">          xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;settings-1.0.0.xsd&quot;&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;pluginGroups&gt;</span><br><span class="line">  &lt;&#x2F;pluginGroups&gt;</span><br><span class="line"></span><br><span class="line">  &lt;proxies&gt;</span><br><span class="line">  &lt;&#x2F;proxies&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;servers&gt;</span><br><span class="line">  &lt;&#x2F;servers&gt;</span><br><span class="line"></span><br><span class="line">  &lt;mirrors&gt;  </span><br><span class="line">	 &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;        </span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">  &lt;&#x2F;mirrors&gt;</span><br><span class="line"></span><br><span class="line">  &lt;profiles&gt;    </span><br><span class="line">  &lt;&#x2F;profiles&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>

<p>tomcat 控制台乱码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打开到tomcat安装目录下的conf&#x2F;文件夹 修改logging.properties文件，</span><br><span class="line">找到 java.util.logging.ConsoleHandler.encoding &#x3D; utf-8</span><br><span class="line">更改为 java.util.logging.ConsoleHandler.encoding &#x3D; GBK</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Git TortoiseGit</title>
    <url>/blog/2020/07/01/Java/Git%20TortoiseGit/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h1 id="一-基础命令"><a href="#一-基础命令" class="headerlink" title="一 基础命令"></a>一 基础命令</h1><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>
<ol>
<li><p>上传项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add *					&#x2F;&#x2F;加入所有项目</span><br><span class="line">git status					&#x2F;&#x2F;检查状态 如果都是绿的 证明成功</span><br><span class="line">git commit -m &quot;这是提交说明&quot;	&#x2F;&#x2F;提交到要地仓库，并写一些注释</span><br><span class="line">git push					&#x2F;&#x2F;推送到服务器</span><br></pre></td></tr></table></figure>
</li>
<li><p>清理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clean -xdf</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="二-代码回滚"><a href="#二-代码回滚" class="headerlink" title="二 代码回滚"></a>二 代码回滚</h1><ol>
<li><p>TortoiseGit 远程回滚</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一步git show log,然后在你先要回退的提交记录上右键 </span><br><span class="line">2. 选择resert **** to this,然后选择最后一个Hard:Reset.......，点ok</span><br><span class="line">3. git命令进到代码的目录下，强制同步本地代码到远端，执行 git push -f</span><br></pre></td></tr></table></figure>
</li>
<li><p>回滚:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log -3 &#x2F;&#x2F;查看最近3次的提交记录(查看coommit_id)</span><br><span class="line">git reset --hard commit_id &#x2F;&#x2F;重置到某次提交</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="三-常见问题"><a href="#三-常见问题" class="headerlink" title="三 常见问题"></a>三 常见问题</h1><ol>
<li><p>SourceTree 一直提示输入密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;修改SourceTree 中厂库地址</span><br><span class="line">http:&#x2F;&#x2F;xxx&#x2F;xx.Git </span><br><span class="line">修改为：http:&#x2F;&#x2F;username:password@xxxxx&#x2F;xxxx.git （即新增username:password@）</span><br></pre></td></tr></table></figure>
</li>
<li><p>TortoiseGit一直提示输入密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;编辑 global.gitconfig</span><br><span class="line">[credential]</span><br><span class="line">    helper &#x3D; store</span><br></pre></td></tr></table></figure>
</li>
<li><p>fatal: The remote end hung up unexpectedly</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mac:</span><br><span class="line"> git config --global http.postBuffer 524288000</span><br><span class="line">Windows:</span><br><span class="line"> [http]</span><br><span class="line"> postBuffer &#x3D; 524288000</span><br></pre></td></tr></table></figure>


</li>
</ol>
]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea 插件推荐</title>
    <url>/blog/2021/04/10/Java/Idea%20%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
#安装环境及版本：

<ul>
<li>Idea：2020.1</li>
</ul>
<p>一 工具类</p>
<ul>
<li><p>Lombok</p>
<p>大量简化代码</p>
</li>
<li><p>GsonFormatPlus</p>
<p>Json序列化实体类</p>
</li>
</ul>
<p>二 代码增强</p>
<ul>
<li><p>EasyCode</p>
<p>根据DB自动生成代码 (controller/service/pojo/mapper) </p>
</li>
<li><p>MyBatisCodeHelperPro</p>
<p>Mybatis 接口跟 xml 跳转，高级功能需要会员</p>
</li>
<li><p>MybatisX</p>
<p>同上，免费版</p>
</li>
</ul>
<p>二 美化</p>
<ul>
<li><p>GapStyle Color Scheme</p>
<p>美化</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Idea-Maven-国内镜像库-2020版</title>
    <url>/blog/2020/07/01/Java/Idea-Maven-%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E5%BA%93-2020%E7%89%88/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li>./conf/settings.xml，在<mirrors>标签中添加 mirror 子节点</li>
<li>目前网上多为使用阿里云的教程，导致阿里的速度越来越慢，最好测试下自己区域哪个速度快。测试速度比较推荐华为云</li>
</ul>
<h4 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;aliyunmaven&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;阿里云公共仓库&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;https:&#x2F;&#x2F;maven.aliyun.com&#x2F;repository&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure>
<h4 id="华为云"><a href="#华为云" class="headerlink" title="华为云"></a>华为云</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;huaweicloud&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">    &lt;url&gt;https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;repository&#x2F;maven&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure>
<h4 id="网易云"><a href="#网易云" class="headerlink" title="网易云"></a>网易云</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;nexus-163&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;Nexus 163&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;mirrors.163.com&#x2F;maven&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure>
<h4 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;nexus-tencentyun&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;Nexus tencentyun&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;nexus&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure>



<h4 id="完整配置如下"><a href="#完整配置如下" class="headerlink" title="完整配置如下"></a>完整配置如下</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;settings xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0&quot;</span><br><span class="line">          xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">          xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;settings-1.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;mirrors&gt;  </span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">        &lt;id&gt;huaweicloud&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">        &lt;url&gt;https:&#x2F;&#x2F;mirrors.huaweicloud.com&#x2F;repository&#x2F;maven&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">  &lt;&#x2F;mirrors&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JVM 调优</title>
    <url>/blog/2019/07/01/Java/Java%20JVM%20%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="一-SpringBoot调优"><a href="#一-SpringBoot调优" class="headerlink" title="一 SpringBoot调优"></a>一 SpringBoot调优</h2><p>关于修改配置文件<code>application.properties</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.tomcat.max-connections&#x3D;0 # Maximum number of connections that the server accepts and processes at any given time.</span><br><span class="line">server.tomcat.max-http-header-size&#x3D;0 # Maximum size, in bytes, of the HTTP message header.</span><br><span class="line">server.tomcat.max-http-post-size&#x3D;0 # Maximum size, in bytes, of the HTTP post content.</span><br><span class="line">server.tomcat.max-threads&#x3D;0 # Maximum number of worker threads.</span><br><span class="line">server.tomcat.min-spare-threads&#x3D;0 # Minimum number of worker threads.</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jps -l -v</span><br><span class="line">top -p 进程id  #按E键可以切换显示单位</span><br><span class="line"></span><br><span class="line">RES：resident memory usage 常驻内存</span><br><span class="line">VIRT：virtual memory usage	#进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等</span><br></pre></td></tr></table></figure>

<h2 id="二-Jvm调优"><a href="#二-Jvm调优" class="headerlink" title="二 Jvm调优"></a>二 Jvm调优</h2><p><strong>启动参数</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># idea启动</span></span><br><span class="line">-XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=128m -Xms1024m -Xmx1024m -Xmn256m -Xss256k -XX:SurvivorRatio=8 -XX:+UseConcMarkSweepGC</span><br><span class="line"></span><br><span class="line"><span class="comment"># java jar启动</span></span><br><span class="line">java -jar -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=128m -Xms1024m -Xmx1024m -Xmn256m -Xss256k -XX:SurvivorRatio=8 -XX:+UseConcMarkSweepGC newframe-1.0.0.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">-XX:MetaspaceSize=128m （元空间默认大小）</span><br><span class="line">-XX:MaxMetaspaceSize=128m （元空间最大大小）</span><br><span class="line">-Xms1024m （堆最大大小）</span><br><span class="line">-Xmx1024m （堆默认大小）</span><br><span class="line">-Xmn256m （新生代大小）</span><br><span class="line">-Xss256k （棧最大深度大小）</span><br><span class="line">-XX:SurvivorRatio=8 （新生代分区比例 8:2）</span><br><span class="line">-XX:+UseConcMarkSweepGC （指定使用的垃圾收集器，这里使用CMS收集器）</span><br><span class="line">-XX:+PrintGCDetails （打印详细的GC日志）</span><br></pre></td></tr></table></figure>

<p><strong>jar附加参数</strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定依赖包所在的仓库位置，如果仓库中没有需要的依赖，启动jar包时还会自动连接远程仓库进行下载</span></span><br><span class="line">-Dthin.root=/root/repository </span><br><span class="line"><span class="comment">#预加载程序，执行“试运行”,它只解析和下载依赖项，而不运行任何用户代码:</span></span><br><span class="line">-Dthin.dryrun=<span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="三-监控命令"><a href="#三-监控命令" class="headerlink" title="三 监控命令"></a>三 监控命令</h2><p><strong>1. jps</strong></p>
<p>显示当前所有java进程pid的命令，我们可以通过这个命令来查看到底启动了几个java进程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jps    <span class="comment">//显示当前所有java进程pid的命令</span></span><br><span class="line">jps -l <span class="comment">//jps -l 输出应用程序main.class的完整package名或者应用程序jar文件完整路径名</span></span><br><span class="line">jps -v <span class="comment">//输出传递给JVM的参数</span></span><br></pre></td></tr></table></figure>

<p><strong>2. top</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep java</span><br><span class="line">top -p 进程id		#进入后按E键切换显示单位</span><br><span class="line"></span><br><span class="line">RES：resident memory usage	#常驻内存</span><br><span class="line">VIRT：virtual memory usage	#进程“需要的”虚拟内存大小，包括进程使用的库、代码、数据等</span><br></pre></td></tr></table></figure>

<p><strong>3. jstat</strong></p>
<p>对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控</p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line">option：我们经常使用的选项有gc、gcutil</span><br><span class="line">vmid：java进程id</span><br><span class="line">interval：间隔时间，单位为毫秒</span><br><span class="line">count：打印次数</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">S0C:年轻代第一个survivor的容量（字节）</span><br><span class="line">S1C：年轻代第二个survivor的容量（字节）</span><br><span class="line">S0U：年轻代第一个survivor已使用的容量（字节）</span><br><span class="line">S1U：年轻代第二个survivor已使用的容量（字节）</span><br><span class="line">EC：年轻代中Eden的空间（字节）</span><br><span class="line">EU：年代代中Eden已使用的空间（字节）</span><br><span class="line">OC：老年代的容量（字节）</span><br><span class="line">OU:老年代中已使用的空间（字节）</span><br><span class="line">PC：永久代的容量</span><br><span class="line">PU：永久代已使用的容量</span><br><span class="line">YGC：从应用程序启动到采样时年轻代中GC的次数</span><br><span class="line">YGCT:从应用程序启动到采样时年轻代中GC所使用的时间（单位：S）</span><br><span class="line">FGC：从应用程序启动到采样时老年代中GC（FULL GC）的次数</span><br><span class="line">FGCT：从应用程序启动到采样时老年代中GC所使用的时间（单位：S）</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jstat -gc 10010 1000 3  &#x2F;&#x2F;对进程10010的每个1分钟打印一次，共3次</span><br></pre></td></tr></table></figure>

<h2 id="四-可视化工具"><a href="#四-可视化工具" class="headerlink" title="四 可视化工具"></a>四 可视化工具</h2><ol>
<li><p>Jvisualvm </p>
<p><strong>linux使用以下命令启动，windows JMX 端口连接</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* 这是一整条命令</span><br><span class="line">* hostname:linux的ip</span><br><span class="line">* port windows连接用的端口</span><br><span class="line">**&#x2F;</span><br><span class="line">java -Djava.rmi.server.hostname&#x3D;192.168.32.129 </span><br><span class="line">-Djava.security.policy&#x3D;jstatd.all.policy </span><br><span class="line">-Dcom.sun.management.jmxremote.authenticate&#x3D;false </span><br><span class="line">-Dcom.sun.management.jmxremote.ssl&#x3D;false </span><br><span class="line">-Dcom.sun.management.jmxremote.port&#x3D;8888 </span><br><span class="line">-Xms1g -Xmx1g -jar pure-1.0-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>jconsole</p>
<p>启动java/bin路径下jconsole.exe</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 接口 抽象类 枚举</title>
    <url>/blog/2019/07/01/Java/Java%20%E6%8E%A5%E5%8F%A3%20%E6%8A%BD%E8%B1%A1%E7%B1%BB%20%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>使用接口对行为进行抽象</strong></p>
<p>接口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以含有 变量和方法。但是要注意，接口中的变量会被隐式地指定为public static final变量（并且只能是public static final变量，用private修饰会报编译错误），而方法会被隐式地指定为public abstract方法且只能是public abstract方法（用其他关键字，比如private、protected、static、final等修饰会报编译错误），并且接口中所有的方法不能有具体的实现，也就是说，接口中的方法必须都是抽象方法。从这里可以隐约看出接口和抽象类的区别，接口是一种极度抽象的类型，它比抽象类更加“抽象”，并且一般情况下不在接口中定义变量</span><br></pre></td></tr></table></figure>

<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p><strong>抽象类是用来捕捉子类的通用特性的，包括属性及行为</strong>。</p>
<p>抽象类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果一个类含有抽象方法，则称这个类为抽象类，抽象类必须在类前用abstract关键字修饰。因为抽象类中含有无具体实现的方法，所以不能用抽象类创建对象。抽象方法是一种特殊的方法：它只有声明，而没有具体的实现。因为抽象类中含有无具体实现的方法，所以不能用抽象类创建对象。如果一个类继承抽象类，那么就必须为基类中的抽象方法提供定义。如果不这么做，那导出类也为抽象类。</span><br></pre></td></tr></table></figure>

<p>抽象类和普通类的主要有三点区别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public。</span><br><span class="line">2、抽象类不能用来创建对象；</span><br><span class="line">3、如果一个类继承于一个抽象类，则子类必须实现父类的抽象方法。如果子类没有实现父类的抽象方法，则必须将子类也定义为abstract类</span><br></pre></td></tr></table></figure>

<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>默认继承Enum,不是Object，所以不可继承其他类</p>
<p>由于构造方法私有化，而子类初始化需要调用父类初始化方法，所以不可被继承</p>
<h2 id="异同点"><a href="#异同点" class="headerlink" title="异同点"></a>异同点</h2><p>抽象类和接口相同点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、都是上层的抽象层</span><br><span class="line">2、都不能被实例化</span><br><span class="line">3、都能包含抽象的方法</span><br></pre></td></tr></table></figure>

<p>抽象类和接口不同点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、在抽象类中可以写非抽象的方法，接口中只能有抽象的方法</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 正则表达式</title>
    <url>/blog/2021/05/01/Java/Java%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>String使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* 正则表达式</span><br><span class="line">* . 匹配除&quot;\r\n&quot;之外的任何单个字符。若要匹配包括&quot;\r\n&quot;在内的任意字符，请使用诸如&quot;[\s\S]&quot;之类的模式</span><br><span class="line">* * 匹配除&quot;\r\n&quot;之外的任何单个字符。若要匹配包括&quot;\r\n&quot;在内的任意字符，请使用诸如&quot;[\s\S]&quot;之类的模式</span><br><span class="line">* () 匹配 pattern 并捕获该匹配的子表达式</span><br><span class="line">*&#x2F;</span><br><span class="line">String regex &#x3D; &quot;&#x2F;api&#x2F;(.*)&quot;;</span><br><span class="line"></span><br><span class="line">String url1 &#x3D; &quot;&#x2F;api&#x2F;login&quot;;</span><br><span class="line">String url2 &#x3D; &quot;&#x2F;doc&#x2F;login&quot;;</span><br><span class="line"></span><br><span class="line">System.out.println(url1.matches(regex));&#x2F;&#x2F;true</span><br><span class="line">System.out.println(url2.matches(regex));&#x2F;&#x2F;false</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Ftp-连接池(支持多线程)</title>
    <url>/blog/2019/07/01/Java/Java-Ftp-%E8%BF%9E%E6%8E%A5%E6%B1%A0(%E6%94%AF%E6%8C%81%E5%A4%9A%E7%BA%BF%E7%A8%8B)/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##环境及版本：</p>
<ul>
<li>框架：SpringMVC 5.1.7.RELEASE<pre><code>commons-net 3.6
commons-pool 2 2.7.0</code></pre></li>
</ul>
<p>####1. pom.xml中添加依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- ftp --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-net&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-net&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!-- 使用commons-pool2 实现ftp连接池 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-pool2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.7.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>####2. 配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ftp服务器配置</span><br><span class="line">ftp.host&#x3D;192.168.241.128</span><br><span class="line">ftp.port&#x3D;21</span><br><span class="line">ftp.username&#x3D;ftp_user</span><br><span class="line">ftp.password&#x3D;123</span><br><span class="line">#超时时间(0表示一直连接)</span><br><span class="line">ftp.clientTimeout&#x3D;0</span><br><span class="line">ftp.connectTimeout&#x3D;0</span><br><span class="line">#编码格式</span><br><span class="line">ftp.encoding&#x3D;UTF-8</span><br><span class="line">#缓冲器大小</span><br><span class="line">ftp.bufferSize&#x3D;1024</span><br><span class="line">#每次数据连接之前，ftp client告诉ftp server开通一个端口来传输数据</span><br><span class="line">ftp.passiveMode&#x3D;true</span><br><span class="line">#连接池数量</span><br><span class="line">ftp.defaultpoolsize&#x3D;10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#FTP连接池配置</span><br><span class="line">#最大数</span><br><span class="line">ftpPool.maxTotal&#x3D;50</span><br><span class="line">#最小空闲</span><br><span class="line">ftpPool.minIdle&#x3D;0</span><br><span class="line">#最大空闲</span><br><span class="line">ftpPool.maxIdle&#x3D;50</span><br><span class="line">#最大等待时间</span><br><span class="line">ftpPool.maxWait&#x3D;-1</span><br><span class="line">#池对象耗尽之后是否阻塞,maxWait&lt;0时一直等待</span><br><span class="line">ftpPool.blockWhenExhausted&#x3D;true</span><br><span class="line">#取对象是验证</span><br><span class="line">ftpPool.testOnBorrow&#x3D;true</span><br><span class="line">#回收验证</span><br><span class="line">ftpPool.testOnReturn&#x3D;true</span><br><span class="line">#创建时验证</span><br><span class="line">ftpPool.testOnCreate&#x3D;true</span><br><span class="line">#空闲验证</span><br><span class="line">ftpPool.testWhileIdle&#x3D;false</span><br><span class="line">#后进先出</span><br><span class="line">ftpPool.lifo&#x3D;false</span><br></pre></td></tr></table></figure>
<p>####3. FtpClient工厂类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.longway.busi.component;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.net.ftp.FTP;</span><br><span class="line">import org.apache.commons.net.ftp.FTPClient;</span><br><span class="line">import org.apache.commons.net.ftp.FTPReply;</span><br><span class="line">import org.apache.commons.pool2.BasePooledObjectFactory;</span><br><span class="line">import org.apache.commons.pool2.PooledObject;</span><br><span class="line">import org.apache.commons.pool2.impl.DefaultPooledObject;</span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @description:</span><br><span class="line"> * @title: FTP 工厂</span><br><span class="line"> * @author: lrxc</span><br><span class="line"> * @date: 2019&#x2F;11&#x2F;18 19:12</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">public class FtpClientFactory extends BasePooledObjectFactory&lt;FTPClient&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;ftp.host&#125;&quot;)</span><br><span class="line">    private String host;</span><br><span class="line">    @Value(&quot;$&#123;ftp.port&#125;&quot;)</span><br><span class="line">    private int port;</span><br><span class="line">    @Value(&quot;$&#123;ftp.username&#125;&quot;)</span><br><span class="line">    private String username;</span><br><span class="line">    @Value(&quot;$&#123;ftp.password&#125;&quot;)</span><br><span class="line">    private String password;</span><br><span class="line">    @Value(&quot;$&#123;ftp.clientTimeout&#125;&quot;)</span><br><span class="line">    private int clientTimeout;</span><br><span class="line">    @Value(&quot;$&#123;ftp.connectTimeout&#125;&quot;)</span><br><span class="line">    private int connectTimeout;</span><br><span class="line">    @Value(&quot;$&#123;ftp.encoding&#125;&quot;)</span><br><span class="line">    private String encoding;</span><br><span class="line">    @Value(&quot;$&#123;ftp.bufferSize&#125;&quot;)</span><br><span class="line">    private int bufferSize;</span><br><span class="line">    @Value(&quot;$&#123;ftp.passiveMode&#125;&quot;)</span><br><span class="line">    private boolean passiveMode;</span><br><span class="line"></span><br><span class="line">    private final static Logger log &#x3D; Logger.getLogger(FtpClientFactory.class.getName());</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 创建FtpClient对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public FTPClient create() &#123;</span><br><span class="line">        FTPClient ftpClient &#x3D; new FTPClient();</span><br><span class="line">        ftpClient.setConnectTimeout(connectTimeout);</span><br><span class="line">        try &#123;</span><br><span class="line">            ftpClient.connect(host, port);</span><br><span class="line">            int replyCode &#x3D; ftpClient.getReplyCode();</span><br><span class="line">            if (!FTPReply.isPositiveCompletion(replyCode)) &#123;</span><br><span class="line">                ftpClient.disconnect();</span><br><span class="line">                log.warn(&quot;FTPServer 连接失败,replyCode: &quot; + replyCode);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (!ftpClient.login(username, password)) &#123;</span><br><span class="line">                log.warn(&quot;ftpClient 登录失败： &quot; + username + password);</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);&#x2F;&#x2F;文件类型</span><br><span class="line">            ftpClient.setControlEncoding(encoding);</span><br><span class="line">            ftpClient.setBufferSize(bufferSize);</span><br><span class="line">            if (passiveMode) &#123;</span><br><span class="line">                &#x2F;&#x2F;这个方法的意思就是每次数据连接之前，ftp client告诉ftp server开通一个端口来传输数据</span><br><span class="line">                ftpClient.enterLocalPassiveMode();</span><br><span class="line">            &#125;</span><br><span class="line">            ftpClient.setSoTimeout(clientTimeout);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(&quot;FtpClient 创建错误： &quot; + e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        return ftpClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 用PooledObject封装对象放入池中</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public PooledObject&lt;FTPClient&gt; wrap(FTPClient ftpClient) &#123;</span><br><span class="line">        return new DefaultPooledObject&lt;&gt;(ftpClient);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 销毁FtpClient对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void destroyObject(PooledObject&lt;FTPClient&gt; ftpPooled) &#123;</span><br><span class="line">        if (ftpPooled &#x3D;&#x3D; null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FTPClient ftpClient &#x3D; ftpPooled.getObject();</span><br><span class="line">        try &#123;</span><br><span class="line">            if (ftpClient.isConnected()) &#123;</span><br><span class="line">                ftpClient.logout();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception io) &#123;</span><br><span class="line">            log.error(&quot;销毁FtpClient错误...&quot; + io.toString());</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                ftpClient.disconnect();</span><br><span class="line">            &#125; catch (IOException io) &#123;</span><br><span class="line">                log.error(&quot;销毁FtpClient错误...&quot; + io.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 验证FtpClient对象</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean validateObject(PooledObject&lt;FTPClient&gt; ftpPooled) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            FTPClient ftpClient &#x3D; ftpPooled.getObject();</span><br><span class="line">            return ftpClient.sendNoOp();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            log.error(&quot;验证FtpClient对象错误: &quot; + e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####4. 创建连接池</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.longway.busi.component;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.net.ftp.FTPClient;</span><br><span class="line">import org.apache.commons.pool2.impl.GenericObjectPool;</span><br><span class="line">import org.apache.commons.pool2.impl.GenericObjectPoolConfig;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @description:</span><br><span class="line"> * @title: 官方FTP连接池</span><br><span class="line"> * @author: lrxc</span><br><span class="line"> * @date: 2019&#x2F;12&#x2F;03 19:09</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">public class FtpClientPool &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;ftpPool.maxTotal&#125;&quot;)</span><br><span class="line">    private int maxTotal;</span><br><span class="line">    @Value(&quot;$&#123;ftpPool.minIdle&#125;&quot;)</span><br><span class="line">    private int minIdle;</span><br><span class="line">    @Value(&quot;$&#123;ftpPool.maxIdle&#125;&quot;)</span><br><span class="line">    private int maxIdle;</span><br><span class="line">    @Value(&quot;$&#123;ftpPool.maxWait&#125;&quot;)</span><br><span class="line">    private long maxWait;</span><br><span class="line">    @Value(&quot;$&#123;ftpPool.blockWhenExhausted&#125;&quot;)</span><br><span class="line">    private boolean blockWhenExhausted;</span><br><span class="line">    @Value(&quot;$&#123;ftpPool.testOnBorrow&#125;&quot;)</span><br><span class="line">    private boolean testOnBorrow;</span><br><span class="line">    @Value(&quot;$&#123;ftpPool.testOnReturn&#125;&quot;)</span><br><span class="line">    private boolean testOnReturn;</span><br><span class="line">    @Value(&quot;$&#123;ftpPool.testOnCreate&#125;&quot;)</span><br><span class="line">    private boolean testOnCreate;</span><br><span class="line">    @Value(&quot;$&#123;ftpPool.testWhileIdle&#125;&quot;)</span><br><span class="line">    private boolean testWhileIdle;</span><br><span class="line">    @Value(&quot;$&#123;ftpPool.lifo&#125;&quot;)</span><br><span class="line">    private boolean lifo;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;连接池</span><br><span class="line">    private GenericObjectPool&lt;FTPClient&gt; ftpClientPool;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FtpClientFactory ftpClientFactory;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 初始化连接池</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @PostConstruct &#x2F;&#x2F;加上该注解表明该方法会在bean初始化后调用</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        &#x2F;&#x2F; 初始化对象池配置</span><br><span class="line">        GenericObjectPoolConfig&lt;FTPClient&gt; poolConfig &#x3D; new GenericObjectPoolConfig&lt;FTPClient&gt;();</span><br><span class="line">        poolConfig.setBlockWhenExhausted(blockWhenExhausted);</span><br><span class="line">        poolConfig.setMaxWaitMillis(maxWait);</span><br><span class="line">        poolConfig.setMinIdle(minIdle);</span><br><span class="line">        poolConfig.setMaxIdle(maxIdle);</span><br><span class="line">        poolConfig.setMaxTotal(maxTotal);</span><br><span class="line">        poolConfig.setTestOnBorrow(testOnBorrow);</span><br><span class="line">        poolConfig.setTestOnReturn(testOnReturn);</span><br><span class="line">        poolConfig.setTestOnCreate(testOnCreate);</span><br><span class="line">        poolConfig.setTestWhileIdle(testWhileIdle);</span><br><span class="line">        poolConfig.setLifo(lifo);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 初始化对象池</span><br><span class="line">        ftpClientPool &#x3D; new GenericObjectPool&lt;FTPClient&gt;(ftpClientFactory, poolConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FTPClient borrowObject() throws Exception &#123;</span><br><span class="line">        return ftpClientPool.borrowObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void returnObject(FTPClient ftpClient) &#123;</span><br><span class="line">        ftpClientPool.returnObject(ftpClient);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####5. 封装ftp上传下载工具类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.longway.busi.component;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.io.IOUtils;</span><br><span class="line">import org.apache.commons.net.ftp.FTP;</span><br><span class="line">import org.apache.commons.net.ftp.FTPClient;</span><br><span class="line">import org.apache.commons.net.ftp.FTPFile;</span><br><span class="line">import org.apache.commons.net.ftp.FTPReply;</span><br><span class="line">import org.apache.commons.net.io.CopyStreamAdapter;</span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @description:</span><br><span class="line"> * @title: 实现文件上传下载</span><br><span class="line"> * @author: lrxc</span><br><span class="line"> * @date: 2019&#x2F;11&#x2F;19 14:09</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">public class FtpClientTemplate &#123;</span><br><span class="line"></span><br><span class="line">    private final static Logger log &#x3D; Logger.getLogger(FtpClientTemplate.class.getName());</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FtpClientPool ftpClientPool;</span><br><span class="line"></span><br><span class="line">    &#x2F;***</span><br><span class="line">     * 上传Ftp文件</span><br><span class="line">     *</span><br><span class="line">     * @param localFile 本地文件路径</span><br><span class="line">     * @param remotePath 上传服务器路径 - (&#x2F;abc&#x2F;1.txt)</span><br><span class="line">     * @return true or false</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public boolean uploadFile(File localFile, String remotePath) &#123;</span><br><span class="line">        FTPClient ftpClient &#x3D; null;</span><br><span class="line">        BufferedInputStream inStream &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;从池中获取对象</span><br><span class="line">            ftpClient &#x3D; ftpClientPool.borrowObject();</span><br><span class="line">            &#x2F;&#x2F; 验证FTP服务器是否登录成功</span><br><span class="line">            int replyCode &#x3D; ftpClient.getReplyCode();</span><br><span class="line">            if (!FTPReply.isPositiveCompletion(replyCode)) &#123;</span><br><span class="line">                log.warn(&quot;FTP服务器校验失败, 上传replyCode:&#123;&#125;&quot; + replyCode+&quot;   &quot;+localFile);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;切换到上传目录</span><br><span class="line">            if (!ftpClient.changeWorkingDirectory(remotePath)) &#123;</span><br><span class="line">                &#x2F;&#x2F;如果目录不存在创建目录</span><br><span class="line">                String[] dirs &#x3D; remotePath.split(&quot;&#x2F;&quot;);</span><br><span class="line">                String tempPath &#x3D; &quot;&quot;;</span><br><span class="line">                for (String dir : dirs) &#123;</span><br><span class="line">                    if (null &#x3D;&#x3D; dir || &quot;&quot;.equals(dir)) continue;</span><br><span class="line">                    tempPath +&#x3D; &quot;&#x2F;&quot; + dir;</span><br><span class="line">                    if (!ftpClient.changeWorkingDirectory(tempPath)) &#123;</span><br><span class="line">                        if (!ftpClient.makeDirectory(tempPath)) &#123;</span><br><span class="line">                            return false;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            ftpClient.changeWorkingDirectory(tempPath);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            inStream &#x3D; new BufferedInputStream(new FileInputStream(localFile));</span><br><span class="line">            &#x2F;&#x2F;设置上传文件的类型为二进制类型</span><br><span class="line">            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;尝试上传三次</span><br><span class="line">            for (int j &#x3D; 0; j &lt; 3; j++) &#123;</span><br><span class="line">                &#x2F;&#x2F;避免进度回调过于频繁</span><br><span class="line">                final int[] temp &#x3D; &#123;0&#125;;</span><br><span class="line">                &#x2F;&#x2F;上传进度监控</span><br><span class="line">                ftpClient.setCopyStreamListener(new CopyStreamAdapter() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void bytesTransferred(long totalBytesTransferred, int bytesTransferred, long streamSize) &#123;</span><br><span class="line">                        int percent &#x3D; (int) (totalBytesTransferred * 100 &#x2F; localFile.length());</span><br><span class="line">                        if (temp[0] &lt; percent) &#123;</span><br><span class="line">                            temp[0] &#x3D; percent;</span><br><span class="line">                            log.info(&quot;↑↑   上传进度    &quot; + percent + &quot;     &quot; + localFile.getAbsolutePath());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                boolean success &#x3D; ftpClient.storeFile(localFile.getName(), inStream);</span><br><span class="line">                if (success) &#123;</span><br><span class="line">                    log.info(&quot;文件上传成功! &quot; + localFile.getName());</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(&quot;文件上传失败&quot; + localFile.getName() + &quot;  重试 &quot; + j);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(&quot;文件上传多次仍失败&quot; + localFile.getName());</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;文件上传错误! &quot; + localFile.getName(), e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            IOUtils.closeQuietly(inStream);</span><br><span class="line">            &#x2F;&#x2F;将对象放回池中</span><br><span class="line">            ftpClientPool.returnObject(ftpClient);</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 下载文件</span><br><span class="line">     *</span><br><span class="line">     * @param remotePath FTP服务器文件目录</span><br><span class="line">     * @param fileName   需要下载的文件名称</span><br><span class="line">     * @param localPath  下载后的文件路径</span><br><span class="line">     * @return true or false</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public boolean downloadFile(String remotePath, String fileName, String localPath) &#123;</span><br><span class="line">        FTPClient ftpClient &#x3D; null;</span><br><span class="line">        OutputStream outputStream &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            ftpClient &#x3D; ftpClientPool.borrowObject();</span><br><span class="line">            &#x2F;&#x2F; 验证FTP服务器是否登录成功</span><br><span class="line">            int replyCode &#x3D; ftpClient.getReplyCode();</span><br><span class="line">            if (!FTPReply.isPositiveCompletion(replyCode)) &#123;</span><br><span class="line">                log.warn(&quot;FTP服务器校验失败, 下载replyCode:&#123;&#125;&quot; + replyCode + &quot;  &quot; + localPath + &quot;&#x2F;&quot; + fileName);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 切换FTP目录</span><br><span class="line">            ftpClient.changeWorkingDirectory(remotePath);</span><br><span class="line">            FTPFile[] ftpFiles &#x3D; ftpClient.listFiles();</span><br><span class="line">            for (FTPFile file : ftpFiles) &#123;</span><br><span class="line">                if (fileName.equalsIgnoreCase(file.getName())) &#123;</span><br><span class="line">                    &#x2F;&#x2F;保存至本地路径</span><br><span class="line">                    File localFile &#x3D; new File(localPath + &quot;&#x2F;&quot; + file.getName());</span><br><span class="line">                    &#x2F;&#x2F;创建父级目录</span><br><span class="line">                    if (!localFile.getParentFile().exists()) &#123;</span><br><span class="line">                        localFile.getParentFile().mkdirs();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;尝试下载三次</span><br><span class="line">                    for (int i &#x3D; 0; i &lt; 3; i++) &#123;</span><br><span class="line">                        &#x2F;&#x2F;避免进度回调过于频繁</span><br><span class="line">                        final int[] temp &#x3D; &#123;0&#125;;</span><br><span class="line">                        &#x2F;&#x2F;下载进度监控</span><br><span class="line">                        ftpClient.setCopyStreamListener(new CopyStreamAdapter() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void bytesTransferred(long totalBytesTransferred, int bytesTransferred, long streamSize) &#123;</span><br><span class="line">                                int percent &#x3D; (int) (totalBytesTransferred * 100 &#x2F; file.getSize());</span><br><span class="line">                                if (temp[0] &lt; percent) &#123;</span><br><span class="line">                                    temp[0] &#x3D; percent;</span><br><span class="line">                                    log.info(&quot;  ↓↓ 下载进度    &quot; + percent + &quot;     &quot; + localFile.getAbsolutePath());</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line"></span><br><span class="line">                        outputStream &#x3D; new FileOutputStream(localFile);</span><br><span class="line">                        boolean success &#x3D; ftpClient.retrieveFile(file.getName(), outputStream);</span><br><span class="line">                        outputStream.flush();</span><br><span class="line">                        if (success) &#123;</span><br><span class="line">                            log.info(&quot;文件下载成功! &quot; + localFile.getName());</span><br><span class="line">                            return true;</span><br><span class="line">                        &#125;</span><br><span class="line">                        log.info(&quot;文件下载失败&quot; + localFile.getName() + &quot;  重试 &quot; + i);</span><br><span class="line">                    &#125;</span><br><span class="line">                    log.info(&quot;文件下载多次仍失败&quot; + localFile.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;文件下载错误! &quot; + remotePath + &quot;&#x2F;&quot; + fileName, e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            IOUtils.closeQuietly(outputStream);</span><br><span class="line">            ftpClientPool.returnObject(ftpClient);</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>####6. 测试类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.bxlt.test;</span><br><span class="line"></span><br><span class="line">import com.bxlt.component.FtpClientTemplate;</span><br><span class="line">import org.junit.Test;</span><br><span class="line">import org.junit.runner.RunWith;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.test.context.ContextConfiguration;</span><br><span class="line">import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">@RunWith(SpringJUnit4ClassRunner.class)&#x2F;&#x2F;用于在JUnit环境下提供Spring Test框架的功能。</span><br><span class="line">@ContextConfiguration(locations &#x3D; &#123;&quot;classpath*:*.xml&quot;&#125;)&#x2F;&#x2F;用来加载配置文件</span><br><span class="line">public class FtpTest &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FtpClientTemplate ftpClientTemplate;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void download() &#123;</span><br><span class="line">        ftpClientTemplate.downloadFile(&quot;&#x2F;aaa&quot;, &quot;gaofeng.tgz&quot;, &quot;E:\\aaa&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void upload() &#123;</span><br><span class="line">        File file &#x3D; new File(&quot;E:\\aaa\\gaofeng.tgz&quot;);</span><br><span class="line">        ftpClientTemplate.uploadFile(file, &quot;&#x2F;abc&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-泛型</title>
    <url>/blog/2019/07/01/Java/Java-%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一. 常用通配符<br><strong>都是通配符，没有区别，只是为了提高阅读性，使用A-Z中任意一个字母都是可以的</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常用的 T，E，K，V，？</span><br><span class="line">？ 表示不确定的 java 类型</span><br><span class="line">T (type) 表示具体的一个java类型</span><br><span class="line">K V (key value) 分别代表java键值中的Key Value</span><br><span class="line">E (element) 代表Element</span><br></pre></td></tr></table></figure>
<p>二. 泛型方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class FanChild&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    private T obj;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 泛型烦方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void add(T e) &#123;</span><br><span class="line">        this.obj &#x3D; e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T get() &#123;</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    FanChild&lt;String&gt; fan &#x3D; new FanChild&lt;String&gt;();</span><br><span class="line">    fan.add(&quot;123&quot;);</span><br><span class="line">    String s &#x3D; fan.get();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>三. 泛型静态方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Fan &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 泛型静态方法</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static &lt;T&gt; T add(T t) &#123;</span><br><span class="line">        return t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String add &#x3D; Fan.add(&quot;123&quot;);</span><br><span class="line">    System.out.println(add);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Map HashMap 获取Key值的方法</title>
    <url>/blog/2019/07/01/Java/Map%20HashMap%20%E8%8E%B7%E5%8F%96Key%E5%80%BC%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />




<pre><code>List&lt;Map&lt;String, Fragment&gt;&gt; mDatas = new ArrayList&lt;&gt;();

    Map&lt;String, Fragment&gt; map1 = new ArrayMap&lt;&gt;();
    map1.put(&quot;首页&quot;, OneFragment.newInstance());

    Map&lt;String, Fragment&gt; map2 = new ArrayMap&lt;&gt;();
    map2.put(&quot;闪贷大全&quot;, TwoFragment.newInstance());

    Map&lt;String, Fragment&gt; map3 = new ArrayMap&lt;&gt;();
    map3.put(&quot;个人中心&quot;, ThreeFragment.newInstance());

    mDatas.add(map1);
    mDatas.add(map2);
    mDatas.add(map3);



Iterator&lt;String&gt; iterator = mDatas.get(position).keySet().iterator();
iterator.next()  //Key
mDatas.get(position).get(iterator.next())  //Value</code></pre><h4 id="方法1：keySet"><a href="#方法1：keySet" class="headerlink" title="方法1：keySet()"></a>方法1：keySet()</h4><pre><code>Map&lt;Character, Integer&gt; map = new HashMap&lt;&gt;();

for (char key : map.keySet()) {
    res += key + &quot;&quot; + map.get(key);
}
System.out.println(res);

Iterator&lt;Character&gt; iterator11 = map.keySet().iterator();
while (iterator11.hasNext()) {
    Character key = iterator11.next();
    res += key + &quot;&quot; + map.get(key);
}
System.out.println(res);</code></pre><h4 id="方法2：entrySet-效率高"><a href="#方法2：entrySet-效率高" class="headerlink" title="方法2：entrySet() 效率高"></a>方法2：entrySet() 效率高</h4><pre><code>for (Map.Entry&lt;Character, Integer&gt; entry : map.entrySet()) {
    res += entry.getKey() + &quot;&quot; + entry.getValue();
}
System.out.println(res);

Iterator&lt;Map.Entry&lt;Character, Integer&gt;&gt; iterator2 = map.entrySet().iterator();
while (iterator2.hasNext()) {
    Map.Entry&lt;Character, Integer&gt; entry = iterator2.next();
    res += entry.getKey() + &quot;&quot; + entry.getValue();
}
System.out.println(res);</code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-Generator 自动生成代码</title>
    <url>/blog/2019/07/01/Java/Mybatis-Generator%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##环境及版本：</p>
<ul>
<li>mybatis-generator：mybatis-generator-core-1.4.0-bundle.zip</li>
<li>jdk: 1.8</li>
</ul>
<h1 id="一-命令直接使用"><a href="#一-命令直接使用" class="headerlink" title="一 命令直接使用"></a>一 命令直接使用</h1><p> ##　1. 下载mybatis-generator</p>
<p>官网：<a href="https://github.com/mybatis/generator/releases" target="_blank" rel="noopener">https://github.com/mybatis/generator/releases</a></p>
<p>##　2. 下载数据库连接驱动</p>
<p><strong>数据库驱动和mybatis-generator放在同一路径下</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mysql下载地址,下载mysql-connector-java-5.1.49.tar.gz</span></span><br><span class="line">https://dev.mysql.com/downloads/connector/j/5.1.html</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> oracle下载地址,下载ojdbc6.jar</span></span><br><span class="line">https://www.oracle.com/database/technologies/jdbcdriver-ucp-downloads.html</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-4bb124d645a92f98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image-20200814193235582.png"></p>
<h2 id="3-编写generatorConfig-xml文件"><a href="#3-编写generatorConfig-xml文件" class="headerlink" title="3. 编写generatorConfig.xml文件"></a>3. 编写generatorConfig.xml文件</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml</span> <span class="string">version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE</span> <span class="string">generatorConfiguration</span></span><br><span class="line">  <span class="attr">PUBLIC</span> <span class="string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line">  <span class="meta">"http</span>:<span class="string">//mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"><span class="attr">&lt;generatorConfiguration&gt;</span></span><br><span class="line">    <span class="attr">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">    <span class="meta">&lt;classPathEntry</span>    <span class="string">location="ojdbc6.jar"/&gt;</span></span><br><span class="line">    <span class="meta">&lt;context</span> <span class="string">id="DB2Tables"    targetRuntime="MyBatis3"&gt;</span></span><br><span class="line">        <span class="attr">&lt;commentGenerator&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name="suppressDate" value="true"/&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name="suppressAllComments" value="true"/&gt;</span></span><br><span class="line">        <span class="attr">&lt;/commentGenerator&gt;</span></span><br><span class="line">        <span class="attr">&lt;!--数据库链接地址账号密码--&gt;</span></span><br><span class="line">        <span class="meta">&lt;jdbcConnection</span> <span class="string">driverClass="oracle.jdbc.driver.OracleDriver" connectionURL="jdbc:oracle:thin:@10.10.98.200:1521/test" userId="123" password="123"&gt;</span></span><br><span class="line">        <span class="attr">&lt;/jdbcConnection&gt;</span></span><br><span class="line">        <span class="attr">&lt;javaTypeResolver&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name="forceBigDecimals" value="false"/&gt;</span></span><br><span class="line">        <span class="attr">&lt;/javaTypeResolver&gt;</span></span><br><span class="line">        <span class="attr">&lt;!--生成Model类存放位置--&gt;</span></span><br><span class="line">        <span class="meta">&lt;javaModelGenerator</span> <span class="string">targetPackage="com.model" targetProject="src"&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name="enableSubPackages" value="true"/&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name="trimStrings" value="true"/&gt;</span></span><br><span class="line">        <span class="attr">&lt;/javaModelGenerator&gt;</span></span><br><span class="line">        <span class="attr">&lt;!--生成映射文件存放位置--&gt;</span></span><br><span class="line">        <span class="meta">&lt;sqlMapGenerator</span> <span class="string">targetPackage="com.mapping" targetProject="src"&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name="enableSubPackages" value="true"/&gt;</span></span><br><span class="line">        <span class="attr">&lt;/sqlMapGenerator&gt;</span></span><br><span class="line">        <span class="attr">&lt;!--生成Dao类存放位置--&gt;</span></span><br><span class="line">        <span class="meta">&lt;javaClientGenerator</span> <span class="string">type="XMLMAPPER" targetPackage="com.dao" targetProject="src"&gt;</span></span><br><span class="line">            <span class="meta">&lt;property</span> <span class="string">name="enableSubPackages" value="true"/&gt;</span></span><br><span class="line">        <span class="attr">&lt;/javaClientGenerator&gt;</span></span><br><span class="line">        <span class="attr">&lt;!--生成对应表及类名(跟数据库表保持一致)--&gt;</span></span><br><span class="line">        <span class="meta">&lt;table</span> <span class="string">tableName="ADD_QUOTA_BUSINESS_NODATE" domainObjectName="AddQuotaBusinessNoDate" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"&gt;&lt;/table&gt;</span></span><br><span class="line">        <span class="meta">&lt;table</span> <span class="string">tableName="ADD_QUOTA_FINANCE_NODATE" domainObjectName="AddQuotaFinanceNoDate" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"&gt;&lt;/table&gt;</span></span><br><span class="line">    <span class="attr">&lt;/context&gt;</span></span><br><span class="line"><span class="attr">&lt;/generatorConfiguration&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>配置说明：</strong></p>
<p>​    location：<strong>对应数据库的驱动名称</strong><br>​    jdbcConnection：<strong>数据库连接信息</strong><br>​    targetPackage：<strong>生成代码的包名</strong><br>​    targetProject：<strong>生成代码的相对路径(必须存在)</strong><br>​    table：<strong>每个对应一个表名，实体类名称</strong></p>
<h2 id="4-生成代码"><a href="#4-生成代码" class="headerlink" title="4. 生成代码"></a>4. 生成代码</h2><p>mybatis-generator目录下cmd执行即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar mybatis-generator-core-1.4.0.jar -configfile generatorConfig.xml -overwrite</span><br></pre></td></tr></table></figure>

<h1 id="二-Maven方式"><a href="#二-Maven方式" class="headerlink" title="二 Maven方式"></a>二 Maven方式</h1>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-cmd-Runtime-getRuntime()-exec-使用</title>
    <url>/blog/2019/07/01/Java/Java-cmd-Runtime-getRuntime()-exec-%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##一 使用方式</p>
<ol>
<li><p>基本操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;显示目录结构</span><br><span class="line">String s11 &#x3D; &quot;cmd &#x2F;c dir&quot;;</span><br><span class="line">&#x2F;&#x2F;新窗口执行dir---start</span><br><span class="line">String s12 &#x3D; &quot;cmd &#x2F;c start dir&quot;;</span><br><span class="line">&#x2F;&#x2F;新窗口执行dir后不关闭</span><br><span class="line">String s13 &#x3D; &quot;cmd &#x2F;k start dir&quot;;</span><br></pre></td></tr></table></figure></li>
<li><p>执行多条命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;显示目录结构，然后显示路径</span><br><span class="line">String s21 &#x3D; &quot;cmd &#x2F;c dir &amp; cd&quot;;</span><br><span class="line">&#x2F;&#x2F;进入E盘，进入ftp目录，显示路径</span><br><span class="line">String s22 &#x3D; &quot;cmd &#x2F;c e: &amp; cd ftp &amp; cd</span><br><span class="line">&#x2F;&#x2F;新窗口执行---start</span><br><span class="line">String s23 &#x3D; &quot;cmd &#x2F;c start dir &amp; cd&quot;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;文件路径</span><br><span class="line">File file &#x3D; new File(&quot;D:&#x2F;Debug&#x2F;b.bat&quot;);</span><br><span class="line">String s31 &#x3D; &quot;cmd &#x2F;c &quot; + file.getAbsolutePath();</span><br><span class="line">&#x2F;&#x2F; start  新窗口执行</span><br><span class="line">String s32 &#x3D; &quot;cmd &#x2F;c start &quot; + file.getAbsolutePath();</span><br></pre></td></tr></table></figure>
<p>脚本b.bat 内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:</span><br><span class="line">cd ftp</span><br><span class="line">dir</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动指定软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;可以打开新cmd窗口，能用git命令</span><br><span class="line">String s41 &#x3D; &quot;cmd &#x2F;c start \&quot;myname\&quot; \&quot;C:\\Java\\PortableGit\\bin\\bash.exe\&quot;&quot;;</span><br><span class="line">&#x2F;&#x2F;可以打开新cmd窗口，但是不能用git命令</span><br><span class="line">String s42 &#x3D; &quot;cmd &#x2F;c start \&quot;C:\\Java\\PortableGit\\bin\\bash.exe\&quot;&quot;;</span><br><span class="line">&#x2F;&#x2F;直接打开，部分软件能成功，cmd窗口会卡住</span><br><span class="line">String s43 &#x3D; &quot;\&quot;C:\\Java\\PortableGit\\bin\\bash.exe\&quot;&quot;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动指定软件并传递参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;重点( -c 是启动参数 ) --  启动指定软件，并传递命令( -c 后面用双引号，表示一个命令)</span><br><span class="line">String s44 &#x3D; &quot;\&quot;C:\\Java\\PortableGit\\bin\\bash.exe\&quot; -c \&quot;git --version\&quot;&quot;;</span><br><span class="line">&#x2F;&#x2F;同上 -- 但是加了 start 后有问题</span><br><span class="line">String[] s45 &#x3D; &#123;&quot;\&quot;C:\\Java\\PortableGit\\bin\\bash.exe\&quot;&quot;,&quot;-c&quot;,&quot;start&quot;,&quot;git --version&quot;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>需要指定path环境变量envp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String s51&#x3D;&quot;cmd &#x2F;c git --version&quot;;</span><br><span class="line">&#x2F;&#x2F;配置path环境变量</span><br><span class="line">String[] envp &#x3D; &#123;&quot;Path&#x3D;C:\\Java\\PortableGit\\bin&quot;&#125;;</span><br><span class="line">&#x2F;&#x2F;执行</span><br><span class="line">Runtime.getRuntime().exec(s51,envp);</span><br></pre></td></tr></table></figure>
<p>##二 代码集成</p>
</li>
<li><p>代码使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;执行命令</span><br><span class="line">Process process &#x3D; Runtime.getRuntime().exec(cmd);</span><br><span class="line">&#x2F;&#x2F;等待执行完毕</span><br><span class="line">process.waitFor();</span><br><span class="line">&#x2F;&#x2F;执行结果，0是正常</span><br><span class="line">int value &#x3D; process.exitValue();</span><br><span class="line">System.out.println(value);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出信息</span><br><span class="line">InputStreamReader is &#x3D; new InputStreamReader(process.getInputStream(), Charset.forName(&quot;GBK&quot;));</span><br><span class="line">BufferedReader br &#x3D; new BufferedReader(is);</span><br><span class="line">String line;</span><br><span class="line">while ((line &#x3D; br.readLine()) !&#x3D; null) &#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;错误信息</span><br><span class="line">is &#x3D; new InputStreamReader(process.getErrorStream(), Charset.forName(&quot;GBK&quot;));</span><br><span class="line">br &#x3D; new BufferedReader(is);</span><br><span class="line">while ((line &#x3D; br.readLine()) !&#x3D; null) &#123;</span><br><span class="line">    System.out.println(line);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;关闭连接(最好放在finally中)</span><br><span class="line">process.destroy();</span><br></pre></td></tr></table></figure></li>
<li><p>ProcessBuilder 执行命令，打开软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    &#x2F;&#x2F;启动 windows 的计算器程序，第一个参数必须是可执行程序</span><br><span class="line">    String[] cmd1 &#x3D; &#123;&quot;C:&#x2F;Java&#x2F;PortableGit&#x2F;bin&#x2F;bash.exe&quot;, &quot;-c&quot;, &quot;git&quot;&#125;;</span><br><span class="line">    &#x2F;** 创建ProcessBuilder对象，设置指令列表*&#x2F;</span><br><span class="line">    ProcessBuilder processBuilder &#x3D; new ProcessBuilder(cmd1);</span><br><span class="line">    processBuilder.redirectErrorStream(true);</span><br><span class="line">    Process process &#x3D; processBuilder.start();</span><br><span class="line">    InputStream in &#x3D; process.getInputStream();</span><br><span class="line">    byte[] re &#x3D; new byte[1024];</span><br><span class="line">    while (in.read(re) !&#x3D; -1) &#123;</span><br><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&gt;&quot; + new String(re, Charset.forName(&quot;GBK&quot;)));</span><br><span class="line">    &#125;</span><br><span class="line">    in.close();</span><br><span class="line">    if (process.isAlive()) &#123;</span><br><span class="line">        process.waitFor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3 .   只能打开软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    Desktop desktop &#x3D; Desktop.getDesktop();</span><br><span class="line">    File file &#x3D; new File(&quot;C:&#x2F;Windows&#x2F;system32&#x2F;cmd.exe&quot;);</span><br><span class="line">    desktop.open(file);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>##三 完整代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.*;</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Process process &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;**-----基本命令-------**&#x2F;</span><br><span class="line">            String s11 &#x3D; &quot;cmd &#x2F;c dir&quot;;</span><br><span class="line">            &#x2F;&#x2F;新窗口执行dir---start</span><br><span class="line">            String s12 &#x3D; &quot;cmd &#x2F;c start dir&quot;;</span><br><span class="line">            &#x2F;&#x2F;新窗口执行dir后不关闭</span><br><span class="line">            String s13 &#x3D; &quot;cmd &#x2F;k start dir&quot;;</span><br><span class="line"></span><br><span class="line">            &#x2F;**-----多条命令-------**&#x2F;</span><br><span class="line">            String s21 &#x3D; &quot;cmd &#x2F;c dir &amp; cd&quot;;</span><br><span class="line">            String s22 &#x3D; &quot;cmd &#x2F;c e: &amp; cd ftp &amp; cd&quot;;</span><br><span class="line">            &#x2F;&#x2F;新窗口执行---start</span><br><span class="line">            String s23 &#x3D; &quot;cmd &#x2F;c start dir &amp; cd&quot;;</span><br><span class="line"></span><br><span class="line">            &#x2F;**-----bat脚本-------**&#x2F;</span><br><span class="line">            File file &#x3D; new File(&quot;D:&#x2F;Debug&#x2F;b.bat&quot;);</span><br><span class="line">            String s31 &#x3D; &quot;cmd &#x2F;c &quot; + file.getAbsolutePath();</span><br><span class="line">            String s32 &#x3D; &quot;cmd &#x2F;c start &quot; + file.getAbsolutePath();</span><br><span class="line"></span><br><span class="line">            &#x2F;**------启动指定软件------**&#x2F;</span><br><span class="line">            &#x2F;&#x2F;可以打开新cmd窗口，能用git命令</span><br><span class="line">            String s41 &#x3D; &quot;cmd &#x2F;c start \&quot;myname\&quot; \&quot;C:\\Java\\PortableGit\\bin\\bash.exe\&quot;&quot;;</span><br><span class="line">            &#x2F;&#x2F;可以打开新cmd窗口，但是不能用git命令</span><br><span class="line">            String s42 &#x3D; &quot;cmd &#x2F;c start \&quot;C:\\Java\\PortableGit\\bin\\bash.exe\&quot;&quot;;</span><br><span class="line">            &#x2F;&#x2F;直接打开，部分成功，会卡住</span><br><span class="line">            String s43 &#x3D; &quot;\&quot;C:\\Java\\PortableGit\\bin\\bash.exe\&quot;&quot;;</span><br><span class="line">            &#x2F;&#x2F;重点( -c ) --  启动指定软件，并传递命令( -c 后面用双引号，表示一个命令)</span><br><span class="line">            String s44 &#x3D; &quot;\&quot;C:\\Java\\PortableGit\\bin\\bash.exe\&quot; -c \&quot;git --version\&quot;&quot;;</span><br><span class="line">            &#x2F;&#x2F;同上 -- 但是加了 start 后有问题</span><br><span class="line">            String[] s45 &#x3D; &#123;&quot;\&quot;C:\\Java\\PortableGit\\bin\\bash.exe\&quot;&quot;, &quot;-c&quot;, &quot;start&quot;, &quot;git --version&quot;&#125;;</span><br><span class="line"></span><br><span class="line">            &#x2F;**------需要指定path环境变量envp------**&#x2F;</span><br><span class="line">            String s51 &#x3D; &quot;cmd &#x2F;c git --version&quot;;</span><br><span class="line">            &#x2F;&#x2F;配置path环境变量</span><br><span class="line">            String[] envp &#x3D; &#123;&quot;Path&#x3D;C:\\Java\\PortableGit\\bin&quot;&#125;;</span><br><span class="line"></span><br><span class="line">            process &#x3D; Runtime.getRuntime().exec(s45);</span><br><span class="line">            process.waitFor();</span><br><span class="line">            int value &#x3D; process.exitValue();</span><br><span class="line">            System.out.println(value);</span><br><span class="line"></span><br><span class="line">            InputStreamReader is &#x3D; new InputStreamReader(process.getInputStream(), Charset.forName(&quot;GBK&quot;));</span><br><span class="line">            BufferedReader br &#x3D; new BufferedReader(is);</span><br><span class="line">            String line;</span><br><span class="line">            while ((line &#x3D; br.readLine()) !&#x3D; null) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            is &#x3D; new InputStreamReader(process.getErrorStream(), Charset.forName(&quot;GBK&quot;));</span><br><span class="line">            br &#x3D; new BufferedReader(is);</span><br><span class="line">            while ((line &#x3D; br.readLine()) !&#x3D; null) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            &#x2F;&#x2F;关闭连接</span><br><span class="line">            if (process !&#x3D; null &amp;&amp; process.isAlive()) &#123;</span><br><span class="line">                process.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main2(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            List&lt;String&gt; list &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">            &#x2F;&#x2F;启动 windows 的计算器程序，第一个参数必须是可执行程序</span><br><span class="line">&#x2F;&#x2F;            paramList.add(&quot;C:\\Windows\\System32\\calc.exe&quot;);</span><br><span class="line">            String[] cmd &#x3D; &#123;&quot;C:&#x2F;Windows&#x2F;system32&#x2F;cmd.exe&quot;, &quot;&#x2F;c&quot;, &quot;dir&quot;&#125;;</span><br><span class="line">            String[] cmd1 &#x3D; &#123;&quot;C:&#x2F;Java&#x2F;PortableGit&#x2F;bin&#x2F;bash.exe&quot;, &quot;-c&quot;, &quot;git&quot;&#125;;</span><br><span class="line"></span><br><span class="line">            list.add(&quot;cmd&quot;);</span><br><span class="line">            list.add(&quot;&#x2F;c&quot;);</span><br><span class="line">            list.add(&quot;start&quot;);</span><br><span class="line">            list.add(&quot;\&quot;&quot; + &quot;cmd.exe&quot; + &quot;\&quot;&quot;);</span><br><span class="line">            list.add(&quot;\&quot;&quot; + &quot;C:&#x2F;Windows&#x2F;system32&#x2F;cmd.exe&quot; + &quot;\&quot;&quot;);</span><br><span class="line">&#x2F;&#x2F;            list.add(&quot;\&quot;&quot; + &quot;Bootstrapper.exe&quot; + &quot;\&quot;&quot;);</span><br><span class="line">&#x2F;&#x2F;            list.add(&quot;\&quot;&quot; + &quot;C:&#x2F;Program Files (x86)&#x2F;Enterprise Vault&#x2F;Bootstrapper.exe&quot; + &quot;\&quot;&quot;);</span><br><span class="line">            list.add(&quot; &amp; &quot;);</span><br><span class="line">            list.add(&quot;dir&quot;);</span><br><span class="line"></span><br><span class="line">            &#x2F;** 创建ProcessBuilder对象，设置指令列表*&#x2F;</span><br><span class="line">            ProcessBuilder processBuilder &#x3D; new ProcessBuilder(cmd1);</span><br><span class="line">            processBuilder.redirectErrorStream(true);</span><br><span class="line">            Process process &#x3D; processBuilder.start();</span><br><span class="line"></span><br><span class="line">            InputStream in &#x3D; process.getInputStream();</span><br><span class="line">            byte[] re &#x3D; new byte[1024];</span><br><span class="line">            while (in.read(re) !&#x3D; -1) &#123;</span><br><span class="line">                System.out.println(&quot;&#x3D;&#x3D;&gt;&quot; + new String(re, Charset.forName(&quot;GBK&quot;)));</span><br><span class="line">            &#125;</span><br><span class="line">            in.close();</span><br><span class="line">            if (process.isAlive()) &#123;</span><br><span class="line">                process.waitFor();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main3(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Desktop desktop &#x3D; Desktop.getDesktop();</span><br><span class="line">            File file &#x3D; new File(&quot;C:&#x2F;Windows&#x2F;system32&#x2F;cmd.exe&quot;);</span><br><span class="line">            desktop.open(file);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>####参考文章：<br><a href="https://juejin.im/entry/5ba46a576fb9a05d3b336b43" target="_blank" rel="noopener">https://juejin.im/entry/5ba46a576fb9a05d3b336b43</a><br><a href="https://blog.walterlv.com/post/cmd-startup-arguments.html" target="_blank" rel="noopener">https://blog.walterlv.com/post/cmd-startup-arguments.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>PLSQL免安装Oracle客户端及问题</title>
    <url>/blog/2020/07/01/Java/PLSQL%E5%85%8D%E5%AE%89%E8%A3%85Oracle%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%8A%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<ol>
<li>PLSQL 官网下载<br><a href="https://www.allroundautomations.com/plsqldev.html" target="_blank" rel="noopener">https://www.allroundautomations.com/plsqldev.html</a><br><img src="https://upload-images.jianshu.io/upload_images/2803682-11234706e2971fe1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>2.Oracle InstantClient 下载<br><a href="http://www.oracle.com/technetwork/database/database-technologies/instant-client/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/database/database-technologies/instant-client/downloads/index.html</a></p>
<ol start="3">
<li>安装PLSQL，然后解压instantclient-basic压缩包<br>打开Configure–Preferences,设置如下<br><img src="https://upload-images.jianshu.io/upload_images/2803682-42612feaefc700e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>4.切记，这个运行库一定要加，否则各种问题。。。<br><img src="https://upload-images.jianshu.io/upload_images/2803682-7159ce7f52190360.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>5.问题总结<br> 问题一： make sure you have the 64 bits Oracle Client installed<br><img src="https://upload-images.jianshu.io/upload_images/2803682-2f0433b5e4ec9820.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>解决方法:上面第四条的运行库！！！</p>
<p>问题二：Initialization error<br><img src="https://upload-images.jianshu.io/upload_images/2803682-7cc7ad2d95dee7e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>解决方法：上面第三条的打开Configure–Preferences配置</p>
]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 命令</title>
    <url>/blog/2020/07/01/Java/Redis%20%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>redis常用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis&gt; keys * 				#查看所有key</span><br><span class="line">redis&gt; set keyname keyvalue	#设置key和value</span><br><span class="line">redis&gt; get keyname  		#根据key获取value</span><br><span class="line"></span><br><span class="line">redis&gt; expire keyname 30	# 设置过期时间为 30 秒</span><br><span class="line">(integer) 1</span><br><span class="line">redis&gt; ttl keyname			# 查看剩余过期时间</span><br><span class="line">(integer) 23</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven 打包常用命令</title>
    <url>/blog/2020/07/01/Java/Maven%20%E6%89%93%E5%8C%85%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="maven-command"><a href="#maven-command" class="headerlink" title="maven command"></a>maven command</h2><ol>
<li>打包</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打包跳过测试</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dspring.test.spip&#x3D;true</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>打包指定环境</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认使用配置</span><br><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active:  $&#123;spring.profiles.active&#125;</span><br></pre></td></tr></table></figure>

<p>maven 打包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn clean package -Pdev</span><br></pre></td></tr></table></figure>

<p>启动jar指定环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar my.jar --spring.profiles.active&#x3D;dev</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot  日期格式化</title>
    <url>/blog/2019/07/01/Java/SpringBoot%20%20%E6%97%A5%E6%9C%9F%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>#　Springboot 日期格式化</p>
<p>1 DateTimeFormat 将String转换成Date</p>
<ul>
<li><p>前端给后端传值时用,参数为param时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@DateTimeFormat(pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;)</span><br><span class="line">private Date date;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>2 JsonFormat 将Date转换成String</p>
<ul>
<li><p>前端给后端传值时用,参数为json时</p>
</li>
<li><p>后端返回给前端时 </p>
</li>
<li><p>数据库获取时间类型映射实体类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@JsonFormat(pattern &#x3D; &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone &#x3D; &quot;GMT+8&quot;)</span><br><span class="line">private Date testTime;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>3 实在不行两个都加上</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Docker部署</title>
    <url>/blog/2019/07/01/Java/SpringBoot-Docker%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##环境及版本：</p>
<ul>
<li>Docker：</li>
<li>Maven:  </li>
<li>Jdk:</li>
</ul>
<p>打包的环境必须有docker环境</p>
<ol>
<li><p>新建springboot项目,不需要额外依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@RestController</span><br><span class="line">public class App &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;show&quot;)</span><br><span class="line">    public Object show() &#123;</span><br><span class="line">        return &quot;Hello Docker&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>打jar包 ‘spring-boot-docker-1.0.jar’，并上传至服务器</p>
</li>
<li><p>在jar包所在目录，新建文件’DockerFile’,内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 基于那个镜像，本地不存在将会从 DockerHub 下载</span><br><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">#在宿主机的&#x2F;var&#x2F;lib&#x2F;docker目录下创建一个临时文件并把它链接到tomcat容器的工作目录&#x2F;tmp目录</span><br><span class="line">VOLUME &#x2F;tmp</span><br><span class="line"># 复制文件到容器，并重命名(需修改自己app名称)</span><br><span class="line">ADD spring-boot-docker-1.0.jar app.jar</span><br><span class="line"># 容器启动后执行的命令</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd&#x3D;file:&#x2F;dev&#x2F;.&#x2F;urandom&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;]</span><br></pre></td></tr></table></figure></li>
<li><p>构建docker镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 格式：docker build -t 镜像名(:标签) Dockerfile的相对位置</span><br><span class="line">docker build -t springboot:0.0.1 .</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-ab2e193e01239762.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>查看所有镜像<br><img src="https://upload-images.jianshu.io/upload_images/2803682-8f3119f50df26aa4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>构建容器并启动docker项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-d: 后台运行容器，并返回容器ID</span><br><span class="line">#-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line">#--name&#x3D;&quot;demo&quot;: 为容器指定一个名称</span><br><span class="line">#-v: 映射主机目录到容器,格式为：主机(宿主)路径:容器路径</span><br><span class="line"></span><br><span class="line">#springboot:0.0.1 &#x3D;&#x3D;》 镜像名(:标签)，</span><br><span class="line">docker run -d -p 8080:8080 springboot:0.0.1</span><br><span class="line">docker run -d -p 8090:8080 --name demo -v &#x2F;root&#x2F;log:&#x2F;log springboot:0.0.1</span><br></pre></td></tr></table></figure>
<p>输入docker ps 查看所有运行的docker项目<br><img src="https://upload-images.jianshu.io/upload_images/2803682-dac8de435a05ac5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>4 浏览器访问spring项目即可<br><img src="https://upload-images.jianshu.io/upload_images/2803682-7b393c4ae8a79ac5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot 集成ElasticSearch</title>
    <url>/blog/2019/07/01/Java/SpringBoot%20%E9%9B%86%E6%88%90ElasticSearch/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li>springboot：2.1.6.RELEASE</li>
<li>elasticsearch: 6.5.3</li>
</ul>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>目前 Elasticsearch 有很多第三方 Java 客户端如 TransportClient，Jest, Spring Data Elasticsearch（Spring Data 对 Elasticsearch 的整合）,还有官方的Java REST Client，而Java REST Client 有两种版本:</p>
<ol>
<li>Java Low Level REST Client</li>
<li>Java High Level REST Client</li>
</ol>
<p>Java high-level REST client 是目前官方推荐使用的客户端</p>
<h2 id="一-Springboot-Data集成"><a href="#一-Springboot-Data集成" class="headerlink" title="一 Springboot Data集成"></a>一 Springboot Data集成</h2><ol>
<li><p>pom文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--工具类--&gt;    </span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.5.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>application配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">192.168</span><span class="number">.109</span><span class="number">.134</span><span class="string">:9300</span>   <span class="comment">#代码是9300端口</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">my-application</span>          <span class="comment">#和./config/elasticsearch.yml的cluster-name名字相同</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>实体类</p>
<p>@Document 注解主要声明索引名、类型名</p>
<p>@Field 注解主要声明字段对应ES的类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"person"</span>, type = <span class="string">"person"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//id字段是必须的，可以不写注解@Id</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Keyword)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field</span>(type = FieldType.Integer)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>repostory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Person</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">PersonRepositoryTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonRepository repo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="number">1L</span>, <span class="string">"刘备"</span>, <span class="number">18</span>);</span><br><span class="line">        Person save = repo.save(person);</span><br><span class="line">        log.info(<span class="string">"【save】= &#123;&#125;"</span>, save);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试批量新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; personList = Lists.newArrayList();</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="number">2L</span>, <span class="string">"曹操"</span>, <span class="number">20</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="number">3L</span>, <span class="string">"孙权"</span>, <span class="number">19</span>));</span><br><span class="line">        personList.add(<span class="keyword">new</span> Person(<span class="number">4L</span>, <span class="string">"诸葛亮"</span>, <span class="number">16</span>));</span><br><span class="line">        Iterable&lt;Person&gt; people = repo.saveAll(personList);</span><br><span class="line">        log.info(<span class="string">"【people】= &#123;&#125;"</span>, people);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        repo.findById(<span class="number">1L</span>).ifPresent(person -&gt; &#123;</span><br><span class="line">            person.setName(person.getName() + <span class="string">"\n更新更新更新更新更新"</span>);</span><br><span class="line">            Person save = repo.save(person);</span><br><span class="line">            log.info(<span class="string">"【save】= &#123;&#125;"</span>, save);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 主键删除</span></span><br><span class="line">        repo.deleteById(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象删除</span></span><br><span class="line">        repo.findById(<span class="number">2L</span>).ifPresent(person -&gt; repo.delete(person));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 批量删除</span></span><br><span class="line">        repo.deleteAll(repo.findAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试普通查询，按年龄倒序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        repo.findAll(Sort.by(Sort.Direction.DESC, <span class="string">"age"</span>))</span><br><span class="line">                .forEach(person -&gt; log.info(<span class="string">"&#123;&#125; 生日: &#123;&#125;"</span>, person.getName(), person.getAge()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义查询，根据年龄范围查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customSelectRangeOfAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        repo.findByAgeBetween(<span class="number">18</span>, <span class="number">19</span>).forEach(person -&gt; log.info(<span class="string">"&#123;&#125; 年龄: &#123;&#125;"</span>, person.getName(), person.getAge()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="二-Springboot集成Java-high-level-REST-client"><a href="#二-Springboot集成Java-high-level-REST-client" class="headerlink" title="二 Springboot集成Java high-level REST client"></a>二 Springboot集成Java high-level REST client</h2><ol>
<li><p>pom 文件</p>
<p>   必须的依赖</p>
   <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;elasticsearch&gt;7.3.0&lt;/elasticsearch&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- elasticsearch --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;elasticsearch&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- elasticsearch-rest-client --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;elasticsearch-rest-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;elasticsearch&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!-- elasticsearch-rest-high-level-client --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;elasticsearch&#125;&lt;/version&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;elasticsearch-rest-client&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;/exclusions&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;!--工具类--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.5.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>application 配置文件</p>
   <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">demo:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="number">192.168</span><span class="number">.109</span><span class="number">.134</span><span class="string">:9200</span>   <span class="comment">#这个是9200端口</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">my-application</span>          <span class="comment">#和/config/elasticsearch.yml的cluster-name名字相同</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>具体代码实现： <a href="https://github.com/Lrxc/spring-boot-demo/tree/master/demo-elasticsearch-rest-high-level-client" target="_blank" rel="noopener">https://github.com/Lrxc/spring-boot-demo/tree/master/demo-elasticsearch-rest-high-level-client</a></p>
</li>
</ol>
<h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ol>
<li><p>elasticsearch Validation Failed: 1: type is missing;</p>
<p>ES服务器版本过低，升级到7.x以上</p>
</li>
</ol>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://zhuanlan.zhihu.com/p/42763550" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/42763550</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Oracle 存储过程</title>
    <url>/blog/2019/07/01/Java/SpringBoot-Oracle%20%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="环境及版本："><a href="#环境及版本：" class="headerlink" title="环境及版本："></a>环境及版本：</h2><ul>
<li>SpringBoot： 2.x</li>
<li>Oracle : 11c</li>
</ul>
<ol>
<li><p>无参数的存储过程</p>
<p>创建存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create or replace procedure TEST01</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line(&#39;hello word&#39;);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>

<p>Mapper.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;show1&quot; statementType&#x3D;&quot;CALLABLE&quot; &gt;</span><br><span class="line">   &#123;call TEST01&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>Mapper.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void show1()</span><br></pre></td></tr></table></figure>

<p>Controller.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void show1() &#123;</span><br><span class="line">	mapper.show1();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>有参数的存储过程<br> 创建存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   CREATE OR REPLACE </span><br><span class="line">   procedure TEST02(name in varchar,res out varchar)</span><br><span class="line">   as</span><br><span class="line">   begin</span><br><span class="line">     dbms_output.put_line(&#39;name&#x3D;&#39;||name);</span><br><span class="line">     res:&#x3D;&#39;name&#x3D;&#39;||name;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>

<p>Mapper.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   &lt;select id&#x3D;&quot;show2&quot; statementType&#x3D;&quot;CALLABLE&quot; resultType&#x3D;&quot;java.util.Map&quot;&gt;</span><br><span class="line">       &#123;call TEST02 (#&#123;name,mode&#x3D;IN,jdbcType&#x3D;VARCHAR&#125;,#&#123;res,mode&#x3D;OUT,jdbcType&#x3D;VARCHAR&#125;)&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>Mapper.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void show2()</span><br></pre></td></tr></table></figure>

<p>Controller.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void show2() &#123;</span><br><span class="line">	Map&lt;String,Object&gt; map&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">	map.put(&quot;name&quot;,&quot;wahhh&quot;);</span><br><span class="line">    batchManageMapper.show2(map);</span><br><span class="line">    System.out.println(map.get(&quot;res&quot;));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>存储过程的结果集调用<br>创建存储过程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE </span><br><span class="line">Procedure TEST03(res out sys_refcursor)</span><br><span class="line">As</span><br><span class="line">begin</span><br><span class="line">	open res for select * from BOND_INFO WHERE BOND_CODE&#x3D;&#39;111799852.IB&#39;;</span><br><span class="line">End;</span><br></pre></td></tr></table></figure>

<p>Mapper.xml</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;resultMap id&#x3D;&quot;resultMap&quot; type&#x3D;&quot;cn.com.pojo.BondInfo&quot;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;bondCode&quot; column&#x3D;&quot;BOND_CODE&quot;&#x2F;&gt;</span><br><span class="line">        &lt;result property&#x3D;&quot;bondName&quot; column&#x3D;&quot;BOND_NAME&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id&#x3D;&quot;show3&quot; statementType&#x3D;&quot;CALLABLE&quot; resultType&#x3D;&quot;java.util.Map&quot;&gt;</span><br><span class="line">        &#123;call TEST03 (#&#123;res,mode&#x3D;OUT,jdbcType&#x3D;CURSOR,javaType&#x3D;java.sql.ResultSet,resultMap&#x3D;resultMap&#125;)&#125;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>

<p>Mapper.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;BondInfo&gt; show3(Map&lt;String, Object&gt; map);</span><br></pre></td></tr></table></figure>

<p>Controller.java</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void show3() &#123;</span><br><span class="line">  Map&lt;String,Object&gt; map&#x3D;new HashMap&lt;&gt;();</span><br><span class="line">  batchManageMapper.show3(map);</span><br><span class="line">  List&lt;BondInfo&gt; bondInfos1 &#x3D; (List&lt;BondInfo&gt;) map.get(&quot;res&quot;);</span><br><span class="line">  System.out.println(bondInfos1.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Thymeleaf-js-css静态资源</title>
    <url>/blog/2019/07/01/Java/SpringBoot-Thymeleaf-js-css%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##环境及版本：</p>
<ul>
<li>Idea：2019.2</li>
<li>springboot: 2.1.7.RELEASE</li>
</ul>
<p>一 基本使用<br>1 引入pom.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;!--thymeleaf--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<p>2 新建controller</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#123;page&#125;&quot;)</span><br><span class="line">public String showPage(@PathVariable String page) &#123;</span><br><span class="line">    System.out.println(page);</span><br><span class="line">    return page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3 resources目录下新建文件夹templates，然后新建index.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">i am index.html</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>4 总体目录结构<br><img src="https://upload-images.jianshu.io/upload_images/2803682-cc8ad33b5b3e2c96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>浏览器输入 <a href="http://localhost:8080/index" target="_blank" rel="noopener">http://localhost:8080/index</a> 即可看到内容<br>二 配合静态资源使用</p>
<ol>
<li>resources目录下新建文件夹static，然后新建my.js<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function ($) &#123;</span><br><span class="line">    $.fn.alertObject &#x3D; function () &#123;</span><br><span class="line">        alert(&#39;调用自定义js文件中的自定义方法&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure></li>
<li>index.html 引入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;js&#x2F;my.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">i am index.html</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
3 再次运行，就会有加载js了<br>直接访问<a href="http://localhost:8080/js/my.js" target="_blank" rel="noopener">http://localhost:8080/js/my.js</a> 也能加载出js内容<br>三 thymeleaf自定义使用<br>1 thymeleaf访问格式<br>目前controller直接访问<a href="http://localhost:8080/index即可，那是因为thymeleaf默认的访问路径就是resources下的templates,而后缀默认.html" target="_blank" rel="noopener">http://localhost:8080/index即可，那是因为thymeleaf默认的访问路径就是resources下的templates,而后缀默认.html</a><br>源码如下：<br><img src="https://upload-images.jianshu.io/upload_images/2803682-be40f49b0ec63bdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2 修改thymeleaf的默认格式<br>templates下新建html文件夹，把index.html 放进去<br><img src="https://upload-images.jianshu.io/upload_images/2803682-ea199242a6647f1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>3 新建application.yml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  #thymeleaf 自定义视图配置</span><br><span class="line">  thymeleaf:</span><br><span class="line">    prefix: classpath:&#x2F;templates&#x2F;html&#x2F;</span><br><span class="line">    suffix: .html</span><br><span class="line">    #开发时关闭缓存,不然没法看到实时页面</span><br><span class="line">    cache: false</span><br><span class="line">    mode: HTML5</span><br></pre></td></tr></table></figure></li>
<li>再次运行,<br>偷偷告诉你们，suffix后缀直接修改为jsp，即可使用jsp格式了。。。网上thymeleaf使用jsp费了牛劲了。。。<br><a href="http://localhost:8080/index" target="_blank" rel="noopener">http://localhost:8080/index</a><br>四 js 、css路径自定义<br>1 官方路径<br>上面新建static/js/my.js就可以正常引用，那就因为静态资源的加载路径默认有四个：<br><img src="https://upload-images.jianshu.io/upload_images/2803682-bcf96575797ac3e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2 自定义<br>resources下新建custom/js，把my.js移动到下面<br>3 修改application.yml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  #静态资源访问格式 对比正常路径需要加上me  &#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8080&#x2F;me&#x2F;js&#x2F;my.js</span><br><span class="line">  mvc:</span><br><span class="line">#    static-path-pattern: &#x2F;me&#x2F;**</span><br><span class="line">  #自定义静态资源路径 &#x2F;&#x2F;http:&#x2F;&#x2F;localhost:8080&#x2F;js&#x2F;my.js</span><br><span class="line">  resources:</span><br><span class="line">    static-locations: classpath:&#x2F;custom&#x2F;</span><br></pre></td></tr></table></figure>
4 访问<a href="http://localhost:8080/index即可" target="_blank" rel="noopener">http://localhost:8080/index即可</a></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-常用注解说明</title>
    <url>/blog/2019/07/01/Java/SpringBoot-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>@RequestBody这个一般处理的是在ajax请求中声明contentType: “application/json; charset=utf-8”时候。也就是json数据或者xml(我没用过这个，用的是json)</p>
<p>@RequestParam这个一般就是在ajax里面没有声明contentType的时候，为默认的。。。urlencode格式时，用这个。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-常见问题汇总</title>
    <url>/blog/2019/07/01/Java/SpringBoot-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>1 异常：org.apache.ibatis.binding.BindingException<br>原因：maven项目中 静态资源打包被拦截<br>解决：pom.xml build中添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 放行静态资源 --&gt;</span><br><span class="line">&lt;resources&gt;</span><br><span class="line">	&lt;resource&gt;</span><br><span class="line">		&lt;directory&gt;src&#x2F;main&#x2F;java&lt;&#x2F;directory&gt;</span><br><span class="line">		&lt;includes&gt;</span><br><span class="line">			&lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">		&lt;&#x2F;includes&gt;</span><br><span class="line">	&lt;&#x2F;resource&gt;</span><br><span class="line">	&lt;resource&gt;</span><br><span class="line">		&lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">		&lt;includes&gt;</span><br><span class="line">			&lt;include&gt;**&#x2F;*.xml&lt;&#x2F;include&gt;</span><br><span class="line">			&lt;include&gt;**&#x2F;*.properties&lt;&#x2F;include&gt;</span><br><span class="line">		&lt;&#x2F;includes&gt;</span><br><span class="line">	&lt;&#x2F;resource&gt;</span><br><span class="line">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>String 格式刷</title>
    <url>/blog/2019/07/01/Java/String%20%E6%A0%BC%E5%BC%8F%E5%88%B7/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />



<h3 id="格式刷"><a href="#格式刷" class="headerlink" title="格式刷"></a>格式刷</h3><pre><code>//这样1就输出01，前面自动补0, 11还是输出11不变    
System.out.println(String.format(&quot;%02d&quot;,x)); //x是你要输出的整数
//“%02d”是指定输出格式，%作先导标记，0表示自动补0, 2的意思是最小长度为2（如果用4，则1输出0001），d表示整数。


String s=String.format(&quot;%.2f&quot;,d)表示小数点后任意两位小数

//
String str=String.format(&quot;%d-%02d-%02d&quot;, mYear, mMonth, mDay)</code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Svn TortoiseSvn</title>
    <url>/blog/2020/07/01/Java/Svn%20TortoiseSvn/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h1 id="一-代码回滚"><a href="#一-代码回滚" class="headerlink" title="一 代码回滚"></a>一 代码回滚</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 右击要回滚的文件或文件夹, TortoiseSVN -&gt; Show log	</span><br><span class="line">2. 选择你要恢复到(revert)的版本。要全部回滚到某个版本就是用了Revert to this revision. </span><br><span class="line">3. 如果你想撤销(undo)一个段版本范围，选择第一个，按住Shift键选中最后一个。</span><br><span class="line">	如果需要选择一些分离的版本，请使用Ctrl键。</span><br><span class="line">	选中后右键再选择 Revert Changes from this revision.</span><br><span class="line">	这两种的区别是第一个很彻底，第二种只修改选中的部分</span><br><span class="line">4. 现在的文件已经revert(恢复)成了你想要的历史状态，重新commit即可。</span><br></pre></td></tr></table></figure>
<h1 id="二-常见问题"><a href="#二-常见问题" class="headerlink" title="二 常见问题"></a>二 常见问题</h1><h4 id="1-TortoiseSVN全局忽略文件或文件夹"><a href="#1-TortoiseSVN全局忽略文件或文件夹" class="headerlink" title="1. TortoiseSVN全局忽略文件或文件夹"></a>1. TortoiseSVN全局忽略文件或文件夹</h4><ol>
<li><p>右键任意位置，找到【TortoiseSVN】→【Settings】，在弹出窗口中，在【General】→【Global ignore pattrn】，这里有一个输入框，目前添加后不生效，直接点击下面的【Edit】按钮</p>
</li>
<li><p>在配置文件里找到【global-ignores =】这一行，在后面添加想要忽略的文件或文件夹，规则时间用空格分隔，支持正则规则</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">global-ignores &#x3D; *.o *.lo *.la *.al .libs *.so *.so.[0-9]* *.a *.pyc *.pyo __pycache__</span><br><span class="line"> *.rej *~ #*# .#* .*.swp .DS_Store [Tt]humbs.db</span><br><span class="line"> .settings *&#x2F;.settings&#x2F;* .idea *&#x2F;.idea&#x2F;* target *&#x2F;target&#x2F;* </span><br><span class="line"> *.classpath *.project *.iml *.log *.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>保存即可生效</p>
</li>
</ol>
<h4 id="2-SVN更换新仓库地址-以及UUID不同的解决方式"><a href="#2-SVN更换新仓库地址-以及UUID不同的解决方式" class="headerlink" title="2. SVN更换新仓库地址, 以及UUID不同的解决方式"></a>2. SVN更换新仓库地址, 以及UUID不同的解决方式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--修改本地uuid </span><br><span class="line">sqlite3 .svn&#x2F;wc.db </span><br><span class="line">sqlite&gt; select * from REPOSITORY; #一般是只有一条记录, 修改后会有两条 </span><br><span class="line">sqlite&gt; update REPOSITORY set uuid&#x3D;&quot;bdbd6e13-965c-4da7-a4da-d4840425081e&quot; where id&#x3D;1; </span><br><span class="line">sqlite&gt; .exit </span><br><span class="line"></span><br><span class="line">svn update即可</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Config</category>
      </categories>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/blog/2019/07/01/Java/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>三种基本且常用排序</p>
<ol>
<li>冒泡</li>
<li>选择</li>
<li>快速</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 排序算法</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Algorithm &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr &#x3D; &#123;1, 3, 5, 7, 9, 2, 4, 8, 6, 0&#125;;</span><br><span class="line"></span><br><span class="line">        print(arr);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        maopao(arr);</span><br><span class="line">&#x2F;&#x2F;        xuanzhe(arr);</span><br><span class="line">        kuaisu(arr, 0, arr.length - 1);</span><br><span class="line"></span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 冒泡</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void maopao(int[] arr) &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">            for (int j &#x3D; 0; j &lt; arr.length - 1 - i; j++) &#123;</span><br><span class="line">                &#x2F;&#x2F;当前与后一位比较</span><br><span class="line">                if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class="line">                    swap(arr, j, j + 1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 选择</span><br><span class="line">     * 在未排序序列中找到最小（大）元素，存放到未排序序列的起始位置。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void xuanzhe(int[] arr) &#123;</span><br><span class="line">        for (int i &#x3D; 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class="line">            int min &#x3D; i;</span><br><span class="line">            for (int j &#x3D; i + 1; j &lt; arr.length; j++) &#123;</span><br><span class="line">                if (arr[min] &gt; arr[j]) &#123;&#x2F;&#x2F; 寻找最小的数</span><br><span class="line">                    min &#x3D; j;&#x2F;&#x2F; 将最小数的索引保存</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (min !&#x3D; i) &#123;</span><br><span class="line">                swap(arr, i, min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 快速</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void kuaisu(int[] arr, int left, int right) &#123;</span><br><span class="line">        &#x2F;&#x2F;已经不满足条件就可以不用递归了</span><br><span class="line">        if (left &gt;&#x3D; right) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int start &#x3D; left;&#x2F;&#x2F;起点下标</span><br><span class="line">        int end &#x3D; right;&#x2F;&#x2F;终点下标</span><br><span class="line">        int key &#x3D; arr[left];&#x2F;&#x2F;把第一个数作为基准点</span><br><span class="line"></span><br><span class="line">        while (start &lt; end) &#123;</span><br><span class="line">            while (start &lt; end &amp;&amp; arr[end] &gt;&#x3D; key) &#123;&#x2F;&#x2F;右指针先走，找到小于基准数的停止</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            while (start &lt; end &amp;&amp; arr[start] &lt;&#x3D; key) &#123;&#x2F;&#x2F;左指针后走，找到大于基准数的停</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(start + &quot;  &quot; + end);</span><br><span class="line">            if (start &lt; end) &#123;&#x2F;&#x2F;如果左右指针在未相遇时都找到了目标，则交换位置</span><br><span class="line">                swap(arr, start, end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        swap(arr, left, start);&#x2F;&#x2F;把小于基准数的移到左边，把大于基准数的移到右边</span><br><span class="line">        kuaisu(arr, left, start - 1);&#x2F;&#x2F;继续处理左边的，这里是一个递归的过程</span><br><span class="line">        kuaisu(arr, start + 1, right);&#x2F;&#x2F;继续处理右边的 ，这里是一个递归的过程</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 交换</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static void swap(int[] arr, int i, int j) &#123;</span><br><span class="line">        int temp &#x3D; arr[i];</span><br><span class="line">        arr[i] &#x3D; arr[j];</span><br><span class="line">        arr[j] &#x3D; temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 打印输出</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static void print(int[] arr) &#123;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Gitlab Nginx 使用</title>
    <url>/blog/2018/07/01/Linux/Docker%20Gitlab%20Nginx%20%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>#安装环境及版本：</p>
<ul>
<li>系统：ubuntu 18.04 LTS</li>
<li>Gitlab: 最新版本 latest</li>
<li>镜像加速器：阿里云 <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></li>
<li>安装 docker：<a href="https://www.jianshu.com/p/254aea65eb06" target="_blank" rel="noopener">https://www.jianshu.com/p/254aea65eb06</a></li>
</ul>
<h1 id="一-docker-gitlab"><a href="#一-docker-gitlab" class="headerlink" title="一 docker gitlab"></a>一 docker gitlab</h1><ol>
<li>从 docker 的镜像仓库中下载 gitlab 社区版的镜像<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull gitlab&#x2F;gitlab-ce:latest</span><br></pre></td></tr></table></figure>
2 启动gitlab<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; publish  # 端口映射</span><br><span class="line">&#x2F;&#x2F; -p 宿主机端口：容器端口  # 开放容器端口到宿主端口</span><br><span class="line">sudo docker run \</span><br><span class="line">  --publish 443:443 --publish 80:80\</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --volume &#x2F;srv&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab \</span><br><span class="line">  --volume &#x2F;srv&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab \</span><br><span class="line">  --volume &#x2F;srv&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab \</span><br><span class="line">  gitlab&#x2F;gitlab-ce:latest</span><br></pre></td></tr></table></figure>
参数说明<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo docker run --detach \ #  -d # 后台运行</span><br><span class="line">  --hostname gitlab.example.com \   # 设置主机名或域名</span><br><span class="line">  --publish 443:443 --publish 80:80 \ # 本地端口的映射</span><br><span class="line">  --name gitlab \     # gitlab-ce 的镜像运行成为一个容器，这里是对容器的命名</span><br><span class="line">  --restart always \  # 设置重启方式，always 代表一直开启，服务器开机后也会自动开启的</span><br><span class="line">  --volume &#x2F;srv&#x2F;gitlab&#x2F;config:&#x2F;etc&#x2F;gitlab \   # 将 gitlab 的配置文件目录映射到 &#x2F;srv&#x2F;gitlab&#x2F;config 目录中</span><br><span class="line">  --volume &#x2F;srv&#x2F;gitlab&#x2F;logs:&#x2F;var&#x2F;log&#x2F;gitlab \ # 将 gitlab 的log文件目录映射到 &#x2F;srv&#x2F;gitlab&#x2F;logs 目录中</span><br><span class="line">  --volume &#x2F;srv&#x2F;gitlab&#x2F;data:&#x2F;var&#x2F;opt&#x2F;gitlab \ # 将 gitlab 的数据文件目录映射到 &#x2F;srv&#x2F;gitlab&#x2F;data 目录中</span><br><span class="line">  gitlab&#x2F;gitlab-ce:latest  # 需要运行的镜像</span><br></pre></td></tr></table></figure>
3 浏览器访问：<br>查看是否启动成功<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
输出内容如下：<br><img src="https://upload-images.jianshu.io/upload_images/2803682-d61bfad5d9baeba8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>然后浏览器访问：宿主机ip(ubuntu ip):80<br><img src="https://upload-images.jianshu.io/upload_images/2803682-1a2bb5eab9607aab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>参考：<a href="https://juejin.im/post/5cc1df885188252d6c43fd91" target="_blank" rel="noopener">https://juejin.im/post/5cc1df885188252d6c43fd91</a></p>
<h1 id="二-docker-nginx"><a href="#二-docker-nginx" class="headerlink" title="二 docker nginx"></a>二 docker nginx</h1><p>官网:<a href="https://www.runoob.com/docker/docker-install-nginx.html" target="_blank" rel="noopener">https://www.runoob.com/docker/docker-install-nginx.html</a></p>
<ol>
<li>运行命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; -d # 后台运行</span><br><span class="line">&#x2F;&#x2F; -p 宿主机端口：容器端口  # 开放容器端口到宿主端口</span><br><span class="line">$ docker run -d -p 91:80 nginx</span><br></pre></td></tr></table></figure>
外网访问<br><a href="http://docker宿主机ip:91" target="_blank" rel="noopener">http://docker宿主机ip:91</a><br><img src="https://upload-images.jianshu.io/upload_images/2803682-9f2e7e02b0a294a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<h1 id="二-自定义docker镜像-DockerFile"><a href="#二-自定义docker镜像-DockerFile" class="headerlink" title="二 自定义docker镜像 DockerFile"></a>二 自定义docker镜像 DockerFile</h1><p>1.新建DockerFile文件,输入内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &#39;&lt;h1&gt;Hello, Docker!&lt;&#x2F;h1&gt;&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>构建容器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;my 后面 有个空格和点</span><br><span class="line">docker build -t nginx:my .</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-81a8fc846b6996b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>运行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 92:80 nginx:my</span><br></pre></td></tr></table></figure></li>
<li>浏览器访问：<a href="http://docker宿主机ip:92" target="_blank" rel="noopener">http://docker宿主机ip:92</a><br><img src="https://upload-images.jianshu.io/upload_images/2803682-44bdf2fefb9eea42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 常用命令</title>
    <url>/blog/2018/07/01/Linux/Docker%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<hr>
<hr>
<!-- -->



<h2 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h2><p>修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;4oekmmf9.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>阿里加速:<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
<h2 id="一-镜像"><a href="#一-镜像" class="headerlink" title="一 镜像"></a>一 镜像</h2><p>下载官方镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>

<p>自定义构建镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#格式：docker build -t 镜像名(:标签) Dockerfile的位置</span><br><span class="line">docker build -t springboot:0.0.1 .</span><br></pre></td></tr></table></figure>

<p>导入导出镜像，导出一个是镜像ID，一个是容器ID。导入都是镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#导出是镜像ID(推荐)</span><br><span class="line">docker save &gt;&#x2F;temp&#x2F;my.tar nginx:latest	#nginx:latest&#x3D;&gt;镜像ID:标签</span><br><span class="line">docker load &lt;&#x2F;temp&#x2F;my.tar</span><br><span class="line"></span><br><span class="line">#导出是容器ID(镜像被删除的情况，或则容器有修改的情况)</span><br><span class="line">docker export &gt;&#x2F;temp&#x2F;my.tar 24db3058414e	#24db3058414e&#x3D;&gt;容器ID</span><br><span class="line">docker import &#x2F;temp&#x2F;my.tar nginx:0.0.1		#nginx:3.6.3&#x3D;&gt;标注镜像名(:标签)</span><br></pre></td></tr></table></figure>

<p>删除镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看所有镜像</span><br><span class="line">docker images</span><br><span class="line">#删除之前必须停止并删除其容器</span><br><span class="line">docker rmi 镜像ID</span><br></pre></td></tr></table></figure>

<h2 id="二-容器"><a href="#二-容器" class="headerlink" title="二 容器"></a>二 容器</h2><p>构建容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-d: 后台运行容器，并返回容器ID</span><br><span class="line">#-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line">#--name&#x3D;&quot;demo&quot;: 为容器指定一个名称</span><br><span class="line">#-v: 映射主机目录到容器,格式为：主机(宿主)路径:容器路径</span><br><span class="line"></span><br><span class="line">#springboot:0.0.1 &#x3D;&#x3D;》 镜像名(:标签)，</span><br><span class="line">docker run -d -p 8080:8080 springboot:0.0.1</span><br><span class="line">docker run -d -p 8090:8080 --name demo -v &#x2F;root&#x2F;log:&#x2F;log springboot:0.0.1</span><br></pre></td></tr></table></figure>

<p>启动停止容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start&#x2F;stop&#x2F;restart 容器ID&#x2F;容器名称</span><br><span class="line"></span><br><span class="line">#查看运行中容器</span><br><span class="line">docker ps </span><br><span class="line">#查看所有容器</span><br><span class="line">docker ps -a</span><br><span class="line">#查看指定容器的详细状态</span><br><span class="line">docker top 容器ID&#x2F;容器名称</span><br></pre></td></tr></table></figure>

<p>进入容器内部</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#不同机器略有不同，以下三种都试试</span><br><span class="line">docker exec -it 容器ID&#x2F;容器名称 &#x2F;bin&#x2F;bash</span><br><span class="line">docker exec -it 容器ID&#x2F;容器名称 bash</span><br><span class="line">docker exec -it 容器ID&#x2F;容器名称 sh</span><br><span class="line"></span><br><span class="line">#退出容器</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>删除容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看所有容器</span><br><span class="line">docker ps -a</span><br><span class="line">#删除容器</span><br><span class="line">docker rm -f 容器ID&#x2F;容器名称</span><br></pre></td></tr></table></figure>

<p>查看容器运行日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker logs -f 容器ID&#x2F;容器名称</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Crontab 定时任务</title>
    <url>/blog/2018/07/01/Linux/Linux%20Crontab%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />




<h2 id="环境及版本"><a href="#环境及版本" class="headerlink" title="环境及版本"></a>环境及版本</h2><ul>
<li>Linux: Ubuntu 18.0.4</li>
<li></li>
</ul>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ol>
<li><p>格式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -l		显示所有定时任务</span><br><span class="line">crontab -e		编辑定时任务</span><br><span class="line">crontab -r		删除所有定时任务</span><br></pre></td></tr></table></figure>
</li>
<li><p>语法</p>
<p>我们用<strong>crontab -e</strong>进入当前用户的工作表编辑，是常见的vim界面。每行是一条命令</p>
<p>crontab的命令构成为 时间+动作，其时间有<strong>分、时、日、月、周</strong>五种</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">每隔一分钟执行一次</span></span><br><span class="line">* * * * * xxx.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">每年1月1日 1时1分 执行</span></span><br><span class="line">1 1 1 1 * xxx.sh</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="新建测试"><a href="#新建测试" class="headerlink" title="新建测试"></a>新建测试</h2><ol>
<li><p>新建测试脚本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#vim /root/test.sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'hello'</span> &gt;&gt; /root/info.log</span><br></pre></td></tr></table></figure>
</li>
<li><p>赋权</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 777 test.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建定时任务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#crontab- e</span></span><br><span class="line">* * * * * /root/run.sh  <span class="comment">#每分钟执行一次</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看效果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//实时查看日志</span><br><span class="line">tail -f /root/info.log</span><br><span class="line">//每隔一分钟打印一遍</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 常用命令</title>
    <url>/blog/2018/07/01/Linux/Linux%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
## 一. 查找文件

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis java</span><br><span class="line">which java</span><br><span class="line"><span class="meta">#</span><span class="bash">看看对应软链接</span></span><br><span class="line">ls -lrt /usr/bin/java</span><br><span class="line"><span class="meta">#</span><span class="bash">看看对应软链接</span></span><br><span class="line">ls -lrt /etc/alternatives/java</span><br></pre></td></tr></table></figure>

<h2 id="二-进程查看"><a href="#二-进程查看" class="headerlink" title="二. 进程查看"></a>二. 进程查看</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进程</span></span><br><span class="line">ps -ef|grep java</span><br><span class="line"><span class="meta">#</span><span class="bash">内存占用(进程id)(按E切换内存单位)</span></span><br><span class="line">top -p 8080</span><br><span class="line"><span class="meta">#</span><span class="bash">结束进程(进程id)</span></span><br><span class="line">kill -9 8080</span><br></pre></td></tr></table></figure>
<h2 id="三-硬件信息"><a href="#三-硬件信息" class="headerlink" title="三. 硬件信息"></a>三. 硬件信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">linux 内核版本</span></span><br><span class="line">uname -a</span><br><span class="line">cat /proc/version</span><br><span class="line"><span class="meta">#</span><span class="bash">系统发行版本</span></span><br><span class="line">lsb_release -a</span><br><span class="line">cat /etc/os-release</span><br><span class="line">cat /etc/issue</span><br><span class="line"><span class="meta">#</span><span class="bash">cpu</span></span><br><span class="line">lscpu</span><br><span class="line"><span class="meta">#</span><span class="bash">内存</span></span><br><span class="line">free -h</span><br><span class="line"><span class="meta">#</span><span class="bash">磁盘空间</span></span><br><span class="line">df -h</span><br><span class="line"><span class="meta">#</span><span class="bash">文件夹大小</span></span><br><span class="line">du -h --max-depth=1 your_path</span><br></pre></td></tr></table></figure>

<h2 id="四-用户管理"><a href="#四-用户管理" class="headerlink" title="四. 用户管理"></a>四. 用户管理</h2><p><strong>用户信息存放文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用cat命令查看</span></span><br><span class="line">用户名和 UID 被保存在/etc/passwd文件中，文件权限 (-rw-r--r--)</span><br><span class="line">组和GID 被保存在 /etc/group文件中，文件权限(-r--------)</span><br><span class="line">用户口令(密码)被保存在 /etc/shadow文件中 ，文件权限(-rw-r--r-- )</span><br><span class="line">组口令被保存在 /etc/gshadow文件中 ，文件权限 (-r--------)</span><br></pre></td></tr></table></figure>

<p><strong>用户相关的命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">who i am	#显示当前用户的名称</span><br><span class="line">w/who		#显示登录用户及相关信息</span><br><span class="line">id			#显示用户当前的uid、gid和用户所属的组列表</span><br><span class="line">groups		#显示指定用户所属的组列表</span><br></pre></td></tr></table></figure>

<p><strong>用户管理</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">新增用户</span></span><br><span class="line">useradd -m -d /home/ftpuser ftpuser</span><br><span class="line">passwd ftpuser	#为ftpuser设置密码</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新增参数说明</span></span><br><span class="line">useradd -m -d /home/ftpUser -s /sbin/nologin -g users -G root ftpUser</span><br><span class="line">useradd 选项 用户名</span><br><span class="line">-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</span><br><span class="line">-g 用户组 指定用户所属的用户组。</span><br><span class="line">-G 用户组，用户组 指定用户所属的附加组。</span><br><span class="line">-s Shell文件 指定用户的登录Shell(/bin/sh)。</span><br><span class="line"></span><br><span class="line">usermod -g root ftpuser	#设置为root用户组</span><br><span class="line">userdel ftpuser			#删除用户</span><br></pre></td></tr></table></figure>
<p><strong>用户组管理</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd 用户组	#新建</span><br><span class="line">groupmod 用户组	#修改</span><br><span class="line">groupdel 用户组	#删除</span><br></pre></td></tr></table></figure>

<p><strong>口令管理</strong></p>
<p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，比如设置密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd &lt;用户账号名&gt;		#设置用户口令</span><br><span class="line">passwd -l &lt;用户账号名&gt;	#禁用用户账户口令</span><br><span class="line">passwd -S &lt;用户账号名&gt;	#查看用户账户口令状态</span><br><span class="line">passwd -u &lt;用户账号名&gt;	#恢复用户账户口令</span><br><span class="line">passwd -d &lt;用户账号名&gt;	#清除用户账户口令</span><br></pre></td></tr></table></figure>

<h2 id="五-权限管理"><a href="#五-权限管理" class="headerlink" title="五. 权限管理"></a>五. 权限管理</h2><p><strong>基础命令</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">改变文件或目录的属主（所有者）（-R : 处理指定目录以及其子目录下的所有文件）</span></span><br><span class="line">chown -R ftp1 /home/ftp1</span><br><span class="line">chown -R ftp1:root /home/ftp1</span><br><span class="line">chmod -R 777 /home/ftp1	#改变文件或目录的权限</span><br><span class="line">chgrp					#改变文件或目录所属的组</span><br><span class="line">umask					#设置文件的缺省生成掩码</span><br></pre></td></tr></table></figure>

<p>*<em>赋予新建用户root权限 *</em></p>
<p><strong>方法1:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改/etc/sudoers文件，放开注释</span></span><br><span class="line"><span class="meta">%</span><span class="bash">wheel ALL=(ALL) NOPASSWD: ALL</span></span><br><span class="line"><span class="meta">#</span><span class="bash">将用户加入root组</span></span><br><span class="line">usermod -g root test</span><br></pre></td></tr></table></figure>

<p><strong>方法2:</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改/etc/sudoers文件,root ALL=(ALL) ALL 下面加一行</span></span><br><span class="line">test ALL=(ALL) ALL</span><br></pre></td></tr></table></figure>

<p><strong>方法3（靠谱）：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改/etc/passwd文件,找到<span class="built_in">test</span>用户那一行，并把用户ID修改为0（用户ID为x后面的那个数字）</span></span><br><span class="line">test:x:1002:100::/home/test:/bin/bash (1002 改成0)</span><br></pre></td></tr></table></figure>

<p><strong>以上方法都需要重新登录test才行。</strong></p>
<h2 id="六-中文文件乱码"><a href="#六-中文文件乱码" class="headerlink" title="六 中文文件乱码"></a>六 中文文件乱码</h2><p>修改当前用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#vim ~user&#x2F;.profile</span><br><span class="line">#放开注释</span><br><span class="line">export LANG&#x3D;es_ES.UTF-8</span><br><span class="line">#或则如下</span><br><span class="line">export LANG&#x3D;zh_CN.UTF-8</span><br></pre></td></tr></table></figure>

<p>linux 文件乱码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#转换文件编码</span><br><span class="line">convmv -f gbk -t utf-8 -r --notest &#x2F;home&#x2F;file.zip</span><br></pre></td></tr></table></figure>

<h2 id="七-定时任务"><a href="#七-定时任务" class="headerlink" title="七 定时任务"></a>七 定时任务</h2><p>Linux Crontab</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式：[分] [时] [日] [月] [周] [要运行的命令]</span><br><span class="line">1 * * * * &#x2F;usr&#x2F;run.sh	#每分钟执行一次</span><br></pre></td></tr></table></figure>

<p>SpringBoot Scheduled</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[秒] [分] [时] [日] [月] [周] [年]</span><br><span class="line">注：[年]不是必须的域，可以省略[年]</span><br><span class="line">1 * * * * *		#每秒执行一次</span><br><span class="line">1 * * * * * *	#每秒执行一次</span><br></pre></td></tr></table></figure>

<p>九 全局代理</p>
<h2 id="八-全局代理"><a href="#八-全局代理" class="headerlink" title="八 全局代理"></a>八 全局代理</h2><ul>
<li><p>http临时代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1087</span><br><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:1087</span><br></pre></td></tr></table></figure>
</li>
<li><p>sock临时代理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export http_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">export https_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="九-解压缩"><a href="#九-解压缩" class="headerlink" title="九 解压缩"></a>九 解压缩</h2><ol>
<li><p>tar</p>
<ul>
<li><p>解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 解压</span><br><span class="line">tar zxvf temp.tar.gz</span><br><span class="line"># 解压到指定路径</span><br><span class="line">tar zxvf temp.tar.gz -C test</span><br></pre></td></tr></table></figure>
</li>
<li><p>压缩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 压缩1 (压缩包会包含&#x2F;root&#x2F;redis&#x2F;temp 3层路径)</span><br><span class="line">tar zcvf temp.tar.gz &#x2F;root&#x2F;redis&#x2F;temp</span><br><span class="line"></span><br><span class="line"># 压缩2 (不要多余路径)</span><br><span class="line">cd &#x2F;root&#x2F;redis&#x2F;temp</span><br><span class="line">tar zcvf temp.tar.gz *</span><br><span class="line"># 压缩2 (不要多余路径,注意最后有个点)</span><br><span class="line">tar zcvf temp.tar.gz -C &#x2F;root&#x2F;redis&#x2F;temp .</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>zip</p>
<ul>
<li><p>解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 解压</span><br><span class="line">unzip temp.zip</span><br><span class="line"># 解压到指定路径</span><br><span class="line">unzip temp.zip -d test</span><br></pre></td></tr></table></figure>
</li>
<li><p>压缩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 压缩</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 运行环境</title>
    <url>/blog/2018/07/01/Linux/Linux%20%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="Java-Jdk"><a href="#Java-Jdk" class="headerlink" title="Java Jdk"></a>Java Jdk</h2><p>修改 /etc/profile 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">PATH 环境变量：作用是指定命令搜索路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash">CLASSPATH 环境变量：作用是指定类搜索路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash">JAVA_HOME 环境变量：它指向 jdk 的安装目录</span></span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_14</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>

<h2 id="Adb"><a href="#Adb" class="headerlink" title="Adb"></a>Adb</h2><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安装</span><br><span class="line">apt install maven</span><br><span class="line"># 查看版本</span><br><span class="line">mvn -version</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS-环境变量配置</title>
    <url>/blog/2017/07/01/Macos/MacOS-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一  配置bash_profile文件<br>macos 环境配置就是配置bash_profile文件<br>1 终端输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim ~&#x2F;.bash_profile</span><br><span class="line">或</span><br><span class="line">open -e .bash_profile</span><br></pre></td></tr></table></figure>
<p>2 配置环境内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ 具体环境内容</span><br></pre></td></tr></table></figure>
<p>3  保存后，更新文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bash_profile</span><br></pre></td></tr></table></figure>

<p>二 bash_profile 内容<br>1 Java环境配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_HOME&#x3D;&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_111.jdk&#x2F;Contents&#x2F;Home</span><br><span class="line">PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin</span><br><span class="line">CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br><span class="line">export JAVA_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure>

<p>2 Gradle环境配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRADLE_HOME&#x3D;&#x2F;Users&#x2F;lrxc&#x2F;.gradle&#x2F;gradle-4.6 (Gradle的本机路径)</span><br><span class="line">export GRADLE_HOME</span><br><span class="line">export PATH&#x3D;$PATH:$GRADLE_HOME&#x2F;bin</span><br></pre></td></tr></table></figure>

<p>3 Android adb环境配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;Users&#x2F;lrxc&#x2F;Library&#x2F;Android&#x2F;sdk&#x2F;platform-tools&#x2F;:$PATH</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/2803682-880b629481ecd6ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>三 基本命令失效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">command not found</span><br><span class="line">解决：</span><br><span class="line">export PATH&#x3D;&quot;&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;X11&#x2F;bin&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS-Homebrew-Jdk-Node</title>
    <url>/blog/2017/07/01/Macos/MacOS-Homebrew-Jdk-Node/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h4 id="一-安装Homebrew"><a href="#一-安装Homebrew" class="headerlink" title="一 安装Homebrew"></a>一 安装Homebrew</h4><ul>
<li>git post 默认值设置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global http.postBuffer 1048576000</span><br></pre></td></tr></table></figure>

<ul>
<li><p>官网：<a href="https://brew.sh/index_zh-tw" target="_blank" rel="noopener">https://brew.sh/index_zh-tw</a></p>
<p>需要科学上网，dns(114)，终端代理(export http_proxy=<a href="http://127.0.0.1:1087" target="_blank" rel="noopener">http://127.0.0.1:1087</a>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装</span><br><span class="line">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install.sh)&quot;</span><br><span class="line">&#x2F;&#x2F;卸载</span><br><span class="line">ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;uninstall)&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>清华镜像： <a href="https://mirror.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/help/homebrew/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置代理</span><br><span class="line">if [[ &quot;$(uname -s)&quot; &#x3D;&#x3D; &quot;Linux&quot; ]]; then BREW_TYPE&#x3D;&quot;linuxbrew&quot;; else BREW_TYPE&#x3D;&quot;homebrew&quot;; fi</span><br><span class="line">export HOMEBREW_BREW_GIT_REMOTE&#x3D;&quot;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;homebrew&#x2F;brew.git&quot;</span><br><span class="line">export HOMEBREW_CORE_GIT_REMOTE&#x3D;&quot;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;homebrew&#x2F;$&#123;BREW_TYPE&#125;-core.git&quot;</span><br><span class="line">export HOMEBREW_BOTTLE_DOMAIN&#x3D;&quot;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;$&#123;BREW_TYPE&#125;-bottles&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 从本镜像下载安装脚本并安装 Homebrew &#x2F; Linuxbrew</span><br><span class="line">git clone --depth&#x3D;1 https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;homebrew&#x2F;install.git brew-install</span><br><span class="line">&#x2F;bin&#x2F;bash brew-install&#x2F;install.sh</span><br><span class="line">rm -rf brew-install</span><br></pre></td></tr></table></figure>

<ul>
<li>常用命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew search 软件名，如brew search wget &#x2F;&#x2F;搜索软件</span><br><span class="line">brew install 软件名，如brew install wget&#x2F;&#x2F;安装软件</span><br><span class="line">brew remove 软件名，如brew remove wget&#x2F;&#x2F;卸载软件</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="二-镜像源"><a href="#二-镜像源" class="headerlink" title="二 镜像源"></a>二 镜像源</h4><ol>
<li><a href="https://lug.ustc.edu.cn/wiki/mirrors/help/brew.git" target="_blank" rel="noopener">中科大镜像</a></li>
<li><a href="https://mirror.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">清华大学开源软件镜像站</a></li>
</ol>
<ul>
<li>替换现有上游<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 替换 brew 程序本身的源</span><br><span class="line">git -C &quot;$(brew --repo)&quot; remote set-url origin https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;homebrew&#x2F;brew.git</span><br><span class="line"></span><br><span class="line"># 手动设置</span><br><span class="line">git -C &quot;$(brew --repo homebrew&#x2F;core)&quot; remote set-url origin https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;homebrew&#x2F;homebrew-core.git</span><br><span class="line">git -C &quot;$(brew --repo homebrew&#x2F;cask)&quot; remote set-url origin https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;homebrew&#x2F;homebrew-cask.git</span><br><span class="line">git -C &quot;$(brew --repo homebrew&#x2F;cask-fonts)&quot; remote set-url origin https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;homebrew&#x2F;homebrew-cask-fonts.git</span><br><span class="line">git -C &quot;$(brew --repo homebrew&#x2F;cask-drivers)&quot; remote set-url origin https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;homebrew&#x2F;homebrew-cask-drivers.git</span><br><span class="line">git -C &quot;$(brew --repo homebrew&#x2F;cask-versions)&quot; remote set-url origin https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;homebrew&#x2F;homebrew-cask-versions.git\</span><br><span class="line"></span><br><span class="line"># 更换上游后需重新设置 git 仓库 HEAD</span><br><span class="line">brew update-reset</span><br></pre></td></tr></table></figure>
<h4 id="三-Jdk"><a href="#三-Jdk" class="headerlink" title="三 Jdk"></a>三 Jdk</h4><ul>
<li><a href="https://www.cnblogs.com/imzhizi/p/macos-jdk-installation-homebrew.html" target="_blank" rel="noopener">参考来源</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装不同版本</span><br><span class="line">brew cask install adoptopenjdk8</span><br><span class="line">brew cask install adoptopenjdk9</span><br><span class="line">brew cask install adoptopenjdk10</span><br><span class="line">brew cask install adoptopenjdk11</span><br><span class="line"></span><br><span class="line"># 错误情况: Unknown command: cask</span><br><span class="line">brew install --cask adoptopenjdk8</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Jdk卸载</span><br><span class="line">sudo rm -fr &#x2F;Library&#x2F;Internet\ Plug-Ins&#x2F;JavaAppletPlugin.plugin </span><br><span class="line">sudo rm -fr &#x2F;Library&#x2F;PreferencePanes&#x2F;JavaControlPanel.prefPane </span><br><span class="line">sudo rm -fr ~&#x2F;Library&#x2F;Application\ Support&#x2F;Oracle&#x2F;Java</span><br><span class="line">删除&#x2F;Library&#x2F;Java目录</span><br></pre></td></tr></table></figure>
<h4 id="四-Node-Js"><a href="#四-Node-Js" class="headerlink" title="四 Node Js"></a>四 Node Js</h4></li>
</ul>
</li>
<li>默认安装最高的版本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install node</span><br><span class="line">brew uninstall nodejs</span><br></pre></td></tr></table></figure></li>
<li>安装指定版本</li>
</ul>
<ol>
<li>如果之前使用过 brew install node 安装过 node，需要使用 brew unlink node 来解绑</li>
<li>打开命令行，输入 brew search node ，来查询可以安装的 node 版本</li>
<li>可以看到命令行中出现了包括 node@8、node@10 之类的 node 版本信息。选择自己需要安装的版本，进行安装，如使用命令brew install node@10;</li>
<li>输入 node -v进行查看</li>
</ol>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>Tool/Chrome 进阶玩家</title>
    <url>/blog/2021/06/02/Tool/Chrome%20%E8%BF%9B%E9%98%B6%E7%8E%A9%E5%AE%B6/</url>
    <content><![CDATA[<h1 id="一-您的连接不是私密连接"><a href="#一-您的连接不是私密连接" class="headerlink" title="一 您的连接不是私密连接"></a>一 您的连接不是私密连接</h1><ol>
<li>找到Chrome浏览器的快捷方式</li>
<li>右键点击【属性】，找到【目标】</li>
<li>在最后加上【 –test-type –ignore-certificate-errors】（直接复制括号里面的内容粘贴，包括空格），点击【应用】，点击【确定】关闭窗口</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>MacBook Pro 2018 U盘重装系统</title>
    <url>/blog/2017/07/01/Macos/MacBook%20Pro%202018%20U%E7%9B%98%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##　参数配置</p>
<ul>
<li>mbp 2018 </li>
<li>Ｕ盘16G</li>
</ul>
<h2 id="一-制定启动盘"><a href="#一-制定启动盘" class="headerlink" title="一 制定启动盘"></a>一 制定启动盘</h2><ul>
<li>官方教程：<a href="https://support.apple.com/zh-cn/HT201372" target="_blank" rel="noopener">https://support.apple.com/zh-cn/HT201372</a></li>
</ul>
<ol>
<li><p>应用商店下载需要的MacOS，下载成功后不需要点击安装</p>
</li>
<li><p>插入U盘，格式化为 Mac OS 扩展格式，名字对应下面的 <strong>MyVolume</strong></p>
</li>
</ol>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-895acf29deecfa9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ol start="3">
<li><p>制作启动盘，终端执行以下命令</p>
<p><strong>Catalina</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;Applications&#x2F;Install\ macOS\ Catalina.app&#x2F;Contents&#x2F;Resources&#x2F;createinstallmedia --volume &#x2F;Volumes&#x2F;MyVolume</span><br></pre></td></tr></table></figure>

<p><strong>Mojave</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;Applications&#x2F;Install\ macOS\ Mojave.app&#x2F;Contents&#x2F;Resources&#x2F;createinstallmedia --volume &#x2F;Volumes&#x2F;MyVolume</span><br></pre></td></tr></table></figure>

<p><strong>High Sierra</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo &#x2F;Applications&#x2F;Install\ macOS\ High\ Sierra.app&#x2F;Contents&#x2F;Resources&#x2F;createinstallmedia --volume &#x2F;Volumes&#x2F;MyVolume</span><br></pre></td></tr></table></figure>



</li>
</ol>
   <img src="https://support.apple.com/library/content/dam/edam/applecare/images/en_US/macos/Big-Sur/macos-big-sur-terminal-create-bootable-installer.jpg" style="zoom: 67%;" />

<h2 id="二-设置Secure-Boot-安全启动"><a href="#二-设置Secure-Boot-安全启动" class="headerlink" title="二 设置Secure Boot(安全启动)"></a>二 设置Secure Boot(安全启动)</h2><ol>
<li>开机 Command (⌘)-R，菜单栏中选取“实用工具”&gt;“启动安全性实用工具”。选择无安全性、允许从外部介质安装<br><img src="https://upload-images.jianshu.io/upload_images/2803682-e1d6fd137f66ecc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>官方教程：<a href="https://support.apple.com/zh-cn/HT208198" target="_blank" rel="noopener">https://support.apple.com/zh-cn/HT208198</a></li>
</ol>
<h2 id="三-开始安装"><a href="#三-开始安装" class="headerlink" title="三 开始安装"></a>三 开始安装</h2><ol>
<li><p>开机按option，选择U盘，下一步即可</p>
</li>
<li><p>安装旧版MacOS报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 先关闭电脑的网络, 如关闭右上角的WIFI或者拔掉网线</span><br><span class="line">2. 终端里面修改时间</span><br><span class="line">date 122014102015.30</span><br><span class="line">上面的办法修改后还是不行，那么输入下面的代码试试</span><br><span class="line">date 062614102014.30</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="四-在线恢复模式"><a href="#四-在线恢复模式" class="headerlink" title="四 在线恢复模式"></a>四 在线恢复模式</h2><p>官方教程: <a href="https://support.apple.com/zh-cn/HT204904" target="_blank" rel="noopener">https://support.apple.com/zh-cn/HT204904</a></p>
<ol>
<li>Command (⌘)-R 当前系统版本</li>
<li>Option-Command-R 安装最新版本</li>
<li>Shift-Option-Command-R  安装出厂版本</li>
</ol>
<p>以上三种恢复模式，关机后按下组合键，即可进入小地球页面，连上wifi，自动恢复即可开始</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在线恢复失败：</span><br><span class="line">自动进入恢复模式(小地球)，连接WiFi没反应，等会报错2002或其他各种失败问题</span><br><span class="line">解决方法：当前wifi有问题，切换wifi，或者手机开个热点就行了</span><br></pre></td></tr></table></figure>

<h2 id="附录：MacOS原版镜像下载"><a href="#附录：MacOS原版镜像下载" class="headerlink" title="附录：MacOS原版镜像下载"></a>附录：MacOS原版镜像下载</h2><h4 id="macOS-Big-Sur-11-0-1（20B29）"><a href="#macOS-Big-Sur-11-0-1（20B29）" class="headerlink" title="macOS Big Sur 11.0.1（20B29）"></a>macOS Big Sur 11.0.1（20B29）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;s1.mac2x.com&#x2F;macos&#x2F;11.0.x&#x2F;Install.macOS.Big.Sur.11.0.1.20B29.16.1.03.dmg</span><br></pre></td></tr></table></figure>
<h4 id="macOS-Catalina-10-15-7-19H2-："><a href="#macOS-Catalina-10-15-7-19H2-：" class="headerlink" title="macOS Catalina 10.15.7 (19H2)："></a>macOS Catalina 10.15.7 (19H2)：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;s1.mac2x.com&#x2F;macos&#x2F;10.15.x&#x2F;Install.macOS.Catalina.10.15.7.02.19H2.dmg</span><br></pre></td></tr></table></figure>

<h4 id="macOS-Mojave-10-14-6-18G103-："><a href="#macOS-Mojave-10-14-6-18G103-：" class="headerlink" title="macOS Mojave 10.14.6 (18G103)："></a>macOS Mojave 10.14.6 (18G103)：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">magnet:?xt&#x3D;urn:btih:daa09898b2764c9a513aee76c67d9f27c9ec6159</span><br></pre></td></tr></table></figure>

<h4 id="macOS-High-Sierra-10-13-6-17G2208"><a href="#macOS-High-Sierra-10-13-6-17G2208" class="headerlink" title="macOS High Sierra 10.13.6 (17G2208):"></a>macOS High Sierra 10.13.6 (17G2208):</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>Fiddler-手机远程调试</title>
    <url>/blog/2020/07/01/Tool/Fiddler-%E6%89%8B%E6%9C%BA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一 Fiddler下载<br>官网 <a href="https://www.telerik.com/fiddler" target="_blank" rel="noopener">https://www.telerik.com/fiddler</a></p>
<p>二 配置Fiddler<br>1 远程调试打开<br><img src="https://upload-images.jianshu.io/upload_images/2803682-b40c8c21349a98fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2 监控https 默认不监控<br><img src="https://upload-images.jianshu.io/upload_images/2803682-c1ee6596fee3be52.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>3 配置后一定重启Fiddler<br>4 电脑运行cmd 输入ipconfig  拿到本机ip  </p>
<p>三 手机配置</p>
<ol>
<li>保证电脑和手机处于同一局域网(电脑直接共享wifi给手机)</li>
<li>连上对应wifi 设置wifi代理为手动<br><img src="https://upload-images.jianshu.io/upload_images/2803682-6ebda519e93d3d91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>主机名就是电脑ip，端口默认8888</li>
<li>手机浏览器浏览内容。 Fiddler已经监控到了。</li>
</ol>
<p>四 指定域名过滤<br><img src="https://upload-images.jianshu.io/upload_images/2803682-54d1b6fd92bc8418.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>1 显示指定域名<br>2 配置域名，多个英文 ; 分开<br>3 应用过滤条件</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Cloud Platform 搭建</title>
    <url>/blog/2020/07/01/Tool/Google%20Cloud%20Platform%20%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul>
<li><p>需要国际信用卡(visa/master)</p>
</li>
<li><p>Google账号</p>
</li>
<li><p>2020年11月有效</p>
</li>
</ul>
<h1 id="一-注册账号"><a href="#一-注册账号" class="headerlink" title="一 注册账号"></a>一 注册账号</h1><ol>
<li>注册GCP<br><a href="https://cloud.google.com" target="_blank" rel="noopener">https://cloud.google.com</a><br><img src="https://upload-images.jianshu.io/upload_images/2803682-9a402139a748ef0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>进入控制台</li>
</ol>
<h1 id="二-创建实例"><a href="#二-创建实例" class="headerlink" title="二 创建实例"></a>二 创建实例</h1><ol>
<li>左侧选择 Compute Engine — VM实例</li>
<li>点击 创建 <ul>
<li>名称：随意</li>
<li>地区：建议asia-east1-c</li>
<li>机器类型：micro (微型便宜点…)</li>
<li>启动磁盘 – Ubuntu 16.04 LTS</li>
<li>防火墙：允许HTTP流量，允许HTTPS流量</li>
</ul>
</li>
</ol>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-b38673eec1646e15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="三-配置网络"><a href="#三-配置网络" class="headerlink" title="三 配置网络"></a>三 配置网络</h1><ol>
<li>左侧导航 — 计算 — VPC网络 </li>
<li>外部 IP 地址—类型改为静态(非必须操作)</li>
</ol>
<ul>
<li>名称：任意<br><img src="https://upload-images.jianshu.io/upload_images/2803682-842594da5791a6ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>3 创建防火墙<ul>
<li>名称：任意</li>
<li>流量方向：入站/出站（入站必须创建）</li>
<li>目标：网络中的所有实例</li>
<li>目标 IP 地址范围：0.0.0.0/0</li>
<li>协议和端口： 全部允许<br><img src="https://upload-images.jianshu.io/upload_images/2803682-958ad4968642b35e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ul>
</li>
</ul>
<h1 id="四-远程连接"><a href="#四-远程连接" class="headerlink" title="四. 远程连接"></a>四. 远程连接</h1><ol>
<li>打开ssh远程</li>
</ol>
<p>左侧选择 Compute Engine — VM实例——ssh——在浏览器窗口中打开</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-5c3aa14fdcfe8451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2. 获取root权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo passwd root	#设置root密码</span><br><span class="line">su					#切换root用户</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>本地工具连接服务器(用不到可跳过)</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改 vim /etc/ssh/sshd_config </span></span><br><span class="line">PermitRootLogin yes			#root账号拒绝登录</span><br><span class="line">PasswordAuthentication yes	#使用密码登录</span><br><span class="line">service ssh restart			#重启ssh服务</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试本地到服务器的速度(用不到可跳过)</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;oooldking&#x2F;script&#x2F;master&#x2F;superspeed.sh</span><br><span class="line">chmod +x superspeed.sh</span><br><span class="line">.&#x2F;superspeed.sh</span><br></pre></td></tr></table></figure>

<h1 id="五-配置科学上网"><a href="#五-配置科学上网" class="headerlink" title="五. 配置科学上网"></a>五. 配置科学上网</h1><h2 id="1-V2Ray"><a href="#1-V2Ray" class="headerlink" title="1. V2Ray"></a>1. V2Ray</h2><ol>
<li><p>官方教程：<br><a href="https://toutyrater.github.io/prep/install.html" target="_blank" rel="noopener">https://toutyrater.github.io/prep/install.html</a></p>
</li>
<li><p>脚本1: 命令行</p>
<p>官网：<a href="https://github.com/233boy/v2ray/wiki" target="_blank" rel="noopener">https://github.com/233boy/v2ray/wiki</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https:&#x2F;&#x2F;git.io&#x2F;v2ray.sh)</span><br></pre></td></tr></table></figure>
</li>
<li><p>脚本2：有图形化界面</p>
<p>官网：<a href="https://github.com/sprov065/v2-ui" target="_blank" rel="noopener">https://github.com/sprov065/v2-ui</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -Ls https:&#x2F;&#x2F;blog.sprov.xyz&#x2F;v2-ui.sh)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">页面访问地址: http:&#x2F;&#x2F;xxx:65432    </span><br><span class="line">用户密码: admin&#x2F;admin</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="2-BBR加速"><a href="#2-BBR加速" class="headerlink" title="2. BBR加速"></a>2. BBR加速</h2><ol>
<li><p>四合一脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; .&#x2F;tcp.sh</span><br></pre></td></tr></table></figure>
<ul>
<li><p>先在[1 – 3]切换内核（第一次显示为bbr内核也要切换一遍），重启</p>
<p>中间有 Abort kernel removal? 界面，选no</p>
</li>
<li><p>安装加速管理</p>
</li>
<li><p>查看状态  ./tcp.sh</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>手机作为电脑音响</title>
    <url>/blog/2020/07/01/Tool/%E6%89%8B%E6%9C%BA%E4%BD%9C%E4%B8%BA%E7%94%B5%E8%84%91%E9%9F%B3%E5%93%8D/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一。下载软件<br>同步听：<a href="http://www.atbt.info/" target="_blank" rel="noopener">http://www.atbt.info/</a><br>PC和手机都安装</p>
<p>二。连接手机<br>方式一. 数据线连接手机，安装手机驱动(可以用360助手，刷机助手之类的安装驱动)<br>方式二. 无线连接。需要手机Root，电脑安装adb。手机与电脑同一局域网，电脑发射WIFI也可以 命令如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh wlan set hostednetwork mode&#x3D;allow ssid&#x3D;WIFI key&#x3D;123123123</span><br><span class="line">netsh wlan start hostednetwork</span><br><span class="line">netsh wlan stop hostednetwork</span><br></pre></td></tr></table></figure>
<p>cmd 连接即可<br>当然每次手动cmd输入还是很蛋疼的,新建bat搞定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off    </span><br><span class="line">cmd &#x2F;k &quot;cd &#x2F;d D:\Java\Sdk\platform-tools&amp;&amp;adb connect 192.168.5.116:5555&quot;</span><br></pre></td></tr></table></figure>

<p>三。电脑按钮点开，播放个音乐试试。<br><img src="https://upload-images.jianshu.io/upload_images/2803682-2b5b435fbcf60f97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Rime-导入搜狗词库</title>
    <url>/blog/2020/07/01/Tool/Rime-%E5%AF%BC%E5%85%A5%E6%90%9C%E7%8B%97%E8%AF%8D%E5%BA%93/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一 目录认识(可跳过)</p>
<ol>
<li>打开配制文件 C:\Users\用户\AppData\Roaming\Rime (不是安装目录)<br><img src="https://upload-images.jianshu.io/upload_images/2803682-c7ef2e69cab67521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>点击开始菜单，找到小狼毫输入法设定，只保留简化字<br><img src="https://upload-images.jianshu.io/upload_images/2803682-7949a5b87b67e5d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>发现多了一个配置文件，如下<br><img src="https://upload-images.jianshu.io/upload_images/2803682-9fa86de387ec416b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>打开看下 这就是刚才选择的简化字的名称<br><img src="https://upload-images.jianshu.io/upload_images/2803682-dae0e1164080fcad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>二 自定义词库<br>1 新建 简化字自定义配置文件 luna_pinyin_simp.custom.yaml 输入内容<br>(自定义配置文件名字格式: 简化字名称.custom.yaml)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># luna_pinyin_simp.custom.yaml</span><br><span class="line">patch:</span><br><span class="line"># 指定自定义词库位置</span><br><span class="line">  &quot;translator&#x2F;dictionary&quot;: luna_pinyin.my</span><br></pre></td></tr></table></figure>
<p>2 新建luna_pinyin.my.dict.yaml (文件名和上面指定词库位置保持一致)输入内容<br>(词典名字格式: 名称.dict.yaml)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">name: luna_pinyin.my</span><br><span class="line">version: &quot;1.0&quot;</span><br><span class="line">sort: by_weight</span><br><span class="line">use_preset_vocabulary: true</span><br><span class="line"># 此处为扩充词库（基本）默认链接载入的词库</span><br><span class="line">import_tables:</span><br><span class="line">  - luna_pinyin</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 自定义词语</span><br><span class="line">英雄联盟	ying xiong leng meng	100</span><br><span class="line">吃鸡联盟	chi ji lian meng	100</span><br></pre></td></tr></table></figure>
<p>最后目录如下<br><img src="https://upload-images.jianshu.io/upload_images/2803682-175337f3cd770f5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>3 点击开始菜单，找到小狼毫重新部署，然后输入yxlm显示英雄联盟，搞定。<br>别人编译好的词库 <a href="https://bintray.com/rime-aca/dictionaries/luna_pinyin.dict" target="_blank" rel="noopener">https://bintray.com/rime-aca/dictionaries/luna_pinyin.dict</a></p>
<p>三 导入搜狗词库<br>1 下载搜狗标准词库  <a href="https://pinyin.sogou.com/dict/detail/index/11640" target="_blank" rel="noopener">https://pinyin.sogou.com/dict/detail/index/11640</a><br>2 下载深蓝词库转换  <a href="https://github.com/studyzy/imewlconverter" target="_blank" rel="noopener">https://github.com/studyzy/imewlconverter</a><br>3  转化成功保存txt本地即可<br><img src="https://upload-images.jianshu.io/upload_images/2803682-c16a651c614efad8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>4 复制txt文件到Rime 配置目录下，并重命名 luna_pinyin.sougou.dict.yaml 然后打开在最上面添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">name: luna_pinyin.sougou</span><br><span class="line">version: &quot;1.0&quot;</span><br><span class="line">sort: by_weight</span><br><span class="line">use_preset_vocabulary: true</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>5 打开luna_pinyin.my.dict.yaml ，增加搜狗词库，一句话<br><img src="https://upload-images.jianshu.io/upload_images/2803682-e548eb1756f315e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>最后目录如下<br><img src="https://upload-images.jianshu.io/upload_images/2803682-dd107cf6e1b8b1ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>6 重新部署 搞定。</p>
<p>附相关链接：<br>官方：<a href="https://github.com/rime/home/wiki/RimeWithSchemata" target="_blank" rel="noopener">https://github.com/rime/home/wiki/RimeWithSchemata</a><br>大神：<a href="https://www.jianshu.com/p/cffc0ea094a7" target="_blank" rel="noopener">https://www.jianshu.com/p/cffc0ea094a7</a></p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10-优化指南</title>
    <url>/blog/2020/07/01/Tool/Win10-%E4%BC%98%E5%8C%96%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<ol>
<li>关闭不必要服务<ul>
<li>Connected User Experiences and Telemetry：用于收集错误信息，对于硬盘消耗较大，是很多低配电脑卡顿的元凶。</li>
</ul>
</li>
</ol>
<ul>
<li><p>Diagnostic Execution Service：诊断执行服务，用以执行故障诊断支持的诊断操作，效果类似Connected User Experiences and Telemetry。</p>
</li>
<li><p>SysMain：即以前的SuperFetch，对于机械硬盘有一定作用，但固态硬盘作用不大，而且常常是导致CPU占用飙升100%的元凶。如果用户使用的是SSD，且物理内存较大，可以考虑关闭。</p>
</li>
<li><p>Windows Search：Windows搜索服务，作用是实现文件的快速搜索。不过这是一项经常在系统后台”查水表”的服务，很多时候电脑待机时硬盘灯长亮就是它的“功劳”。此外Win10新版中的“活动历史记录”也依赖于该服务。如果安装的是SSD，且对“活动历史记录”无感可以考虑关闭，尤其对于低配电脑，性能提升非常明显。</p>
</li>
</ul>
<p>2 关闭DIPM节能机制<br><img src="https://upload-images.jianshu.io/upload_images/2803682-2e3279eb27e66c9a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>3. 关闭系统保护<br>4. 关闭Windows Defender<br>5. 关闭“快速启动”</p>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>显示星号密码</title>
    <url>/blog/2020/07/01/Tool/%E6%98%BE%E7%A4%BA%E6%98%9F%E5%8F%B7%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>1 修改书签，网址内容如下</p>
<pre><code>javascript:&quot;use strict&quot;;!function(){var e,t;e=document.getElementsByTagName(&quot;input&quot;);for(var a=0;a&lt;e.length;a++)if(t=e[a],&quot;password&quot;==t.type.toLowerCase())try{t.type=&quot;text&quot;}catch(e){var r,n;r=document.createElement(&quot;input&quot;),n=t.attributes;for(var o=0;o&lt;n.length;o++){var i,c,d;i=n[o],c=i.nodeName,d=i.nodeValue,&quot;type&quot;!=c.toLowerCase()&amp;&amp;&quot;height&quot;!=c&amp;&amp;&quot;width&quot;!=c&amp;!!d&amp;&amp;(r[c]=d)}t.parentNode.replaceChild(r,t)}}();</code></pre>]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Web/HTML</title>
    <url>/blog/2021/06/02/Web/HTML/</url>
    <content><![CDATA[<ul>
<li>选择器</li>
</ul>
<h2 id="HTML-选择器-JS"><a href="#HTML-选择器-JS" class="headerlink" title="HTML 选择器(JS)"></a>HTML 选择器(JS)</h2><ol>
<li><p>id选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.getElementById(&quot;idname&quot;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>标签选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;直接跟元素的名称</span><br><span class="line">document.getElementsByTagName(&quot;p|button|div&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>类选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;指定类名的元素集合</span><br><span class="line">document.getElementsByClassName(&quot;classname&quot;)</span><br><span class="line">&#x2F;&#x2F;例如</span><br><span class="line">var class_name&#x3D;document.getElementsByClassName(&quot;classname&quot;)</span><br><span class="line">class_name[0].onclick</span><br></pre></td></tr></table></figure>
</li>
<li><p>通用选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;id\class\tab 都可以</span><br><span class="line">document.querySelector(&quot;id|class|tab&quot;)</span><br><span class="line">document.querySelectorAll(&quot;id|class|tab&quot;)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><ol>
<li><p>id选择器 : 使用#</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;#useid&#123;...&#125;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类选择器：使用.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;.useid&#123;...&#125;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>标签选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;body&#123;...&#125;&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="Jquery选择器-基于css选择器"><a href="#Jquery选择器-基于css选择器" class="headerlink" title="Jquery选择器(基于css选择器)"></a>Jquery选择器(基于css选择器)</h2><ol>
<li><p>id选择器 : 使用#</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;$(&quot;#useid&quot;).click(function()&#123;...&#125;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>类选择器：使用.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;$(&quot;.useid&quot;).click(function()&#123;...&#125;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>元素选择器（等于标签选择器）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;$(&quot;p|button|div&quot;).click(function()&#123;...&#125;)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Vue Init</title>
    <url>/blog/2020/07/01/Web/Vue%20Init/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h1 id="shopdemo"><a href="#shopdemo" class="headerlink" title="shopdemo"></a>shopdemo</h1><h2 id="Project-setup"><a href="#Project-setup" class="headerlink" title="Project setup"></a>Project setup</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h3 id="Compiles-and-hot-reloads-for-development"><a href="#Compiles-and-hot-reloads-for-development" class="headerlink" title="Compiles and hot-reloads for development"></a>Compiles and hot-reloads for development</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h3 id="Compiles-and-minifies-for-production"><a href="#Compiles-and-minifies-for-production" class="headerlink" title="Compiles and minifies for production"></a>Compiles and minifies for production</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<h3 id="Customize-configuration"><a href="#Customize-configuration" class="headerlink" title="Customize configuration"></a>Customize configuration</h3><p>See <a href="https://cli.vuejs.org/config/" target="_blank" rel="noopener">Configuration Reference</a>.</p>
<p>环境搭建：</p>
<h3 id="安装-npm"><a href="#安装-npm" class="headerlink" title="安装 npm"></a>安装 <code>npm</code></h3><p><code>npm</code> 全称为 <code>Node Package Manager</code>，是一个基于<code>Node.js</code>的包管理器，也是整个<code>Node.js</code>社区最流行、支持的第三方模块最多的包管理器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line">&#x2F;&#x2F;查看安装了哪些包</span><br><span class="line">npm list --depth&#x3D;0</span><br></pre></td></tr></table></figure>

<h3 id="由于网络原因-安装-cnpm"><a href="#由于网络原因-安装-cnpm" class="headerlink" title="由于网络原因 安装 cnpm"></a>由于网络原因 安装 <code>cnpm</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="安装-vue-cli"><a href="#安装-vue-cli" class="headerlink" title="安装 vue-cli"></a>安装 <code>vue-cli</code></h3><p>2.x: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>3.x:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g @vue&#x2F;cli</span><br></pre></td></tr></table></figure>

<h3 id="安装-webpack"><a href="#安装-webpack" class="headerlink" title="安装 webpack"></a>安装 <code>webpack</code></h3><p><code>webpack</code> 是  <code>JavaScript</code> 打包器(module bundler)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install -g webpack</span><br></pre></td></tr></table></figure>

<h3 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h3><p>2.x:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure>

<p>3.x:  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue create my-project</span><br><span class="line"># OR</span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hybrid</category>
      </categories>
      <tags>
        <tag>hybrid</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql 常用命令</title>
    <url>/blog/2017/07/01/Sql/MySql%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li>当前mysql任务列表</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show processlist		#，比如导入数据卡住查看</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>max_allowed_packet 限制</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查询已有的</span><br><span class="line">show variables like &#39;%max_allowed_packet%&#39;;</span><br><span class="line">&#x2F;&#x2F;设置新的</span><br><span class="line">set global max_allowed_packet &#x3D; 2*1024*1024*10;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>查看占用空间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE information_schema;</span><br><span class="line">SELECT TABLE_SCHEMA, SUM(DATA_LENGTH) FROM TABLES GROUP BY TABLE_SCHEMA;</span><br></pre></td></tr></table></figure>

<p>可看到各个数据库的所占空间大小，如果想要看到以<code>k</code>为单位的大小，代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE information_schema;</span><br><span class="line">SELECT TABLE_SCHEMA, SUM(DATA_LENGTH)&#x2F;1024 FROM TABLES GROUP BY TABLE_SCHEMA;</span><br></pre></td></tr></table></figure>

<p><strong>就是字节数除以1024</strong>，同理，<code>M</code>和<code>G</code>分别是再除一个1024和再除两个1024.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序scroll-view占满剩余屏幕</title>
    <url>/blog/2020/07/01/Web/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fscroll-view%E5%8D%A0%E6%BB%A1%E5%89%A9%E4%BD%99%E5%B1%8F%E5%B9%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>思路：使用flex布局</p>
<p>一 wxml 代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view style&#x3D;&quot;display:flex;flex-direction:column;height:100%&quot;&gt;</span><br><span class="line">  &lt;text style&#x3D;&quot;background:green&quot;&gt;测试&lt;&#x2F;text&gt;</span><br><span class="line"></span><br><span class="line">  &lt;scroll-view scroll-y&#x3D;&quot;true&quot; style&#x3D;&quot;background:red;flex:1;height:0;&quot;&gt;</span><br><span class="line">    &lt;view wx:for&#x3D;&quot;&#123;&#123;list&#125;&#125;&quot; wx:key&#x3D;&quot;&#123;&#123;index&#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;text&gt;&#123;&#123;item&#125;&#125;\n\n\n&lt;&#x2F;text&gt;</span><br><span class="line">    &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;scroll-view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>
<p>二 wxss 代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">page&#123;</span><br><span class="line">  width:100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三 js 中的data添加一点数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">   list: [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p>效果如下:<br>保持上面布局(测试那个)不动，下面可以滚动<br><img src="https://upload-images.jianshu.io/upload_images/2803682-1cdbac9b73e72653.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/2803682-6b747574be4b4a31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
]]></content>
      <categories>
        <category>Hybrid</category>
      </categories>
      <tags>
        <tag>hybrid</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql BackShell</title>
    <url>/blog/2017/07/01/Sql/MySql%20BackShell/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h4 id="1-检查是log-bin是否开启"><a href="#1-检查是log-bin是否开启" class="headerlink" title="1. 检查是log_bin是否开启"></a>1. 检查是log_bin是否开启</h4><p>增量备份需要开启log_bin<br>若状态为<code>on</code> 则是已经开启log_bin</p>
<pre><code>mysql&gt; show variables like &apos;%log_bin%&apos;;
+---------------------------------+-------+
| Variable_name                   | Value |
+---------------------------------+-------+
| log_bin                         | OFF   |
| log_bin_basename                |       |
| log_bin_index                   |       |
| log_bin_trust_function_creators | OFF   |
| log_bin_use_v1_row_events       | OFF   |
| sql_log_bin                     | ON    |
+---------------------------------+-------+
6 rows in set (0.11 sec)</code></pre><p>若没开启log_bin，则修改mysql配置文件my.cnf，添加以下配置，重启mysql使配置生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log-bin&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql-bin</span><br></pre></td></tr></table></figure>

<p>查看当前正在记录操作的日志log_bin文件名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql &gt; show master status;</span><br></pre></td></tr></table></figure>

<h4 id="2-全量备份"><a href="#2-全量备份" class="headerlink" title="2.  全量备份"></a>2.  全量备份</h4><p>只要执行下述命令，就可以进行全量备份</p>
<pre><code>mysqldump -uroot -p123456 --quick --events --all-databases --flush-logs --delete-master-logs --single-transaction &gt; data.sql</code></pre><p>全量备份脚本 MsyqlFullBack.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 初始化时，创建相应目录</span><br><span class="line"># mkdir -p &#x2F;home&#x2F;mysql&#x2F;backup&#x2F;daily </span><br><span class="line"></span><br><span class="line"># 定时任务</span><br><span class="line"># 每个星期日凌晨3:00执行全量备份脚本 </span><br><span class="line"># 0 3 * * 0 &#x2F;bin&#x2F;bash -x &#x2F;root&#x2F;mysqlFullBack.sh &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line"># 周一到周六凌晨3:00执行增量备份脚本</span><br><span class="line"># 0 3 * * 1-6 &#x2F;bin&#x2F;bash -x &#x2F;root&#x2F;mysqlPartBack.sh &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">BakDir&#x3D;&#x2F;home&#x2F;mysql&#x2F;backup</span><br><span class="line">LogFile&#x3D;&#x2F;home&#x2F;mysql&#x2F;backup&#x2F;bak.log</span><br><span class="line">Date&#x3D;&#96;date +%Y%m%d&#96;</span><br><span class="line">Begin&#x3D;&#96;date +&quot;%Y年%m月%d日 %H:%M:%S&quot;&#96;</span><br><span class="line">cd $BakDir</span><br><span class="line">DumpFile&#x3D;$Date.sql</span><br><span class="line">GZDumpFile&#x3D;$Date.sql.tgz</span><br><span class="line">mysqldump -uroot -p123456 --quick --events --all-databases --flush-logs --delete-master-logs --single-transaction &gt; $DumpFile</span><br><span class="line">&#x2F;bin&#x2F;tar -zvcf $GZDumpFile $DumpFile</span><br><span class="line">&#x2F;bin&#x2F;rm $DumpFile</span><br><span class="line">Last&#x3D;&#96;date +&quot;%Y年%m月%d日 %H:%M:%S&quot;&#96;</span><br><span class="line">echo [FullBack] 开始:$Begin 结束:$Last $GZDumpFile successful &gt;&gt; $LogFile</span><br><span class="line"># scp重复全量备份文件到其他服务器</span><br><span class="line"># scp $GZDumpFile root@xxxx:&#x2F;usr&#x2F;mysql&#x2F;backup&#x2F;$GZDumpFile</span><br><span class="line"># 删除30天前的全量备份文件</span><br><span class="line">find $BakDir -mtime +30 -type f -name &quot;*.sql.tgz&quot; | xargs rm -f</span><br><span class="line"># 删除增量备份文件</span><br><span class="line">cd $BakDir&#x2F;daily</span><br><span class="line">&#x2F;bin&#x2F;rm -f *</span><br></pre></td></tr></table></figure>

<h4 id="3-增量备份"><a href="#3-增量备份" class="headerlink" title="3.  增量备份"></a>3.  增量备份</h4><p>只要执行下述命令，就会生成相应的增量备份日志，根据日志可以恢复增量备份</p>
<p>在/var/lib/mysql下或/var/lib/mysql/mysql-bin下可查看到增量备份日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p123456 flush-logs</span><br></pre></td></tr></table></figure>

<p>增量备份脚本 MysqlPartBack.sh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#在使用之前，请提前创建以下各个目录</span><br><span class="line">backupDir&#x3D;&#x2F;home&#x2F;mysql&#x2F;backup&#x2F;daily</span><br><span class="line">#增量备份时复制mysql-bin.00000*的目标目录，提前手动创建这个目录</span><br><span class="line">mysqlDir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql</span><br><span class="line">#mysql的数据目录</span><br><span class="line">logFile&#x3D;&#x2F;home&#x2F;mysql&#x2F;backup&#x2F;bak.log</span><br><span class="line">BinFile&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;binlog.index</span><br><span class="line">#mysql的index文件路径，放在数据目录下的</span><br><span class="line"></span><br><span class="line">mysqladmin -uroot -p123456 flush-logs</span><br><span class="line">#这个是用于产生新的mysql-bin.00000*文件</span><br><span class="line"># wc -l 统计行数</span><br><span class="line"># awk 简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。</span><br><span class="line">Counter&#x3D;&#96;wc -l $BinFile |awk &#39;&#123;print $1&#125;&#39;&#96;</span><br><span class="line">NextNum&#x3D;0</span><br><span class="line">#这个for循环用于比对$Counter,$NextNum这两个值来确定文件是不是存在或最新的</span><br><span class="line">for file in &#96;cat $BinFile&#96;</span><br><span class="line">do</span><br><span class="line">    base&#x3D;&#96;basename $file&#96;</span><br><span class="line">    echo $base</span><br><span class="line">    #basename用于截取mysql-bin.00000*文件名，去掉.&#x2F;mysql-bin.000005前面的.&#x2F;</span><br><span class="line">    NextNum&#x3D;&#96;expr $NextNum + 1&#96;</span><br><span class="line">    if [ $NextNum -eq $Counter ]</span><br><span class="line">    then</span><br><span class="line">        echo $base skip! &gt;&gt; $logFile</span><br><span class="line">    else</span><br><span class="line">        dest&#x3D;$backupDir&#x2F;$base</span><br><span class="line">        if(test -e $dest)</span><br><span class="line">        #test -e用于检测目标文件是否存在，存在就写exist!到$logFile去</span><br><span class="line">        then</span><br><span class="line">            echo $base exist! &gt;&gt; $logFile</span><br><span class="line">        else</span><br><span class="line">            cp $mysqlDir&#x2F;$base $backupDir</span><br><span class="line">            echo $base copying &gt;&gt; $logFile</span><br><span class="line">         fi</span><br><span class="line">     fi</span><br><span class="line">done</span><br><span class="line">echo [PartBack] &#96;date +&quot;%Y年%m月%d日 %H:%M:%S&quot;&#96; $Next Bakup successful! &gt;&gt; $logFile</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql Dump 备份还原</title>
    <url>/blog/2017/07/01/Sql/MySql%20Dump%20%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p><strong>格式：mysqldump -u用戶名 -p密码 -d 数据库名 表名 &gt; 脚本名;</strong></p>
<p><strong>1. 导出所有数据库</strong></p>
<pre><code>mysqldump -uroot -proot --all-databases &gt;/tmp/all.sql</code></pre><p><strong>2.  导出db1、db2两个数据库的所有数据</strong></p>
<pre><code>mysqldump -uroot -proot --databases db1 db2 &gt;/tmp/db1_and_db2.sql
简写：
mysqldump -uroot　-p　db1 db2 &gt;xxx.sql　</code></pre><p><strong>3. 导出db1中的a1、a2表</strong></p>
<pre><code>mysqldump -uroot -proot --databases db1 --tables a1 a2 &gt;/tmp/db1.sql
简写：
mysqldump -uroot　-p　db1 a1 a2　&gt;xxx.sql　</code></pre><p><strong>4. 条件导出，导出db1表a1中id=1的数据</strong></p>
<pre><code>mysqldump -uroot -proot --databases db1 --tables a1 --where=&quot;id=&apos;abc1000&apos;&quot; &gt;/tmp/a1.sql
简写：
mysqldump -uroot　-p　db1 a1 &apos;id=1&apos; &gt;xxx.sql </code></pre><p><strong>5. 导出结构不导出数据(-d)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --opt -d db1 &gt;db1.sql</span><br><span class="line">&#x2F;&#x2F;说明：</span><br><span class="line">mysqldump -uroot -p --opt -d 数据库名 &gt;xxx.sql</span><br></pre></td></tr></table></figure>

<p><strong>6. 导出数据不导出结构(-t)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p -t db1 &gt;db1.sql</span><br><span class="line">&#x2F;&#x2F;说明：</span><br><span class="line">mysqldump -uroot -p -t 数据库名 &gt;xxx.sql</span><br></pre></td></tr></table></figure>

<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p><strong>1.mysql 命令导入</strong></p>
<p>适用于整个数据库迁移</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语法格式</span><br><span class="line">mysql -u用户名 -p密码 &lt; 要导入的数据库数据(test.sql)</span><br><span class="line">#实例：</span><br><span class="line">mysql -uroot -p123456 &lt; &#x2F;tmp&#x2F;test.sql</span><br></pre></td></tr></table></figure>

<p><strong>2. source 命令导入</strong></p>
<p><strong>source 命令导入数据库需要先登录到数库终端</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database abc character <span class="built_in">set</span> utf8 collate utf8_general_ci;</span><br><span class="line">mysql&gt; create database abc;      <span class="comment"># 创建数据库</span></span><br><span class="line">mysql&gt; use abc;                  <span class="comment"># 使用已创建的数据库 </span></span><br><span class="line">mysql&gt; <span class="built_in">set</span> names utf8;           <span class="comment"># 设置编码</span></span><br><span class="line">mysql&gt; <span class="built_in">source</span> /tmp/test.sql  <span class="comment"># 导入备份数据库</span></span><br></pre></td></tr></table></figure>

<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show processlist		<span class="comment">#当前mysql任务列表，比如导入数据卡住查看</span></span></span><br></pre></td></tr></table></figure>

<p><strong>mysqldump -u用戶名 -p密码 -d 数据库名 表名 &gt; 脚本名;</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;导出整个数据库结构和数据</span><br><span class="line">mysqldump -h localhost -uroot -p123456 database &gt; dump.sql</span><br><span class="line">&#x2F;&#x2F;导出单个数据表结构和数据</span><br><span class="line">mysqldump -h localhost -uroot -p123456 database table &gt; dump.sql</span><br><span class="line">&#x2F;&#x2F;导出整个数据库结构（不包含数据）</span><br><span class="line">mysqldump -h localhost -uroot -p123456 -d database &gt; dump.sql</span><br><span class="line">&#x2F;&#x2F;导出单个数据表结构（不包含数据）</span><br><span class="line">mysqldump -h localhost -uroot -p123456 -d database table &gt; dump.sql</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql 锁概念</title>
    <url>/blog/2017/07/01/Sql/MySql%20%E9%94%81%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##一 乐观锁<br>用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式。何谓数据版本？即为数据增加一个版本标识，一般是通过为数据库表增加一个数字类型的 “version” 字段来实现。</p>
<p>1、数据库表设计<br>三个字段，分别是id,value、version</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select id,value,version from TABLE where id&#x3D;#&#123;id&#125;</span><br></pre></td></tr></table></figure>
<p>2、每次更新表中的value字段时，为了防止发生冲突，需要这样操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update TABLE</span><br><span class="line">set value&#x3D;2,version&#x3D;version+1</span><br><span class="line">where id&#x3D;#&#123;id&#125; and version&#x3D;#&#123;version&#125;;</span><br></pre></td></tr></table></figure>

<p>##二 悲观锁<br>共享锁和排它锁是悲观锁的不同的实现<br>#####2.1 共享锁<br>共享锁指的就是对于多个不同的事务，对同一个资源共享同一个锁。相当于对于同一把门，它拥有多个钥匙一样。<br>在执行语句后面加上<strong>lock in share mode</strong>就代表对某些资源加上共享锁了。<br>#####2.2 排它锁<br>排它锁与共享锁相对应，就是指对于多个不同的事务，对同一个资源只能有一把锁。<br>与共享锁类型，在需要执行的语句后面加上<strong>for update</strong>就可以了</p>
<p>##三 行锁<br>行锁又分共享锁和排他锁,由字面意思理解，就是给某一行加上锁，也就是一条记录加上锁。<br>#####3.1 共享锁<br>在执行语句后面加上<strong>lock in share mode</strong>就代表对某些资源加上共享锁了。<br>#####3.2 排它锁<br>在需要执行的语句后面加上<strong>for update</strong>就可以了</p>
<h2 id="四-表锁"><a href="#四-表锁" class="headerlink" title="四 表锁"></a>四 表锁</h2><p>只有通过索引条件检索数据，InnoDB才使用行级锁，否则，InnoDB将使用表锁！</p>
<h2 id="五-死锁"><a href="#五-死锁" class="headerlink" title="五 死锁"></a>五 死锁</h2><p>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去</p>
]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle 存储过程</title>
    <url>/blog/2017/07/01/Sql/Oracle%20%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><p>存储过程是一组为了完成特定功能的SQL语句，经编译后存储在数据库中。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul>
<li><p>示例1：打印hello world</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">***第一个存储过程：打印hello word, my name is stored procedure内容***</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">procedure</span> test01</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  dbms_output.put_line(<span class="string">'hello word, my name is stored procedure'</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<p><strong>create or replace procedure</strong>：关键字用来创建或覆盖一个原有的存储过程<br><strong>test01</strong>：自定义的存储过程的名字<br><strong>as</strong>：关键字<br><strong>begin</strong>：关键字<br><strong>dbms_output.put_line</strong>(‘’); 打印内容<br>*<em>end; *</em> 关键字</p>
</li>
<li><p>示例2：变量声明，赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create or replace procedure test02</span><br><span class="line">as</span><br><span class="line">  name varchar(10);--声明变量，注意varchar需要指定长度</span><br><span class="line">  age int;</span><br><span class="line">begin</span><br><span class="line">  name:&#x3D;&#39;xiaoming&#39;;--变量赋值</span><br><span class="line">  age:&#x3D;18;</span><br><span class="line">  dbms_output.put_line(&#39;name&#x3D;&#39;||name||&#39;, age&#x3D;&#39;||age);--通过||符号达到连接字符串的功能</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例3 ：实参形参问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create or replace procedure test04(name in varchar,age in int)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line(&#39;name&#x3D;&#39;||name||&#39;, age&#x3D;&#39;||age);</span><br><span class="line">end;</span><br><span class="line"></span><br><span class="line">--调用上面的</span><br><span class="line">CREATE OR REPLACE PROCEDURE test</span><br><span class="line">AS</span><br><span class="line"> name varchar(20);</span><br><span class="line"> res varchar(200);</span><br><span class="line">begin</span><br><span class="line">  name:&#x3D;&#39;xiaoming&#39;;</span><br><span class="line">  --test04(&#39;xiaoming&#39;,18);</span><br><span class="line">  test04(name&#x3D;&gt;name,age&#x3D;&gt;age,res&#x3D;&gt;res);--此时不能test04(name&#x3D;&gt;name,18)，不能完成调用。</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>

<p>注;在调用存储过程时，=&gt;前面的变量为存储过程的形参且必须于存储过程中定义的一致，而=&gt;后的参数为实际参数。当然也不可以不定义变量保存实参</p>
</li>
<li><p>示例4：in，out参数问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create or replace procedure test05(name out varchar,age in int)</span><br><span class="line">as</span><br><span class="line">begin</span><br><span class="line">  dbms_output.put_line(&#39;age&#x3D;&#39;||age);</span><br><span class="line">  select &#39;xiaoming&#39; into name from dual;</span><br><span class="line">end;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">--调用上面的</span><br><span class="line">CREATE OR REPLACE PROCEDURE test</span><br><span class="line">AS</span><br><span class="line">  name varchar(10);</span><br><span class="line">  age int;</span><br><span class="line">begin</span><br><span class="line">  test05(name&#x3D;&gt;name,age&#x3D;&gt;10);</span><br><span class="line">dbms_output.put_line(&#39;name&#x3D;&#39;||name);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>

<p><strong>注：in代表输入，out用于输出</strong></p>
</li>
<li><p>示例5 ：异常处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create or replace procedure test06</span><br><span class="line">as</span><br><span class="line">age int;</span><br><span class="line">begin</span><br><span class="line">  DBMS_OUTPUT.ENABLE(1000000); --错误：buffer overflow, limit of 20000 bytes</span><br><span class="line">  age:&#x3D;10&#x2F;0;</span><br><span class="line">  dbms_output.put_line(age);</span><br><span class="line">exception </span><br><span class="line">  when others then</span><br><span class="line">	--打印详细错误信息</span><br><span class="line">    DBMS_OUTPUT.put_line(&#39;sqlcode : &#39; ||sqlcode||&#39; sqlerrm : &#39; ||sqlerrm);</span><br><span class="line">	DBMS_OUTPUT.put_line(&#39;error_trace&#39;||dbms_utility.format_error_backtrace);</span><br><span class="line">	exit;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE </span><br><span class="line">procedure     TEST02</span><br><span class="line">AS</span><br><span class="line">resstr VARCHAR2(100);</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line"> Execute immediate &#39;select * from dual&#39; into resstr;</span><br><span class="line"> dbms_output.put_line(&#39;数据是:&#39;||resstr);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例6 ：集合查询、循环、游标<br>遍历方式1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE </span><br><span class="line">procedure TEST61</span><br><span class="line">AS</span><br><span class="line">	--游标的定义</span><br><span class="line">	Cursor test_cursor is select * from BOND_INFO WHERE BOND_CODE&#x3D;&#39;111799852.IB&#39;;</span><br><span class="line">	cur test_cursor%rowtype;  --游标的类型，理解类似于list的泛型</span><br><span class="line">BEGIN</span><br><span class="line">	for cur in test_cursor loop</span><br><span class="line">		exit when test_cursor%notfound;</span><br><span class="line">		dbms_output.put_line(&#39;数据是:&#39;||cur.BOND_CODE);</span><br><span class="line">	end loop;</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>

<p>遍历方式2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> CREATE OR REPLACE </span><br><span class="line"> Procedure TEST62(res out Sys_Refcursor)</span><br><span class="line"> As</span><br><span class="line"> 	--引用数据类型</span><br><span class="line"> 	cur BOND_INFO%rowtype; </span><br><span class="line"> begin</span><br><span class="line"> 	--查询结果保存到游标中</span><br><span class="line"> 	open res for select * from BOND_INFO WHERE BOND_CODE&#x3D;&#39;111799852.IB&#39;;</span><br><span class="line"> 	DBMS_OUTPUT.put_line(&#39;游标长度-- &#39;||c_finance_quota1%rowcount);</span><br><span class="line"> </span><br><span class="line"> 	--open res;--打开游标,上面已打开</span><br><span class="line"> 	loop --开始循环</span><br><span class="line"> 		FETCH res INTO cur; --读取游标中数据</span><br><span class="line"> 		exit when res%notfound; --退出条件</span><br><span class="line"> 		dbms_output.put_line(&#39;数据是:&#39;||cur.BOND_CODE);</span><br><span class="line">end loop; --结束循环</span><br><span class="line"> End;</span><br></pre></td></tr></table></figure>

<p>7动态sql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE </span><br><span class="line">procedure     TEST02</span><br><span class="line">AS</span><br><span class="line">resstr VARCHAR2(100);</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line"> Execute immediate &#39;select * from dual&#39; into resstr;</span><br><span class="line"> dbms_output.put_line(&#39;数据是:&#39;||resstr);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-查询单科成绩最高的学生信息</title>
    <url>/blog/2017/07/01/Sql/SQL-%E6%9F%A5%E8%AF%A2%E5%8D%95%E7%A7%91%E6%88%90%E7%BB%A9%E6%9C%80%E9%AB%98%E7%9A%84%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##一 表结构如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table class(</span><br><span class="line">	id int auto_increment primary key,</span><br><span class="line">	name varchar(10),</span><br><span class="line">	score varchar(10),</span><br><span class="line">	subject varchar(10)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">insert into class values(default,&#39;张三&#39;,60,&#39;数学&#39;);</span><br><span class="line">insert into class values(default,&#39;张三&#39;,70,&#39;英语&#39;);</span><br><span class="line">insert into class values(default,&#39;李四&#39;,90,&#39;数学&#39;);</span><br><span class="line">insert into class values(default,&#39;李四&#39;,20,&#39;英语&#39;);</span><br><span class="line">insert into class values(default,&#39;王五&#39;,70,&#39;数学&#39;);</span><br><span class="line">insert into class values(default,&#39;王五&#39;,90,&#39;英语&#39;);</span><br></pre></td></tr></table></figure>

<p>##二 数据查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from class;</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-ea18c6e345f81752.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>##三. 查询单科成绩最高的学生信息</p>
<ol>
<li>– 首先查询 单科最高分<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select subject,MAX(score) from class group by subject;</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-e73526c1a4ed5e5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>2.– <strong>单科最高分信息(错误)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select subject,max(score),name from class group by subject;</span><br></pre></td></tr></table></figure>
<p>可以看到下图，查询结果并不对<br><img src="https://upload-images.jianshu.io/upload_images/2803682-1b7dca96752ccb98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>3.– 单科最高分信息(方式一)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select subject,score,name from class where (subject,score) in </span><br><span class="line">(select subject,MAX(score) from class group by subject);</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-c3170a0ef9fdadde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>4.– 单科最高分信息(方式二)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select c.* from  </span><br><span class="line">(select subject,MAX(score) score from class group by subject) d,class c</span><br><span class="line">where d.subject&#x3D;c.subject and  d.score&#x3D;c.score</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-29e84235344f180f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>参考：<br><a href="https://www.cnblogs.com/geaozhang/p/6839297.html" target="_blank" rel="noopener">https://www.cnblogs.com/geaozhang/p/6839297.html</a><br><a href="https://blog.csdn.net/u010827070/article/details/79712303" target="_blank" rel="noopener">https://blog.csdn.net/u010827070/article/details/79712303</a></p>
]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-索引</title>
    <url>/blog/2017/07/01/Sql/SQL-%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h1 id="一-普通索引"><a href="#一-普通索引" class="headerlink" title="一 普通索引"></a>一 普通索引</h1><h2 id="1-3种创建方式"><a href="#1-3种创建方式" class="headerlink" title="1.  3种创建方式"></a>1.  3种创建方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建索引方式一(上面创建表时直接指定)</span><br><span class="line">CREATE TABLE test(</span><br><span class="line">id int(10) PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">name varchar(20) comment &#39;姓名&#39;,</span><br><span class="line">index i_name1 (name,age)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建索引方式二(创建)</span><br><span class="line">CREATE INDEX i_name2 ON test(name);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建索引方式三(修改表)</span><br><span class="line">ALTER TABLE test ADD INDEX i_name3(name);</span><br></pre></td></tr></table></figure>
<h2 id="2-删除索引"><a href="#2-删除索引" class="headerlink" title="2. 删除索引"></a>2. 删除索引</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#显示索引</span><br><span class="line">SHOW INDEX FROM test;</span><br><span class="line">#删除索引</span><br><span class="line">DROP INDEX i_name1 ON test;</span><br></pre></td></tr></table></figure>
<h1 id="二-唯一索引"><a href="#二-唯一索引" class="headerlink" title="二 唯一索引"></a>二 唯一索引</h1><p>它与前面的普通索引类似，不同的就是：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一。<br>创建方式同上，需要在 关键字 INDEX 前加上 UNIQUE</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建索引方式二(创建)</span><br><span class="line">CREATE UNIQUE INDEX i_name2 ON test(name);</span><br></pre></td></tr></table></figure>

<h1 id="三-组合索引"><a href="#三-组合索引" class="headerlink" title="三 组合索引"></a>三 组合索引</h1><h2 id="1-创建"><a href="#1-创建" class="headerlink" title="1 创建"></a>1 创建</h2><p>和普通索引一样，只不过列名会多几个(username,password)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE INDEX i_name ON t_user(name,pwd);</span><br></pre></td></tr></table></figure>
<h2 id="2-原则"><a href="#2-原则" class="headerlink" title="2 原则"></a>2 原则</h2><p>最左优先原则：<br>index key on tablename（a,b,c）</p>
<p>select * from tablename where a=1 and …有效<br>select * from tablename where b=1 and …无效<br>select * from tablename where c=1 and …无效</p>
<p>也就是说 索引顺序的第一个(a)必须和WHERE后的第一个查询条件(a=1)顺序一样，否则会失效</p>
<h2 id="3-测试速度"><a href="#3-测试速度" class="headerlink" title="3 测试速度"></a>3 测试速度</h2><p>mysql：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- EXPLAIN ...</span><br><span class="line">EXPLAIN SELECT * from t_employee m WHERE m.address in (&#39;28.88261343248432&#39;,&#39;697.6149638161202&#39;,&#39;688.7925497151842&#39;,&#39;718.4714942411255&#39;,&#39;237.98116598090266&#39;,&#39;330.40502605066166&#39;);</span><br></pre></td></tr></table></figure>

<p>使用EXPLAIN 关键字查询，返回值有个type属性，若是<strong>ALL</strong>则没使用索引，若是其它<strong>（eg: range）</strong>则成功使用</p>
<p>oracle：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--创建索引</span><br><span class="line">create index index_sno on student(&#39;name&#39;);</span><br><span class="line">select * from all_indexes where table_name&#x3D;&#39;student&#39;;</span><br><span class="line"></span><br><span class="line">--查看执行计划（看索引是否被执行）</span><br><span class="line">explain plan for select * from bank where bankseq&#x3D;&#39;1&#39;;</span><br><span class="line">select * From Table(dbms_xplan.display());</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-查询命令</title>
    <url>/blog/2017/07/01/Sql/SQL-%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="一-数据库基本操作"><a href="#一-数据库基本操作" class="headerlink" title="一 数据库基本操作"></a>一 数据库基本操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#指定数据库</span><br><span class="line">use wx;</span><br><span class="line"></span><br><span class="line">#创建表</span><br><span class="line">create table test(</span><br><span class="line">id int(10) primary key auto_increment,</span><br><span class="line">name varchar(20) comment &#39;姓名&#39;,</span><br><span class="line">age int(10)</span><br><span class="line">) charset&#x3D;utf8 comment &#39;哈哈&#39;;</span><br><span class="line"></span><br><span class="line">#插入数据</span><br><span class="line">insert into test(id,name) values(1,&quot;战三&quot;);</span><br><span class="line">insert into test(id,name) values(2,&quot;两居&quot;);</span><br><span class="line"></span><br><span class="line">#更新数据</span><br><span class="line">update test </span><br><span class="line">set name&#x3D;&quot;李四&quot; </span><br><span class="line">where id &#x3D; 1;</span><br><span class="line"></span><br><span class="line">#删除数据</span><br><span class="line">delete from test where id &#x3D;1;</span><br><span class="line"></span><br><span class="line">#查询</span><br><span class="line">select * from test;</span><br><span class="line"></span><br><span class="line">#删除表</span><br><span class="line">drop table test;</span><br><span class="line"></span><br><span class="line">#修改表结构--增加列</span><br><span class="line">ALTER TABLE test ADD sex varchar(2) DEFAULT &#39;1&#39; comment &#39;性别&#39;;</span><br><span class="line">#修改表结构--修改列</span><br><span class="line">ALTER TABLE test MODIFY sex int(2);</span><br><span class="line">#修改表结构--删除列</span><br><span class="line">ALTER TABLE test DROP COLUMN sex;</span><br></pre></td></tr></table></figure>

<h2 id="二-高级查询"><a href="#二-高级查询" class="headerlink" title="二 高级查询"></a>二 高级查询</h2><p><strong>1. 新建表结构</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_employee(</span><br><span class="line">id int(10) primary key auto_increment,</span><br><span class="line">name varchar(20),</span><br><span class="line">age int(10)</span><br><span class="line">) CHARSET&#x3D;utf8 comment &quot;员工表&quot;;</span><br><span class="line"></span><br><span class="line">create table t_salary(</span><br><span class="line">id int(10) primary key auto_increment,</span><br><span class="line">money int(20),</span><br><span class="line">monch int(10)</span><br><span class="line">) CHARSET&#x3D;utf8 comment &quot;工资表&quot;;</span><br><span class="line"></span><br><span class="line">insert into t_employee values(1,&quot;张三&quot;,18);</span><br><span class="line">insert into t_employee values(2,&quot;李四&quot;,28);</span><br><span class="line">insert into t_employee values(3,&quot;王五&quot;,38);</span><br><span class="line"></span><br><span class="line">insert into t_salary values(1,1000,1);</span><br><span class="line">insert into t_salary values(2,20,2);</span><br><span class="line">insert into t_salary values(3,300,3);</span><br></pre></td></tr></table></figure>
<p><strong>2. 聚合查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#平局值&#x2F;和</span><br><span class="line">select avg(money),sum(money) from t_salary;</span><br><span class="line"># WHERE 关键字无法与聚合函数一起使用</span><br><span class="line">select * from t_salary t</span><br><span class="line">having t.avg(money) &gt;1;</span><br></pre></td></tr></table></figure>
<p><strong>3. 多表查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#多表查询，又称笛卡尔查询，查询结果：列是和 行是积</span><br><span class="line">select * from t_employee,t_salary;</span><br><span class="line"># 加上筛选条件，可以避免笛卡尔现象</span><br><span class="line">select * from t_employee e,t_salary s where e.age&gt;20 and s.monch&gt;2;</span><br></pre></td></tr></table></figure>
<p><strong>4. 连接查询</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#交叉查询(多表查询，又称笛卡尔查询，查询结果：列是和 行是积)</span><br><span class="line">select * from t_employee cross join t_salary;</span><br><span class="line">select * from t_employee,t_salary;</span><br><span class="line"></span><br><span class="line">#内连接(就是交叉查询多了查询条件)</span><br><span class="line">select * from t_employee e inner join t_salary s on e.age&gt;20 and s.monch&gt;2;</span><br><span class="line">select * from t_employee e,t_salary s where e.age&gt;20 and s.monch&gt;2;</span><br><span class="line"></span><br><span class="line">#外连接(outer 可以省略)</span><br><span class="line">select * from t_employee e left outer join t_salary s on e.age&gt;20 and s.monch&gt;2;</span><br><span class="line">select * from t_employee e right outer join t_salary s on e.age&gt;20 and s.monch&gt;2;</span><br><span class="line">select * from t_employee e full outer join t_salary s on e.age&gt;20 and s.monch&gt;2;</span><br></pre></td></tr></table></figure>

<p>关于INNER JOIN、 LEFT JOIN、 RIGHT JOIN、 FULL JOIN区别，借用雪峰大神的图：<br><img src="https://upload-images.jianshu.io/upload_images/2803682-46c49b18edb86a6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ol start="5">
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 联合查询(两个表的数据加到一起，必须有相同的查询列)</span><br><span class="line">select * from t_employee union select * from t_salary;</span><br><span class="line"># union all 会显示重复</span><br><span class="line">select * from t_employee union all select * from t_salary;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>参考附录：<br>廖雪峰文章：<a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1179610888796448" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/1177760294764384/1179610888796448</a></p>
]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-统计查询</title>
    <url>/blog/2017/07/01/Sql/SQL-%E7%BB%9F%E8%AE%A1%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-- 今天</span><br><span class="line">select * from sp_pass_record where to_days(pass_time) &#x3D; to_days(now());</span><br><span class="line">	</span><br><span class="line">-- 一周	</span><br><span class="line">select sex ss,COUNT(*) from sp_pass_record  where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;&#x3D; date(pass_time) group by ss;</span><br><span class="line"></span><br><span class="line">-- 按天统计</span><br><span class="line">select DATE_FORMAT(&#39;2020-01-11&#39;,&#39;%Y%-%m-%d&#39;) days,count(*) count from sp_pass_record group by days;</span><br><span class="line"></span><br><span class="line">-- 按周统计</span><br><span class="line">select DATE_FORMAT(&#39;2020-01-10 18:31:37&#39;,&#39;%Y-%u&#39;) weeks,count(*) count from sp_pass_record group by weeks;</span><br><span class="line"></span><br><span class="line">-- 按月统计</span><br><span class="line">select DATE_FORMAT(&#39;2020-01-10 18:31:37&#39;,&#39;%Y-%m&#39;) months,count(*) count from sp_pass_record group by months;</span><br><span class="line"></span><br><span class="line">-- 统计最近七天内的数据并按天分组</span><br><span class="line">SELECT</span><br><span class="line">	DATE_FORMAT(pass_time, &#39;%Y-%m-%d&#39; ) days,</span><br><span class="line">	count(*) count </span><br><span class="line">FROM</span><br><span class="line">(SELECT * FROM sp_pass_record WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY ) &lt;&#x3D; date(pass_time) ) as da</span><br><span class="line">GROUP BY days;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查询一天中每一个小时的记录数量</span><br><span class="line">SELECT DATE_FORMAT(pass_time, &#39;%k&#39; ) hour,count(*) count </span><br><span class="line">FROM (select * from sp_pass_record where to_days(pass_time) &#x3D; to_days(now())) as da</span><br><span class="line">GROUP BY hour;</span><br><span class="line"></span><br><span class="line">-- 查询一天中每一个小时的记录数量</span><br><span class="line">SELECT HOUR(e.pass_time) as Hour,count(*) as Count </span><br><span class="line">FROM sp_pass_record e </span><br><span class="line">WHERE e.pass_time &gt;&#x3D; str_to_date(&#39;2020-01-17 00:00:00&#39;,&#39;%Y-%m-%d %T&#39;) AND e.pass_time &lt; str_to_date(&#39;2020-01-17 23:59:59&#39;,&#39;%Y-%m-%d %T&#39;) </span><br><span class="line">GROUP BY HOUR(e.pass_time) ORDER BY Hour(e.pass_time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 24小时统计</span><br><span class="line">SELECT DATE_FORMAT(pass_time, &#39;%k&#39; ) hour,count(*) count </span><br><span class="line">FROM sp_pass_record where to_days(pass_time) &#x3D; to_days(now())-2</span><br><span class="line">GROUP BY hour;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select @num:&#x3D;@num+1,date_format(adddate(&#39;2020-01-19&#39;, INTERVAL @num HOUR),&#39;%k&#39;) as hour</span><br><span class="line">from sp_pass_record,(select @num:&#x3D;0) t </span><br><span class="line">where adddate(&#39;2020-01-19&#39;, INTERVAL @num HOUR) &lt;&#x3D; date_format(&#39;2020-01-20&#39;,&#39;%Y-%m-%d&#39;)</span><br><span class="line"></span><br><span class="line">-- 24小时补全</span><br><span class="line">select @num:&#x3D;@num+1,date_format(adddate(now(), INTERVAL @num HOUR),&#39;%k&#39;) as hour</span><br><span class="line">from sp_pass_record,(select @num:&#x3D;0) t </span><br><span class="line">where adddate(now(), INTERVAL @num HOUR) &lt;&#x3D; date_format(&#39;2020-01-20&#39;,&#39;%Y-%m-%d&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT a.num,a.hour,b.hour,IFNULL(b.count,0) count FROM </span><br><span class="line">(select @num:&#x3D;@num+1 as num,date_format(adddate(&#39;2020-01-18&#39;, INTERVAL @num HOUR),&#39;%k&#39;) as hour </span><br><span class="line">from sp_pass_record,(select @num:&#x3D;0) t </span><br><span class="line">where adddate(&#39;2020-01-18&#39;, INTERVAL @num HOUR) &lt;&#x3D; date_format(&#39;2020-01-19&#39;,&#39;%Y-%m-%d&#39;)</span><br><span class="line">) a </span><br><span class="line">LEFT JOIN </span><br><span class="line">(SELECT DATE_FORMAT(pass_time, &#39;%k&#39; ) hour,count(*) count </span><br><span class="line">FROM sp_pass_record </span><br><span class="line">where pass_time BETWEEN &#39;2020-01-17&#39; and &#39;2020-01-18&#39; GROUP BY hour</span><br><span class="line">) b</span><br><span class="line">on a.hour &#x3D; b.hour</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql Mybatis 有则更新无则插入(批量)</title>
    <url>/blog/2021/03/01/Sql/Sql%20Mybatis%20%E6%9C%89%E5%88%99%E6%9B%B4%E6%96%B0%E6%97%A0%E5%88%99%E6%8F%92%E5%85%A5(%E6%89%B9%E9%87%8F)/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>#安装环境及版本：</p>
<ul>
<li>系统：Mysql \ Oracle</li>
</ul>
<h1 id="一-基础表数据"><a href="#一-基础表数据" class="headerlink" title="一  基础表数据"></a>一  基础表数据</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;sys_user&#96; (</span><br><span class="line">  &#96;id&#96; varchar(100) primary key,</span><br><span class="line">  &#96;username&#96; varchar(100) not null,</span><br><span class="line">  &#96;password&#96; varchar(100) not null,</span><br><span class="line">  &#96;status&#96; int not null</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure>



<h1 id="二-Mysql"><a href="#二-Mysql" class="headerlink" title="二 Mysql"></a>二 Mysql</h1><h2 id="1-批量插入"><a href="#1-批量插入" class="headerlink" title="1 批量插入"></a>1 批量插入</h2><p>mapper 接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 批量新增数据（MyBatis原生foreach方法）</span><br><span class="line"> *</span><br><span class="line"> * @param entities List&lt;SysUser&gt; 实例对象列表</span><br><span class="line"> * @return 影响行数</span><br><span class="line"> *&#x2F;</span><br><span class="line">int insertBatch(@Param(&quot;entities&quot;) List&lt;SysUser&gt; entities);</span><br></pre></td></tr></table></figure>

<p>mapper xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;insertBatch&quot; keyProperty&#x3D;&quot;id&quot; useGeneratedKeys&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    insert into sys_user(id, username, password, status)</span><br><span class="line">    values</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;entities&quot; item&#x3D;&quot;entity&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">        (#&#123;entity.id&#125;, #&#123;entity.username&#125;, #&#123;entity.password&#125;, #&#123;entity.status&#125;)</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure>



<h2 id="2-有则更新-无则插入-单条"><a href="#2-有则更新-无则插入-单条" class="headerlink" title="2  有则更新 无则插入 单条"></a>2  有则更新 无则插入 单条</h2><p>mapper 接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 新增或按主键更新数据（MyBatis原生foreach方法）</span><br><span class="line"> *</span><br><span class="line"> * @param entities 实例对象列表</span><br><span class="line"> * @return 影响行数</span><br><span class="line"> *&#x2F;</span><br><span class="line">int insertOrUpdate(@Param(&quot;sysuser&quot;) SysUser sysuser);</span><br></pre></td></tr></table></figure>

<p>mapper xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;insertOrUpdate&quot; keyProperty&#x3D;&quot;id&quot; useGeneratedKeys&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    insert into </span><br><span class="line">    sys_user(id, username, password, status)</span><br><span class="line">    values</span><br><span class="line">    (#&#123;sysuser.id&#125;, #&#123;sysuser.username&#125;, #&#123;sysuser.password&#125;, #&#123;sysuser.status&#125;)</span><br><span class="line">    on duplicate key update</span><br><span class="line">    id &#x3D; values(id) , username &#x3D; values(username) , password &#x3D; values(password) , status &#x3D; values(status)</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure>



<h2 id="3-有则更新-无则插入-批量"><a href="#3-有则更新-无则插入-批量" class="headerlink" title="3 有则更新 无则插入 批量"></a>3 有则更新 无则插入 批量</h2><p>mapper 接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 批量新增或按主键更新数据（MyBatis原生foreach方法）</span><br><span class="line"> *</span><br><span class="line"> * @param entities List&lt;SysUser&gt; 实例对象列表</span><br><span class="line"> * @return 影响行数</span><br><span class="line"> *&#x2F;</span><br><span class="line">int insertOrUpdateBatch(@Param(&quot;entities&quot;) List&lt;SysUser&gt; entities);</span><br></pre></td></tr></table></figure>

<p>mapper xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;insertOrUpdateBatch&quot; keyProperty&#x3D;&quot;id&quot; useGeneratedKeys&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    insert into sys_user(id, username, password, status)</span><br><span class="line">    values</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;entities&quot; item&#x3D;&quot;entity&quot; separator&#x3D;&quot;,&quot;&gt;</span><br><span class="line">        (#&#123;entity.id&#125;, #&#123;entity.username&#125;, #&#123;entity.password&#125;, #&#123;entity.status&#125;)</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">    on duplicate key update</span><br><span class="line">    id &#x3D; values(id) , username &#x3D; values(username) , password &#x3D; values(password) , status &#x3D; values(status)</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure>



<h1 id="三-Oracle"><a href="#三-Oracle" class="headerlink" title="三 Oracle"></a>三 Oracle</h1><h2 id="1-批量插入-1"><a href="#1-批量插入-1" class="headerlink" title="1 批量插入"></a>1 批量插入</h2><p>mapper 接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int insertBatch(List&lt;SysUser&gt; list);</span><br></pre></td></tr></table></figure>

<p>mapper xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;insertBatch&quot; parameterType&#x3D;&quot;java.util.List&quot; &gt;</span><br><span class="line">  insert into sys_user(id, username, password, status)</span><br><span class="line">  &lt;!--oracle 没有values，只能这种--&gt;</span><br><span class="line">  select A.* from(</span><br><span class="line">    &lt;foreach collection&#x3D;&quot;list&quot; item&#x3D;&quot;item&quot; index&#x3D;&quot;index&quot; separator&#x3D;&quot;union all&quot;&gt;</span><br><span class="line">      select</span><br><span class="line">         #&#123;item.id&#125; id,</span><br><span class="line">      	#&#123;item.username&#125; username,</span><br><span class="line">      	#&#123;item.password&#125; password,</span><br><span class="line">      	#&#123;item.status&#125; status</span><br><span class="line">      from dual</span><br><span class="line">    &lt;&#x2F;foreach&gt;</span><br><span class="line">  )A</span><br><span class="line">&lt;&#x2F;insert&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-有则更新-无则插入-单条-1"><a href="#2-有则更新-无则插入-单条-1" class="headerlink" title="2 有则更新 无则插入 单条"></a>2 有则更新 无则插入 单条</h2><p>mapper 接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int insertOrUpdateBatch(SysUser sysuser);</span><br></pre></td></tr></table></figure>

<p>mapper xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--批量插入或更新--&gt;</span><br><span class="line">&lt;update id&#x3D;&quot;insertOrUpdateBatch&quot; parameterType&#x3D;&quot;java.util.List&quot; &gt;</span><br><span class="line">  merge into sys_user t1</span><br><span class="line">  using (</span><br><span class="line">    select</span><br><span class="line">      #&#123;sysuser.id&#125; id,</span><br><span class="line">      #&#123;sysuser.username&#125; username,</span><br><span class="line">      #&#123;sysuser.password&#125; password,</span><br><span class="line">      #&#123;sysuser.status&#125; status</span><br><span class="line">    from dual</span><br><span class="line">  ) t2</span><br><span class="line">  on (t1.id&#x3D;t2.id)</span><br><span class="line">  when matched then</span><br><span class="line">    update</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">      &lt;if test&#x3D;&quot;username!&#x3D;null&quot;&gt;</span><br><span class="line">        t1.username&#x3D;#&#123;sysuser.username&#125;,</span><br><span class="line">      &lt;&#x2F;if&gt;</span><br><span class="line">      &lt;if test&#x3D;&quot;password!&#x3D;null&quot;&gt;</span><br><span class="line">        t1.password&#x3D;#&#123;sysuser.password&#125;,</span><br><span class="line">      &lt;&#x2F;if&gt;</span><br><span class="line">      &lt;if test&#x3D;&quot;status!&#x3D;null&quot;&gt;</span><br><span class="line">      	&lt;!--直接使用t2的值,待验证--&gt;</span><br><span class="line">        t1.status&#x3D;t2.status,</span><br><span class="line">      &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;&#x2F;set&gt;</span><br><span class="line">  when not matched then</span><br><span class="line">    insert (id, username, password, status)</span><br><span class="line">    values (t2.id, t2.username, t2.password,t2.status)</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure>



<h2 id="3-有则更新-无则插入-批量-1"><a href="#3-有则更新-无则插入-批量-1" class="headerlink" title="3 有则更新 无则插入 批量"></a>3 有则更新 无则插入 批量</h2><p>mapper 接口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int insertOrUpdateBatch(List&lt;DefaultEnterprise&gt; list);</span><br></pre></td></tr></table></figure>

<p>mapper xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--批量插入或更新--&gt;</span><br><span class="line">&lt;update id&#x3D;&quot;insertOrUpdateBatch&quot; parameterType&#x3D;&quot;java.util.List&quot; &gt;</span><br><span class="line">  merge into sys_user t1</span><br><span class="line">  using (</span><br><span class="line">  &lt;foreach collection&#x3D;&quot;list&quot; item&#x3D;&quot;item&quot; index&#x3D;&quot;index&quot; separator&#x3D;&quot;union all&quot;&gt;</span><br><span class="line">    select</span><br><span class="line">      #&#123;item.id&#125; id,</span><br><span class="line">      #&#123;item.username&#125; username,</span><br><span class="line">      #&#123;item.password&#125; password,</span><br><span class="line">      #&#123;item.status&#125; status</span><br><span class="line">    from dual</span><br><span class="line">  &lt;&#x2F;foreach&gt;</span><br><span class="line">  ) t2</span><br><span class="line">  on (t1.id&#x3D;t2.id)</span><br><span class="line">  when matched then</span><br><span class="line">    update</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">      &lt;if test&#x3D;&quot;item.username!&#x3D;null&quot;&gt;</span><br><span class="line">        t1.username&#x3D;t2.username,</span><br><span class="line">      &lt;&#x2F;if&gt;</span><br><span class="line">       &lt;if test&#x3D;&quot;item.password!&#x3D;null&quot;&gt;</span><br><span class="line">        t1.password&#x3D;t2.password,</span><br><span class="line">      &lt;&#x2F;if&gt;</span><br><span class="line">       &lt;if test&#x3D;&quot;item.status!&#x3D;null&quot;&gt;</span><br><span class="line">        t1.status&#x3D;t2.status,</span><br><span class="line">      &lt;&#x2F;if&gt;</span><br><span class="line">    &lt;&#x2F;set&gt;</span><br><span class="line">  when not matched then</span><br><span class="line">    insert (id, username, password, status)</span><br><span class="line">    values (t2.id, t2.username, t2.password,t2.status)</span><br><span class="line">&lt;&#x2F;update&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos Mysql 安装</title>
    <url>/blog/2018/07/01/Linux/Centos/Centos%20Mysql%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h4 id="1-添加MySQL-存储库"><a href="#1-添加MySQL-存储库" class="headerlink" title="1 添加MySQL 存储库"></a>1 添加MySQL 存储库</h4><ol>
<li>添加Mysql5.7仓库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rpm -ivh https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure></li>
<li>确认Mysql仓库成功添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum repolist all | grep mysql | grep enabled</span><br></pre></td></tr></table></figure>
<h4 id="2-使用Zypper安装MySQL"><a href="#2-使用Zypper安装MySQL" class="headerlink" title="2  使用Zypper安装MySQL"></a>2  使用Zypper安装MySQL</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum -y install mysql-community-server</span><br></pre></td></tr></table></figure>
<h4 id="3-启动MySQL服务器"><a href="#3-启动MySQL服务器" class="headerlink" title="3 启动MySQL服务器"></a>3 启动MySQL服务器</h4></li>
</ol>
<p>使用以下命令启动MySQL服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service mysqld start</span><br><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure>
<p>您可以使用以下命令检查MySQL服务器的状态：    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service mysql status</span><br><span class="line">sudo systemctl status mysqld</span><br></pre></td></tr></table></figure>
<p>首次启动服务器时，将初始化服务器。‘root’@’localhost’ 创建 一个超级用户帐户。设置超级用户的密码并将其存储在错误日志文件中。要显示它，请使用以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">cat &#x2F;var&#x2F;log&#x2F;mysqld.log | grep -i &#39;temporary password&#39;</span><br></pre></td></tr></table></figure>
<p>通过使用生成的临时密码登录并尽快为超级用户帐户设置自定义密码，以更改root密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;&#x2F;登录mysql</span><br><span class="line">shell&gt; mysql -uroot -p</span><br><span class="line">&#x2F;&#x2F;设置新密码</span><br><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;MyNewPass4!&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="4-防火墙"><a href="#4-防火墙" class="headerlink" title="4  防火墙"></a>4  防火墙</h4><p>1 放行端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim &#x2F;etc&#x2F;sysconfig&#x2F;SuSEfirewall2</span><br><span class="line">&#x2F;&#x2F;加上端口(多个用逗号分开)</span><br><span class="line">FW_SERVICES_EXT_TCP&#x3D;”22,80,8090″</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>启动、关闭、重启防火墙<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ rcSuSEfirewall2 start&#x2F;stop&#x2F;restart</span><br></pre></td></tr></table></figure>
<h4 id="5-访问："><a href="#5-访问：" class="headerlink" title="5 访问："></a>5 访问：</h4></li>
<li>授权用户远程访问<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入mysql命令行(root:root)</span><br><span class="line">shell&gt; mysql&gt; grant all on *.* to root@&#39;%&#39; identified by &#39;root&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li>
<li>重启<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo service mysqld restart</span><br></pre></td></tr></table></figure></li>
<li>配置文件位于<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br></pre></td></tr></table></figure></li>
<li>自启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux/Centos/Centos 环境</title>
    <url>/blog/2021/06/02/Linux/Centos/Centos%20%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="一-Jdk"><a href="#一-Jdk" class="headerlink" title="一 Jdk"></a>一 Jdk</h2><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># java 8</span><br><span class="line">yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># java11</span><br><span class="line">yum install java-11-openjdk -y</span><br></pre></td></tr></table></figure>

<p>多个jdk切换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alternatives --config java</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Suse Linux 12 Ftp使用</title>
    <url>/blog/2018/07/01/Linux/Suse/Suse%20Linux%2012%20Ftp%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="安装环境及版本："><a href="#安装环境及版本：" class="headerlink" title="安装环境及版本："></a>安装环境及版本：</h2><ul>
<li>系统：SUSE Linux Enterprise Server 12 SP2</li>
<li>Ftp: </li>
</ul>
<h4 id="一-安装启动"><a href="#一-安装启动" class="headerlink" title="一 安装启动"></a>一 安装启动</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;suse 12 自带ftp功能，直接启动即可</span><br><span class="line">service vsftpd start</span><br><span class="line">&#x2F;&#x2F;没有则安装</span><br><span class="line">zypper install vsftpd</span><br><span class="line">&#x2F;&#x2F;查看ftp运行状态</span><br><span class="line">service vsftpd status</span><br></pre></td></tr></table></figure>

<h4 id="二-使用root连接-不建议-："><a href="#二-使用root连接-不建议-：" class="headerlink" title="二 使用root连接(不建议)："></a>二 使用root连接(不建议)：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell: ftp 192.168.1.1</span><br><span class="line">&#x2F;&#x2F;Root账号登录失败530</span><br><span class="line">将root从&#x2F;etc&#x2F;ftpusers文件里删除或者加上注释,并重启ftp服务</span><br></pre></td></tr></table></figure>

<h4 id="二-添加新的连接用户-建议"><a href="#二-添加新的连接用户-建议" class="headerlink" title="二 添加新的连接用户(建议)"></a>二 添加新的连接用户(建议)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;增加用户ftp1，并制定ftpuser用户的主目录为&#x2F;home&#x2F;ftpuser</span><br><span class="line">useradd -m -d &#x2F;home&#x2F;ftpuser ftpuser</span><br><span class="line">passwd ftpuser &#x2F;&#x2F;为ftpuser设置密码</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改文件夹及子文件所属权限</span><br><span class="line">chown -R ftpuser:root &#x2F;home&#x2F;ftpuser</span><br><span class="line">&#x2F;&#x2F;修改文件夹及子文件读写权限</span><br><span class="line">chmod -R 777 &#x2F;home&#x2F;ftpuser</span><br></pre></td></tr></table></figure>

<h4 id="三-配置文件-上传失败550问题"><a href="#三-配置文件-上传失败550问题" class="headerlink" title="三 配置文件(上传失败550问题)"></a>三 配置文件(上传失败550问题)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell: vim &#x2F;etc&#x2F;vsftpd.conf</span><br><span class="line">&#x2F;&#x2F;启动向服务器写的权限</span><br><span class="line">write_enable&#x3D;YES  </span><br><span class="line">&#x2F;&#x2F;允许本地用户登录</span><br><span class="line">local_enable&#x3D;YES</span><br></pre></td></tr></table></figure>
<p><strong>/home/ftpuser文件夹及其子文件夹必须所属ftpuser用户</strong></p>
<h4 id="四-重启"><a href="#四-重启" class="headerlink" title="四 重启"></a>四 重启</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;每次修改配置文件需要重启服务</span><br><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure>

<h4 id="五-防火墙"><a href="#五-防火墙" class="headerlink" title="五 防火墙"></a>五 防火墙</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;每次修改配置文件需要重启服务</span><br><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure>

<h4 id="Linux用户语法（附加学习）："><a href="#Linux用户语法（附加学习）：" class="headerlink" title="Linux用户语法（附加学习）："></a>Linux用户语法（附加学习）：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;新增</span><br><span class="line">useradd -d &#x2F;home&#x2F;ftpUser -s &#x2F;sbin&#x2F;nologin -g users -G root ftpUser -m</span><br><span class="line">useradd 选项 用户名</span><br><span class="line">-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</span><br><span class="line">-g 用户组 指定用户所属的用户组。</span><br><span class="line">-G 用户组，用户组 指定用户所属的附加组。</span><br><span class="line">-s Shell文件 指定用户的登录Shell(&#x2F;bin&#x2F;sh)。</span><br><span class="line">&#x2F;&#x2F;修改</span><br><span class="line">usermod -s &#x2F;sbin&#x2F;nologin ftp1	&#x2F;&#x2F;限定用户ftp1不能telnet，只能ftp    </span><br><span class="line">usermod -s &#x2F;bin&#x2F;sh ftp1	&#x2F;&#x2F;用户ftp1恢复正常</span><br><span class="line">usermod -d &#x2F;ftp1 ftp1	&#x2F;&#x2F;更改用户ftp1的主目录为&#x2F;ftp1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;删除</span><br><span class="line">userdel ftu1</span><br><span class="line"></span><br><span class="line">文件夹权限</span><br><span class="line">chown -R ftp1 &#x2F;home&#x2F;ftp1</span><br><span class="line">chmod -R 777 &#x2F;home&#x2F;ftp1</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 基本命令</title>
    <url>/blog/2018/07/01/Linux/Centos/Centos%20%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h4 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h4><pre><code>搜索软件
yum search package
安装软件
yum install package
安装某个版本的软件包
yum install package=version
卸载某个软件包
yum remove package
升级某个软件包
yum update package</code></pre><h4 id="源："><a href="#源：" class="headerlink" title="源："></a>源：</h4><pre><code>-- 查看源
yum repolist
-- 禁用原来无效的源
yum --disable repoid
-- 查询是否安装了 某个yum源
rpm -qa |grep repo-name  
-- 删除该yum源
rpm -e repo-name
yum remove repo-name

--1 首先备份
mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup

--2 阿里源
wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo

--2 网易开源镜像
wget https://mirrors.163.com/.help/CentOS7-Base-163.repo
mv CentOS7-Base-163.repo CentOS-Base.repo

--2 fedora的epel仓库(非官方源)
yum install epel-release

--3 添加好以后需要先刷新：
yum clean all
yum makecache</code></pre><p><a href="https://zh.opensuse.org/%E8%BD%AF%E4%BB%B6%E6%BA%90%E9%95%9C%E5%83%8F%E7%AB%99%E7%82%B9#.E5.AE.98.E6.96.B9.E9.95.9C.E5.83.8F.E7.AB.99.E7.82.B9.E5.88.97.E8.A1.A8" target="_blank" rel="noopener">参考官网</a></p>
<h4 id="SSH："><a href="#SSH：" class="headerlink" title="SSH："></a>SSH：</h4><pre><code>$ vim /etc/ssh/sshd_config
-- 做如下修改：
PermitRootLogin yes  //权限root登录
PasswordAuthentication yes  //密码验证

防火墙端口：
$ vim /etc/sysconfig/SuSEfirewall2
-- 做如下修改
FW_SERVICES_EXT_UDP=&quot;22&quot;
FW_SERVICES_EXT_TCP=&quot;22&quot;

--SSH自启动：
$ systemctl enable sshd.service
--SSH状态/重启
$ systemctl status/restart sshd.service</code></pre><h4 id="防火墙："><a href="#防火墙：" class="headerlink" title="防火墙："></a>防火墙：</h4><pre><code>--启动防火墙
systemctl start firewalld 
systemctl stop firewalld
--自启
systemctl enable firewalld
sytemctl disable firewalld</code></pre><h4 id="自启动："><a href="#自启动：" class="headerlink" title="自启动："></a>自启动：</h4><pre><code>1 vim /etc/init.d/after.local
    --添加如下
    /usr/local/run.sh
2 新建脚本 vim /usr/local/run.sh
    --添加如下
    echo &quot;this is &quot; &gt; /usr/local/1.txt
3 脚本赋值    权限
    chmod +x run.sh
4 重启看/usr/local/1.txt
    reboot</code></pre><p><a href="https://blog.csdn.net/rokii/article/details/6316443" target="_blank" rel="noopener">参考</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>centos</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Suse Linux 12 Http Socks5 SSR</title>
    <url>/blog/2018/07/01/Linux/Suse/Suse%20Linux%2012%20Http%20Socks5%20SSR/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="安装环境及版本："><a href="#安装环境及版本：" class="headerlink" title="安装环境及版本："></a>安装环境及版本：</h2><ul>
<li>系统：SUSE Linux Enterprise Server 12 SP2</li>
<li>TinyProxy: http</li>
</ul>
<h2 id="开源镜像"><a href="#开源镜像" class="headerlink" title="开源镜像"></a>开源镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 网易开源镜像</span><br><span class="line">zypper ar -f http:&#x2F;&#x2F;mirrors.163.com&#x2F;openSUSE&#x2F;distribution&#x2F;openSUSE-stable&#x2F;repo&#x2F;oss&#x2F; oss</span><br></pre></td></tr></table></figure>

<h2 id="TinyProxy"><a href="#TinyProxy" class="headerlink" title="TinyProxy"></a>TinyProxy</h2><ol>
<li>安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zypper in tinyproxy</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改配置文件 vim /etc/tinyproxy.conf</span></span><br><span class="line">Port 8888		#预设端口8888,可以更改</span><br><span class="line">Allow 127.0.0.1	#设置允许连接的ip和网段，默认全都禁止，如果全注释掉，则表示允许所有连接</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rcSuSEfirewall2 stop	#关闭防火墙</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>启动</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start tinyproxy.service</span><br><span class="line">service tinyproxy restart</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IE浏览器-Internet选项-连接-局域网设置-代理服务器</span><br><span class="line">其他浏览器一般可以直接设置代理</span><br></pre></td></tr></table></figure>

<h2 id="Socks5"><a href="#Socks5" class="headerlink" title="Socks5"></a>Socks5</h2><ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zypper in gcc openldap-devel pam-devel openssl-devel</span><br><span class="line">zypper in install gcc-c++ libstdc++-devel</span><br><span class="line">zypper in install binutils</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;jaist.dl.sourceforge.net&#x2F;project&#x2F;ss5&#x2F;ss5&#x2F;3.8.9-8&#x2F;ss5-3.8.9-8.tar.gz</span><br><span class="line"></span><br><span class="line">tar xf ss5-3.8.9-8.tar.gz</span><br><span class="line">cd ss5-3.8.9</span><br><span class="line">.&#x2F;configure </span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">cd &#x2F;etc&#x2F;opt&#x2F;ss5&#x2F;</span><br><span class="line">cp ss5.conf ss5.conf.org</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>配置</p>
</li>
<li><p>启动</p>
</li>
<li><p>使用</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Suse Linux 12 Nginx 安装</title>
    <url>/blog/2018/07/01/Linux/Suse/Suse%20Linux%2012%20Nginx%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="安装环境及版本："><a href="#安装环境及版本：" class="headerlink" title="安装环境及版本："></a>安装环境及版本：</h2><ul>
<li>系统：SUSE Linux Enterprise Server 12 SP2</li>
<li>Nginx : Nginx </li>
</ul>
<h4 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h4><pre><code>-- 添加源
zypper ar -f http://mirrors.163.com/openSUSE/distribution/openSUSE-stable/repo/oss/ oss
--更新
zypper refresh
-- 安装
zypper in nginx</code></pre><h4 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h4><pre><code>//成功后会有界面
# nginx
//开机自启
systemctl enable nginx</code></pre><h4 id="防火墙："><a href="#防火墙：" class="headerlink" title="防火墙："></a>防火墙：</h4><pre><code>1 放行端口
    $ vim /etc/sysconfig/SuSEfirewall2
    --加上端口(多个用逗号分开)
    FW_SERVICES_EXT_TCP=”22,80,8090″
2. 启动、关闭、重启防火墙：
    $ rcSuSEfirewall2 start/stop/restart</code></pre><h4 id="远程访问："><a href="#远程访问：" class="headerlink" title="远程访问："></a>远程访问：</h4><pre><code>http://ip:80/
-- 日志记录
/var/log/nignx/
-- vim /srv/www/htdocs/index.html
    &lt;html&gt;
    &lt;body&gt;
        &lt;h1&gt;nginx没有默认index&lt;/h1&gt;
    &lt;/body&gt;
    &lt;/html&gt;</code></pre><h4 id="代理转发："><a href="#代理转发：" class="headerlink" title="代理转发："></a>代理转发：</h4><pre><code>//sudo vim /etc/nginx/nginx.conf

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    server {
        #监听端口
        listen       80;
        #监听地址
        server_name  localhost;

        location / {
            proxy_pass  http://localhost:8081;
        }
        location /jian {
            proxy_pass  https://www.jianshu.com/;
        }
    }
}</code></pre><p>代理说明：<br>访问 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A80" target="_blank" rel="noopener">http://localhost:80</a> 实际是：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Flocalhost%3A8081" target="_blank" rel="noopener">https://localhost:8081</a><br>访问 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%2Fjian" target="_blank" rel="noopener">http://localhost/jian</a> 实际是：<a href="https://www.jianshu.com/" target="_blank" rel="noopener">https://www.jianshu.com</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Suse Linux 12 Mysql安装</title>
    <url>/blog/2018/07/01/Linux/Suse/Suse%20Linux%2012%20Mysql%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="安装环境及版本："><a href="#安装环境及版本：" class="headerlink" title="安装环境及版本："></a>安装环境及版本：</h2><ul>
<li>系统：SUSE Linux Enterprise Server 12 SP2</li>
<li>Mysql:  5.7 or 8</li>
<li>Repository 教程官网：<a href="https://dev.mysql.com/doc/mysql-sles-repo-quick-guide/en/" target="_blank" rel="noopener">https://dev.mysql.com/doc/mysql-sles-repo-quick-guide/en/</a></li>
<li>RPM 教程官网：<a href="https://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/linux-installation-rpm.html</a></li>
</ul>
<h2 id="一-使用Repository-方式安装"><a href="#一-使用Repository-方式安装" class="headerlink" title="一 使用Repository 方式安装"></a>一 使用Repository 方式安装</h2><h4 id="1-添加MySQL-SLES存储库"><a href="#1-添加MySQL-SLES存储库" class="headerlink" title="1 添加MySQL SLES存储库"></a>1 添加MySQL SLES存储库</h4><ol>
<li><p>转到<a href="https://dev.mysql.com/downloads/repo/suse/上的MySQL" target="_blank" rel="noopener">https://dev.mysql.com/downloads/repo/suse/上的MySQL</a> SLES存储库下载页面 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;repo.mysql.com&#x2F;&#x2F;mysql80-community-release-sles12-3.noarch.rpm</span><br></pre></td></tr></table></figure></li>
<li><p>选择并下载适用于您的SLES版本的发行包。</p>
</li>
<li><p>使用以下命令安装下载的发行包，并替换 <em><code>package-name</code></em>为下载的包的名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo rpm -Uvh package-name.rpm</span><br></pre></td></tr></table></figure>
<h4 id="2-导入MySQL-GnuPG密钥"><a href="#2-导入MySQL-GnuPG密钥" class="headerlink" title="2 导入MySQL GnuPG密钥"></a>2 导入MySQL GnuPG密钥</h4><p> shell&gt; sudo rpm –import /etc/RPM-GPG-KEY-mysql</p>
<h4 id="3-选择发行系列"><a href="#3-选择发行系列" class="headerlink" title="3 选择发行系列"></a>3 选择发行系列</h4></li>
<li><p>查看MySQL SLES存储库中的所有子存储库，并查看启用或禁用了哪些子存储库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; zypper repos | grep mysql.*community</span><br></pre></td></tr></table></figure></li>
<li><p>默认启用的MySQL 8.0子存储库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo zypper modifyrepo -d mysql80-community</span><br></pre></td></tr></table></figure></li>
<li><p>要为MySQL 5.7启用子存储库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo zypper modifyrepo -e mysql57-community</span><br></pre></td></tr></table></figure></li>
<li><p>刷新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo zypper refresh</span><br></pre></td></tr></table></figure>
<h4 id="4-使用Zypper安装MySQL"><a href="#4-使用Zypper安装MySQL" class="headerlink" title="4  使用Zypper安装MySQL"></a>4  使用Zypper安装MySQL</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo zypper install mysql-community-server</span><br></pre></td></tr></table></figure>
<h4 id="5-启动MySQL服务器"><a href="#5-启动MySQL服务器" class="headerlink" title="5 启动MySQL服务器"></a>5 启动MySQL服务器</h4></li>
</ol>
<p>使用以下命令启动MySQL服务器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; sudo service mysql start</span><br><span class="line">&#x2F;&#x2F;MySQL运行状态</span><br><span class="line">shell&gt; sudo service mysql status</span><br></pre></td></tr></table></figure>
<p>查看root默认密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br></pre></td></tr></table></figure>
<p>登录并修改默认密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; mysql -uroot -p</span><br><span class="line">&#x2F;&#x2F;设置新密码 方式1</span><br><span class="line">shell&gt; mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;MyNewPass4!&#39;;</span><br><span class="line">&#x2F;&#x2F;设置新密码 方式2</span><br><span class="line">shell&gt; mysqladmin -u用户名 -p旧密码 password 新密码</span><br></pre></td></tr></table></figure>

<h4 id="6-远程访问："><a href="#6-远程访问：" class="headerlink" title="6 远程访问："></a>6 远程访问：</h4><ol>
<li>开放3306端口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;其中bind-address &#x3D; 127.0.0.1注释了</span><br><span class="line">shell&gt; vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line">shell&gt; vim &#x2F;etc&#x2F;my.cnf</span><br></pre></td></tr></table></figure></li>
<li>授权用户远程访问<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入mysql命令行(root:root)</span><br><span class="line">shell&gt; mysql&gt; grant all on *.* to root@&#39;%&#39; identified by &#39;MyNewPass4!&#39;;</span><br><span class="line">shell&gt; mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure></li>
<li>重启<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shell&gt; service mysql restart</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="7-重置密码："><a href="#7-重置密码：" class="headerlink" title="7 重置密码："></a>7 重置密码：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#编辑 &#x2F;etc&#x2F;my.cnf，添加</span><br><span class="line">[mysqld]</span><br><span class="line">	skip-grant-tables</span><br><span class="line">	</span><br><span class="line">#重启后连接mysql，直接回车即可，不需要输入密码</span><br><span class="line">shell&gt; mysql -u root -p</span><br><span class="line"></span><br><span class="line">#更新root用户密码(下面两句执行两遍，第一遍可能报错)</span><br><span class="line">shell&gt; mysql&gt; set password for root@localhost &#x3D; password(&#39;123456&#39;);</span><br><span class="line">shell&gt; mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;退出后注释skip-grant-tables，并重启</span><br></pre></td></tr></table></figure>



<h2 id="二-使用RPM方式安装"><a href="#二-使用RPM方式安装" class="headerlink" title="二 使用RPM方式安装"></a>二 使用RPM方式安装</h2><p>1 下载安装包<br>官网：<a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;cdn.mysql.com&#x2F;archives&#x2F;mysql-5.7&#x2F;mysql-5.7.28-1.sles12.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure>
<p>2 解压</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir pack</span><br><span class="line">tar -xvf mysql-5.7.28-1.sles12.x86_64.rpm-bundle.tar -C pack</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-d0bc999331258ede.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>3. 依次安装(有依赖关系，必须顺序安装)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-5.7.28-1.sles12.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.28-1.sles12.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.28-1.sles12.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.28-1.sles12.x86_64.rpm</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>启动</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br><span class="line"># 查看初始root密码</span><br><span class="line">grep &#39;temporary password&#39; &#x2F;var&#x2F;log&#x2F;mysql&#x2F;mysqld.log</span><br><span class="line"># 这种方式安装好像没有默认root密码，使用上面的 7.重置密码 吧</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Suse Linux 12 Docker安装</title>
    <url>/blog/2018/07/01/Linux/Suse/Suse%20Linux%2012%20Docker%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="安装环境及版本："><a href="#安装环境及版本：" class="headerlink" title="安装环境及版本："></a>安装环境及版本：</h2><ul>
<li>系统：SUSE Linux Enterprise Server 12 SP2</li>
<li>Docker: </li>
</ul>
<h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;设置源</span><br><span class="line">zypper ar -f https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;opensuse&#x2F;distribution&#x2F;openSUSE-stable&#x2F;repo&#x2F;oss&#x2F; oss</span><br><span class="line">zypper ar -fcg https:&#x2F;&#x2F;repo.huaweicloud.com&#x2F;opensuse&#x2F;distribution&#x2F;leap&#x2F;15.2&#x2F;repo&#x2F;oss oss</span><br><span class="line"></span><br><span class="line">sudo zypper dist-upgrade</span><br><span class="line">sudo zypper update</span><br><span class="line">sudo zypper install docker</span><br></pre></td></tr></table></figure>

<h6 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service docker start&#x2F;stop&#x2F;restart</span><br><span class="line">&#x2F;&#x2F;查看docker配置信息</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>

<h6 id="配置国内镜像"><a href="#配置国内镜像" class="headerlink" title="配置国内镜像"></a>配置国内镜像</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//1. 不存在则新建daemon.json</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">//2. 内容是&#123;&#125;</span><br><span class="line">&#123;</span><br><span class="line">	"registry-mirrors": ["https://4oekmmf9.mirror.aliyuncs.com"]</span><br><span class="line">&#125;</span><br><span class="line">//3. 重启docker服务并查看</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>

<h4 id="Ngixn"><a href="#Ngixn" class="headerlink" title="Ngixn"></a>Ngixn</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; -d # 后台运行</span><br><span class="line">&#x2F;&#x2F; -p 宿主机端口：容器端口  # 开放容器端口到宿主端口</span><br><span class="line">$ docker run -d -p 91:80 nginx</span><br><span class="line"></span><br><span class="line">访问：</span><br><span class="line">http:&#x2F;&#x2F;ip:91&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="Rabbitmq"><a href="#Rabbitmq" class="headerlink" title="Rabbitmq"></a>Rabbitmq</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;搜索镜像</span><br><span class="line">docker search rabbitmq:management</span><br><span class="line">&#x2F;&#x2F;下载</span><br><span class="line">docker pull rabbitmq:management</span><br><span class="line">&#x2F;&#x2F;运行</span><br><span class="line">docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management</span><br><span class="line">访问：</span><br><span class="line">http:&#x2F;&#x2F;[宿主机IP]:15672</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Suse Linux 12 Minio安装</title>
    <url>/blog/2018/07/01/Linux/Suse/Suse%20Linux%2012%20Minio%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="安装环境及版本："><a href="#安装环境及版本：" class="headerlink" title="安装环境及版本："></a>安装环境及版本：</h2><ul>
<li>系统：SUSE Linux Enterprise Server 12 SP2</li>
<li>Minio: </li>
</ul>
<h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h4><pre><code>$ wget https://dl.min.io/server/minio/release/linux-amd64/minio</code></pre><h4 id="2-赋权"><a href="#2-赋权" class="headerlink" title="2 赋权"></a>2 赋权</h4><pre><code>$ chmod +x minio</code></pre><h4 id="3-创建目录并移动"><a href="#3-创建目录并移动" class="headerlink" title="3 创建目录并移动"></a>3 创建目录并移动</h4><pre><code>$ mkdir /use/local/minio
$ mkdir /use/local/minio/data 
$ mv minio /use/local/minio</code></pre><h4 id="4-启动"><a href="#4-启动" class="headerlink" title="4  启动"></a>4  启动</h4><pre><code>$ cd /use/local/minio
 -- 启动(data/:数据存放路径)
$ ./minio server data/
-- 后台守护启动
$ nohup ./minio server data/ &amp;
-- 自定义端口
$ nohup ./minio server 节点ip:指定端口 data/  &amp;
-- 开机自启
$ vim /etc/init.d/after.local
    添加如下
    nohup /usr/local/minio/minio server /usr/local/minio/data/ &amp;</code></pre><h4 id="5-防火墙"><a href="#5-防火墙" class="headerlink" title="5  防火墙"></a>5  防火墙</h4><pre><code>1 放行端口
    $ vim /etc/sysconfig/SuSEfirewall2
    --加上端口(多个用逗号分开)
    FW_SERVICES_EXT_TCP=”22,80,8090″
2. 启动、关闭、重启防火墙：
    $ rcSuSEfirewall2 start/stop/restart</code></pre><h4 id="6-访问："><a href="#6-访问：" class="headerlink" title="6 访问："></a>6 访问：</h4><pre><code>http://192.168.116.131:9000/
AccessKey: minioadmin 
SecretKey: minioadmin</code></pre>]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Suse Linux 12 RabbitMQ 安装</title>
    <url>/blog/2018/07/01/Linux/Suse/Suse%20Linux%2012%20RabbitMQ%20%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="安装环境及版本："><a href="#安装环境及版本：" class="headerlink" title="安装环境及版本："></a>安装环境及版本：</h2><ul>
<li>系统：SUSE Linux Enterprise Server 12 SP2</li>
<li>RabbitMQ : RabbitMQ </li>
<li>官网教程：<a href="https://www.rabbitmq.com/install-rpm.html" target="_blank" rel="noopener">https://www.rabbitmq.com/install-rpm.html</a></li>
</ul>
<h4 id="RabbitMQ安装："><a href="#RabbitMQ安装：" class="headerlink" title="RabbitMQ安装："></a>RabbitMQ安装：</h4><pre><code>-- 添加源
zypper ar -f http://mirrors.163.com/openSUSE/distribution/openSUSE-stable/repo/oss/ oss
--更新
zypper refresh
-- 安装
zypper in rabbitmq-server
zypper in rabbitmq-server-plugins</code></pre><h4 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h4><pre><code>1 放行端口
    $ vim /etc/sysconfig/SuSEfirewall2
    --加上端口(多个用逗号分开)
    FW_SERVICES_EXT_TCP=”22,80,8090″
2. 启动、关闭、重启防火墙：
    $ rcSuSEfirewall2 start/stop/restart</code></pre><h4 id="远程访问：默认账号guest只能本地访问"><a href="#远程访问：默认账号guest只能本地访问" class="headerlink" title="远程访问：默认账号guest只能本地访问"></a>远程访问：默认账号guest只能本地访问</h4><pre><code>//新建用户  
# rabbitmqctl add_user &lt;用户名&gt; &lt;密码&gt;
//设定用户administrator角色
# rabbitmqctl set_user_tags &lt;用户名&gt; administrator
//赋予用户权限
# rabbitmqctl set_permissions -p / &lt;用户名&gt; &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;    


//查看所有账号
# rabbitmqctl list_users
//修改密码
# rabbitmqctl change_password &lt;用户名&gt; &lt;新密码&gt;
//删除用户
# rabbitmqctl delete_user &lt;用户名&gt;</code></pre><h4 id="浏览器访问："><a href="#浏览器访问：" class="headerlink" title="浏览器访问："></a>浏览器访问：</h4><pre><code>1 开启Web管理插件，这样我们就可以通过浏览器来进行管理了
    $ rabbitmq-plugins enable rabbitmq_management
2 启动
    $ service rabbitmq-server start
    $ rabbitmq-server -detached //后台启动
    $ rabbitmqctl start_app/stop/status  //运行状态
3 开机自启
    $ chkconfig rabbitmq-server on
    $ systemctl enable rabbitmq-server
4 地址
    http://ip:15672/</code></pre><h4 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h4><p>官网：<a href="https://www.rabbitmq.com/install-rpm.html" target="_blank" rel="noopener">https://www.rabbitmq.com/install-rpm.html</a></p>
<h4 id="先安装Erlang"><a href="#先安装Erlang" class="headerlink" title="先安装Erlang:"></a>先安装Erlang:</h4><pre><code>1 add resp 参数-f：自动刷新
    $ sudo zypper ar -f http://download.opensuse.org/repositories/devel:/languages:/erlang:/Factory/SLE_12_SP2/ erlang
2 import the signing key and refresh the repository
    $ sudo zypper --gpg-auto-import-keys refresh
3 install a recent Erlang version
    $ sudo zypper in erlang</code></pre><h4 id="RabbitMQ："><a href="#RabbitMQ：" class="headerlink" title="RabbitMQ："></a>RabbitMQ：</h4><pre><code>1:quick install，过程中选：是
    $ curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.rpm.sh | sudo bash
2：install
    $ zypper in rabbitmq-server
3：没有什么能提供 epmd &gt;= 21.3，而它为 rabbitmq-server-3.8.3-1.suse.noarch 所需
    选择第二项：忽略
4：剩余选择默认</code></pre><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//顺序执行</span><br><span class="line">rpm -e rabbitmq-server</span><br><span class="line">rpm -e rabbitmq-server-plugins</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Suse Linux 12 Redis安装</title>
    <url>/blog/2018/07/01/Linux/Suse/Suse%20Linux%2012%20Redis%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="安装环境及版本："><a href="#安装环境及版本：" class="headerlink" title="安装环境及版本："></a>安装环境及版本：</h2><ul>
<li>系统：SUSE Linux Enterprise Server 12 SP2</li>
<li>Redis: Redis</li>
</ul>
<h4 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h4><pre><code>-- 添加源
zypper ar -f http://mirrors.163.com/openSUSE/distribution/openSUSE-stable/repo/oss/ oss
--更新
zypper refresh
-- 安装
zypper in redis</code></pre><h4 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h4><pre><code>//成功后会有界面
# redis-server
//后台启动使用默认配置
redis-server &amp;
//后台启动，手动指定配置文件(见后面远程访问)
redis-server ./redis.conf
//开机自启
$ vim /etc/init.d/after.local
    添加如下
    redis-server /etc/redis/redis.conf</code></pre><h4 id="防火墙："><a href="#防火墙：" class="headerlink" title="防火墙："></a>防火墙：</h4><pre><code>1 放行端口
    $ vim /etc/sysconfig/SuSEfirewall2
    --加上端口(多个用空格分开)
    FW_SERVICES_EXT_TCP=”22 80 8090″
2. 启动、关闭、重启防火墙：
    $ rcSuSEfirewall2 start/stop/restart</code></pre><h4 id="测试连接-新建窗口"><a href="#测试连接-新建窗口" class="headerlink" title="测试连接(新建窗口)"></a>测试连接(新建窗口)</h4><pre><code># redis-cli
//以上命令将打开以下终端：
redis 127.0.0.1:6379&gt;
//输入 PING 命令。
redis 127.0.0.1:6379&gt;ping
PONG
//显示PONG表示成功</code></pre><h4 id="远程访问："><a href="#远程访问：" class="headerlink" title="远程访问："></a>远程访问：</h4><p>进入/etc/redis/,复制default.conf.example并重命名为redis.conf,然后修改如下</p>
<pre><code>//打开把bind一行 注释掉
# bind 127.0.0.1
//开启后台运行
# daemonize yes
//关闭保护模式
# protected-mode no 
4 地址：ttp://ip:6379/</code></pre>]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka Connector Mysql 数据同步</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Kafka%20Connector%20Mysql%20%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="环境及版本"><a href="#环境及版本" class="headerlink" title="环境及版本"></a>环境及版本</h2><ul>
<li><p>linux： ubuntu 18.0.4 lsb</p>
</li>
<li><p>Jdk: 1.8</p>
</li>
<li><p>Mysql: 5.7</p>
</li>
<li><p>Zookeeper:  apache-zookeeper-3.5.8</p>
</li>
<li><p>Kafka:  kafka_2.12-2.5.0</p>
</li>
<li><p>Kafka 依赖zookeeper 服务,zookeeper依赖jdk</p>
</li>
</ul>
<p>##　一 Kafka基础环境</p>
<ol>
<li><p>下载安装</p>
<p>先配置启动zookeeper</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; wget https:&#x2F;&#x2F;mirror.bit.edu.cn&#x2F;apache&#x2F;zookeeper&#x2F;zookeeper-3.5.8&#x2F;apache-zookeeper-3.5.8-bin.tar.gz</span><br><span class="line">&gt; tar -zxf apache-zookeeper-3.5.8-bin.tar.gz</span><br><span class="line">&gt; cd apache-zookeeper-3.5.8-bin</span><br><span class="line">&gt; cp conf&#x2F;zoo_sample.cfg conf&#x2F;zoo.cfg</span><br><span class="line">&gt; bin&#x2F;zkServer.sh start conf&#x2F;zoo.cfg</span><br></pre></td></tr></table></figure>

<p>配置启动kafka</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; wget https:&#x2F;&#x2F;mirror.bit.edu.cn&#x2F;apache&#x2F;kafka&#x2F;2.5.0&#x2F;kafka_2.12-2.5.0.tgz</span><br><span class="line">&gt; tar -xzf kafka_2.12-2.5.0.tgz</span><br><span class="line">&gt; cd kafka_2.12-2.5.0</span><br><span class="line">&gt; bin&#x2F;kafka-server-start.sh config&#x2F;server.properties</span><br></pre></td></tr></table></figure>

<p>创建查看主题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; bin&#x2F;kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test</span><br><span class="line">&gt; bin&#x2F;kafka-topics.sh --list --bootstrap-server localhost:9092</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="二-Kafka-Connect"><a href="#二-Kafka-Connect" class="headerlink" title="二 Kafka Connect"></a>二 Kafka Connect</h2><ol>
<li><p>下载依赖包</p>
<p>下载mysql-connector-java和kafka-connect-jdbc，复制到kafka/libs 路径下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;packages.confluent.io&#x2F;maven&#x2F;io&#x2F;confluent&#x2F;kafka-connect-jdbc&#x2F;5.1.0&#x2F;kafka-connect-jdbc-5.1.0.jar</span><br><span class="line">&#x2F;&#x2F; mysql-connector-java 需要和数据库版本匹配(5.x或 8.x) </span><br><span class="line">wget https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;mysql&#x2F;mysql-connector-java&#x2F;8.0.13&#x2F;mysql-connector-java-8.0.13.jar</span><br><span class="line">wget https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;mysql&#x2F;mysql-connector-java&#x2F;5.1.46&#x2F;mysql-connector-java-5.1.46.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>准备数据库</p>
<ul>
<li><p>创建 test1 数据库源表t_user_old</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_user_old(</span><br><span class="line">uid int(10) primary key auto_increment,</span><br><span class="line">username varchar(20),</span><br><span class="line">password varchar(20)</span><br><span class="line">) comment &#39;旧用户表&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 test2 数据库目标表t_user_new</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table t_user_new(</span><br><span class="line">uid int(10) primary key auto_increment,</span><br><span class="line">username varchar(20),</span><br><span class="line">password varchar(20)</span><br><span class="line">) comment &#39;新用户表&#39;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>编写配置文件</p>
<ul>
<li><p>进入kafka/conf,新建如下两个配置文件：</p>
</li>
<li><p>quickstart-mysql.properties（source）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;mysql-a-source-user</span><br><span class="line">connector.class&#x3D;io.confluent.connect.jdbc.JdbcSourceConnector</span><br><span class="line">tasks.max&#x3D;1</span><br><span class="line">connection.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test1?user&#x3D;root&amp;password&#x3D;root</span><br><span class="line"># incrementing  自增</span><br><span class="line">mode&#x3D;incrementing</span><br><span class="line"># 自增字段 uid</span><br><span class="line">incrementing.column.name&#x3D;uid</span><br><span class="line"># 白名单表 t_user_old</span><br><span class="line">table.whitelist&#x3D;t_user_old</span><br><span class="line"># topic前缀 mysql-kafka-</span><br><span class="line">topic.prefix&#x3D;mysql-kafka-</span><br></pre></td></tr></table></figure>
</li>
<li><p>quickstart-mysql-sink.properties（sink）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;mysql-a-sink-user</span><br><span class="line">connector.class&#x3D;io.confluent.connect.jdbc.JdbcSinkConnector</span><br><span class="line">tasks.max&#x3D;1</span><br><span class="line">#kafka的topic名称</span><br><span class="line">topics&#x3D;mysql-kafka-t_user_old</span><br><span class="line"># 配置JDBC链接</span><br><span class="line">connection.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test2?user&#x3D;root&amp;password&#x3D;root&amp;useSSL&#x3D;false</span><br><span class="line"># 不自动创建表，如果为true，会自动创建表，表名为topic名称</span><br><span class="line">auto.create&#x3D;false</span><br><span class="line"># upsert model更新和插入</span><br><span class="line">insert.mode&#x3D;upsert</span><br><span class="line"># 下面两个参数配置了以uid为主键更新</span><br><span class="line">pk.mode &#x3D; record_value</span><br><span class="line">pk.fields &#x3D; uid</span><br><span class="line">#表名为 t_user_new</span><br><span class="line">table.name.format&#x3D;t_user_new</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>启动kafka connect</p>
<ul>
<li><p>创建topic主题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bin&#x2F;kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic mysql-kafka-person</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 Kafka Connect</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;connect-standalone.sh config&#x2F;connect-standalone.properties config&#x2F;quickstart-mysql.properties config&#x2F;quickstart-mysql-sink.properties</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>同步数据 </p>
<p>往a表插入一条数据，b表也会同步更新</p>
</li>
</ol>
<p>参考：</p>
<p><a href="https://www.jianshu.com/p/46b6fa53cae4" target="_blank" rel="noopener">https://www.jianshu.com/p/46b6fa53cae4</a></p>
<p><a href="https://docs.confluent.io/kafka-connect-jdbc/current/source-connector/source_config_options.html" target="_blank" rel="noopener">https://docs.confluent.io/kafka-connect-jdbc/current/source-connector/source_config_options.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Suse Linux 12 SSH 源 防火墙 自启脚本</title>
    <url>/blog/2018/07/01/Linux/Suse/Suse%20Linux%2012%20SSH%20%E6%BA%90%20%E9%98%B2%E7%81%AB%E5%A2%99%20%E8%87%AA%E5%90%AF%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h4 id="源："><a href="#源：" class="headerlink" title="源："></a>源：</h4><pre><code>-- 查看源
zypper repos/lr 
-- 查看源配置
zypper repos --details
-- 添加源(URL就是软件源的地址,alias就是你起的一个名字)
zypper addrepo/ar URL alias    
-- 删除源
zypper remove/rr 
-- 禁用原来无效的源
zypper modifyrepo/mr -d alias
-- 源仓库配置位于,编辑文件后刷新
/etc/zypp/repos.d/

-- suse官方源
zypper ar https://ftp5.gwdg.de/pub/opensuse/discontinued/distribution/12.2/repo/oss/ oss
zypper ar https://ftp5.gwdg.de/pub/opensuse/discontinued/distribution/12.2/repo/non-oss/ nonoss
zypper ar http://download.opensuse.org/update/12.2/ update

-- 阿里云：
zypper addrepo -f http://mirrors.aliyun.com/opensuse/distribution/openSUSE-stable/repo/oss oss
-- 网易开源镜像
zypper ar -f http://mirrors.163.com/openSUSE/distribution/openSUSE-stable/repo/oss oss
-- 华为
zypper ar -f https://repo.huaweicloud.com/opensuse/distribution/openSUSE-stable/repo/oss oss

-- 添加好以后需要先刷新：
zypper refresh</code></pre><p><a href="https://zh.opensuse.org/%E8%BD%AF%E4%BB%B6%E6%BA%90%E9%95%9C%E5%83%8F%E7%AB%99%E7%82%B9#.E5.AE.98.E6.96.B9.E9.95.9C.E5.83.8F.E7.AB.99.E7.82.B9.E5.88.97.E8.A1.A8" target="_blank" rel="noopener">参考官网</a></p>
<h4 id="SSH："><a href="#SSH：" class="headerlink" title="SSH："></a>SSH：</h4><pre><code>$ vim /etc/ssh/sshd_config
-- 做如下修改：
PermitRootLogin yes  //权限root登录
PasswordAuthentication yes  //密码验证

防火墙端口：
$ vim /etc/sysconfig/SuSEfirewall2
-- 做如下修改
FW_SERVICES_EXT_UDP=&quot;22&quot;
FW_SERVICES_EXT_TCP=&quot;22&quot;

--SSH自启动：
$ systemctl enable sshd.service
--SSH状态/重启
$ systemctl status/restart sshd.service</code></pre><h4 id="防火墙："><a href="#防火墙：" class="headerlink" title="防火墙："></a>防火墙：</h4><pre><code>1. SuSE Linux防火墙配置文件路径：/etc/sysconfig/SuSEfirewall2;
    开放多个端口则为 FW_SERVICES_EXT_TCP=”22,80,8090″
2. 启动、重启、关闭、状态：
   rcSuSEfirewall2 start/restart/stop/status
   service SuSEfirewall2 start
   service SuSEfirewall2_init start</code></pre><h4 id="自启动："><a href="#自启动：" class="headerlink" title="自启动："></a>自启动：</h4><pre><code>1 vim /etc/init.d/after.local
    --添加如下
    /usr/local/run.sh
2 新建脚本 vim /usr/local/run.sh
    --添加如下
    echo &quot;this is &quot; &gt; /usr/local/1.txt
3 脚本赋值    权限
    chmod +x run.sh
4 重启看/usr/local/1.txt
    reboot</code></pre><p><a href="https://blog.csdn.net/rokii/article/details/6316443" target="_blank" rel="noopener">参考</a></p>
<h4 id="GCC-环境"><a href="#GCC-环境" class="headerlink" title="GCC 环境"></a>GCC 环境</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zypper in gcc</span><br><span class="line">zypper in gcc-c++</span><br><span class="line">zypper in binutils</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查看版本</span><br><span class="line">gcc -v</span><br><span class="line">g++ -v</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;清理命令</span><br><span class="line">make distclean  &amp;&amp; make</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu ElasticSearch 服务搭建</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu%20ElasticSearch%20%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
## 环境

<ul>
<li><p>linux: ubuntu 18.4</p>
</li>
<li><p>elasticsearch: 6.5.3</p>
</li>
<li><p>jdk: open jdk 1.8</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install java-11-openjdk -y</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="一-服务搭建-压缩包"><a href="#一-服务搭建-压缩包" class="headerlink" title="一 服务搭建(压缩包)"></a>一 服务搭建(压缩包)</h2><ol>
<li><p>下载elastic服务端</p>
<p>官网下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;elasticsearch&#x2F;elasticsearch-6.5.3.tar.gz</span><br><span class="line">tar -xzf elasticsearch-6.5.3.tar.gz</span><br><span class="line">cd elasticsearch-6.5.3&#x2F;</span><br><span class="line"></span><br><span class="line"># 7.x版本(推荐)</span><br><span class="line">https:&#x2F;&#x2F;repo.huaweicloud.com&#x2F;elasticsearch&#x2F;7.12.0&#x2F;elasticsearch-7.12.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<blockquote>
<p>需要新建一个非root账号，elastic不支持root账号启动</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adduser esuser	#新建一个用户(useradd)</span><br><span class="line">passwd esuser 	#设置密码</span><br><span class="line">su esuser		#切换用户</span><br><span class="line">cat &#x2F;etc&#x2F;passwd #查看所有用户</span><br><span class="line">userdel esuser  #删除用户</span><br><span class="line"></span><br><span class="line">#赋值es文件夹权限</span><br><span class="line">chown -R esuser elasticsearch</span><br></pre></td></tr></table></figure>

<blockquote>
<p>外网访问：去掉<code>network.host</code>的注释，将它的值改成<code>0.0.0.0</code>，然后重新启动 Elastic, 关闭防火墙！！！</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim config&#x2F;elasticsearch.yml</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">discovery.type: single-node #单节点模式</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;elasticsearch</span><br><span class="line">.&#x2F;bin&#x2F;elasticsearch -d	#后台启动</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl localhost:9200</span><br></pre></td></tr></table></figure>
</li>
<li><p>ik分词器</p>
<blockquote>
<p>下载后解压到es的plusins路径下，<strong>重启es即可</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下载</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v7.12.0&#x2F;elasticsearch-analysis-ik-7.12.0.zip</span><br><span class="line"># 解压到es的plusins路径下</span><br><span class="line">unzip elasticsearch-analysis-ik-7.12.0.zip -c plugins&#x2F;ik</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 重启后，查看es加载的插件</span><br><span class="line">.&#x2F;bin&#x2F;elasticsearch-plugin list</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="二-服务搭建-Docker"><a href="#二-服务搭建-Docker" class="headerlink" title="二 服务搭建(Docker)"></a>二 服务搭建(Docker)</h2><ol>
<li><p>下载镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:6.5.3</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; --name es elasticsearch:6.5.3</span><br><span class="line"></span><br><span class="line">#参数说明</span><br><span class="line">-d：后台启动</span><br><span class="line">-p：端口映射</span><br><span class="line">-e：设置环境变量</span><br><span class="line">-discovery.type&#x3D;single-node：单机运行</span><br><span class="line">--name：要生成的容器名称</span><br><span class="line">elasticsearch:6.5.3：引用镜像名称和版本</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker exec -it elasticsearch-6.5.3 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装ik分词器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;elasticsearch-plugin install https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v6.5.3&#x2F;elasticsearch-analysis-ik-6.5.3.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改es配置文件：vim ./config/elasticsearch.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cluster.name: &quot;docker-cluster&quot;</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line"># minimum_master_nodes need to be explicitly set when bound on a public IP</span><br><span class="line"># set to 1 to allow single node clusters</span><br><span class="line"># Details: https:&#x2F;&#x2F;github.com&#x2F;elastic&#x2F;elasticsearch&#x2F;pull&#x2F;17288</span><br><span class="line">discovery.zen.minimum_master_nodes: 1</span><br><span class="line"></span><br><span class="line"># just for elasticsearch-head plugin</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>退出容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#先停止</span><br><span class="line">docker stop elasticsearch-6.5.3</span><br><span class="line">docker start elasticsearch-6.5.3</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl localhost:9200</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="三-可视化界面kibana"><a href="#三-可视化界面kibana" class="headerlink" title="三 可视化界面kibana"></a>三 可视化界面kibana</h2><ol>
<li><p>下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;kibana&#x2F;kibana-7.12.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim config&#x2F;kibana.yml</span><br><span class="line">server.host: “0.0.0.0”</span><br></pre></td></tr></table></figure>
</li>
<li><p>汉化（可选）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 中文国际化文件路径</span><br><span class="line">kibana-7.12.0-linux-x86_64&#x2F;x-pack&#x2F;plugins&#x2F;translations&#x2F;translations&#x2F;zh-CN.json</span><br><span class="line"></span><br><span class="line"># vim config&#x2F;kibana.yml</span><br><span class="line">i18n.locale: &quot;zh-CN&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 赋值es文件夹权限</span><br><span class="line">chown -R esuser kibana-7.12.0-linux-x86_64</span><br><span class="line"># 启动</span><br><span class="line">.&#x2F;bin&#x2F;kibana</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:5601</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<blockquote>
<p>左侧开发工具中输入，即可验证</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line"> &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line"> , &quot;text&quot;: [&quot;中国人民解放军&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line"> &quot;analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line"> , &quot;text&quot;: [&quot;中国人民解放军&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="四-手动增删改查命令-dsl语法"><a href="#四-手动增删改查命令-dsl语法" class="headerlink" title="四 手动增删改查命令(dsl语法)"></a>四 手动增删改查命令(dsl语法)</h2><blockquote>
<p>dsl: Domain Specific Language 的缩写，中文翻译为领域特定语言</p>
</blockquote>
<ol>
<li><p>sql转dsl</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;_sql&#x2F;translate</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&quot;select * from complex where name &#x3D;&#39;张三&#39;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 检测集群是否健康。 确保9200端口号可用</span><br><span class="line">curl &#39;localhost:9200&#x2F;_cat&#x2F;health?v&#39;</span><br><span class="line"># 获取集群的节点列表</span><br><span class="line">curl &#39;localhost:9200&#x2F;_cat&#x2F;nodes?v&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出所有索引</span><br><span class="line">curl &#39;localhost:9200&#x2F;_cat&#x2F;indices?v&#39;</span><br><span class="line"></span><br><span class="line"># 创建索引</span><br><span class="line">curl -XPUT &#39;localhost:9200&#x2F;test?pretty&#39;</span><br><span class="line"># 查看单个索引详情</span><br><span class="line">curl localhost:9200&#x2F;test?pretty</span><br><span class="line"></span><br><span class="line">#删除索引</span><br><span class="line">curl -XDELETE &#39;localhost:9200&#x2F;test?pretty&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>文档</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 新增</span><br><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; -XPUT &#39;localhost:9200&#x2F;test&#x2F;external&#x2F;1&#39; -d &#39;&#123;&quot;name&quot;: &quot;张三&quot;&#125;&#39;</span><br><span class="line"># 查询</span><br><span class="line">curl -XGET &#39;localhost:9200&#x2F;test&#x2F;external&#x2F;1&#39;</span><br><span class="line"># 修改</span><br><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; -XPOST &#39;localhost:9200&#x2F;test&#x2F;external&#x2F;1&#x2F;_update&#39; -d &#39;&#123;&quot;doc&quot;:&#123;&quot;name&quot;:&quot;李四&quot;&#125;&#125;&#39;</span><br><span class="line"># 删除</span><br><span class="line">curl -XDELETE &#39;localhost:9200&#x2F;test&#x2F;external&#x2F;1&#39;</span><br></pre></td></tr></table></figure>
</li>
<li><p>复杂查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 插入数据</span><br><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; -XPUT &#39;localhost:9200&#x2F;complex&#x2F;_doc&#x2F;1&#39; -d &#39;&#123;&quot;name&quot;: &quot;张三1&quot;,&quot;age&quot;:1&#125;&#39;</span><br><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; -XPUT &#39;localhost:9200&#x2F;complex&#x2F;_doc&#x2F;2&#39; -d &#39;&#123;&quot;name&quot;: &quot;张三2&quot;,&quot;age&quot;:2&#125;&#39;</span><br><span class="line">curl -H &quot;Content-Type: application&#x2F;json&quot; -XPUT &#39;localhost:9200&#x2F;complex&#x2F;_doc&#x2F;3&#39; -d &#39;&#123;&quot;name&quot;: &quot;张三3&quot;,&quot;age&quot;:3&#125;&#39;</span><br><span class="line"></span><br><span class="line"># 查询全部</span><br><span class="line">curl -XGET &#39;localhost:9200&#x2F;complex&#x2F;_doc&#x2F;_search&#39;</span><br><span class="line"></span><br><span class="line"># 模糊查询，排序，分页</span><br><span class="line">GET complex&#x2F;_doc&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;:&#123;</span><br><span class="line">   &quot;match&quot;:&#123;</span><br><span class="line">     &quot;name&quot;:&quot;张三1&quot;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;sort&quot;:&#123;</span><br><span class="line">   &quot;age&quot;:&#123;</span><br><span class="line">     &quot;order&quot;:&quot;desc&quot;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;from&quot;:0,</span><br><span class="line"> &quot;size&quot;:10</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 高亮查询</span><br><span class="line">GET complex&#x2F;_doc&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;match&quot;:&#123;</span><br><span class="line">      &quot;name&quot;:&quot;张三&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;:&#123;</span><br><span class="line">    &quot;fields&quot;:&#123;</span><br><span class="line">      &quot;name&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="五-常见问题"><a href="#五-常见问题" class="headerlink" title="五 常见问题"></a>五 常见问题</h2><ol start="3">
<li><p>Native controller process has stopped - no new native processes can be started</p>
<ul>
<li><p>压缩包形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim .&#x2F;config&#x2F;elasticsearch.yml</span><br><span class="line"># 指定单节点模式</span><br><span class="line">discovery.type: single-node</span><br></pre></td></tr></table></figure>
</li>
<li><p>docker形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行时添加 -e &quot;discovery.type&#x3D;single-node&quot;</span><br><span class="line">docker run -d -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; --name elasticsearch-6.5.3 elasticsearch:6.5.3</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p>
<p>指定单节点模式即可，解决方案同上</p>
</li>
</ol>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p>官方：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/targz.html</a></p>
<p><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></p>
<p><a href="https://www.cnblogs.com/gcgc/p/10297563.html" target="_blank" rel="noopener">https://www.cnblogs.com/gcgc/p/10297563.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Suse Linux 12 安装Kafka Zookeeper</title>
    <url>/blog/2018/07/01/Linux/Suse/Suse%20Linux%2012%20%E5%AE%89%E8%A3%85Kafka%20Zookeeper/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="安装环境及版本："><a href="#安装环境及版本：" class="headerlink" title="安装环境及版本："></a>安装环境及版本：</h2><ul>
<li>系统：Suse 12.2.2</li>
<li>Jdk: 1.8</li>
<li>Zookeeper:  apache-zookeeper-3.7.0</li>
<li>Kafka:  kafka_2.12-2.6.1</li>
<li>Kafka 依赖zookeeper 服务,zookeeper依赖jdk</li>
</ul>
<h2 id="一-Zookeeper-配置（推荐使用kafka自带zookeeper）"><a href="#一-Zookeeper-配置（推荐使用kafka自带zookeeper）" class="headerlink" title="一 Zookeeper 配置（推荐使用kafka自带zookeeper）"></a>一 Zookeeper 配置（推荐使用kafka自带zookeeper）</h2><ol>
<li><p>下载zookeeper</p>
<p>官网：<a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">https://zookeeper.apache.org/releases.html</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; wget https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;apache&#x2F;zookeeper&#x2F;zookeeper-3.7.0&#x2F;apache-zookeeper-3.7.0-bin.tar.gz</span><br><span class="line">&gt; tar -zxvf apache-zookeeper-3.7.0-bin.tar.gz</span><br><span class="line">&gt; cd apache-zookeeper-3.7.0-bin</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置zookeeper</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入conf路径,复制zoo_sample.cfg重命名为zoo.cfg</span><br><span class="line">   &gt; cp conf&#x2F;zoo_sample.cfg conf&#x2F;zoo.cfg</span><br><span class="line">   &#x2F;&#x2F;zookeeper默认使用jetty，端口占用8080(可选)</span><br><span class="line">   admin.serverPort&#x3D;8888</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;启动并指定配置文件</span><br><span class="line">&gt; bin&#x2F;zkServer.sh start conf&#x2F;zoo.cfg</span><br><span class="line">&#x2F;&#x2F;查看状态</span><br><span class="line">&gt; bin&#x2F;zkServer.sh status</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="二-kafka-配置"><a href="#二-kafka-配置" class="headerlink" title="二 kafka 配置"></a>二 kafka 配置</h2><ol>
<li><p>下载kafka</p>
<p>官网：<a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener">https://kafka.apache.org/downloads</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; wget https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;apache&#x2F;kafka&#x2F;2.6.2&#x2F;kafka_2.12-2.6.2.tgz</span><br><span class="line">&gt; tar -xzf kafka_2.12-2.6.1.tgz</span><br><span class="line">&gt; cd kafka_2.12-2.6.1</span><br></pre></td></tr></table></figure>
</li>
<li><p>外网访问</p>
<p>配置config/server.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#打开注释 PLAINTEXT:本机的ip地址:9092</span><br><span class="line">listeners&#x3D;PLAINTEXT:&#x2F;&#x2F;192.168.1.100:9092 </span><br><span class="line"></span><br><span class="line"># zookeeper地址</span><br><span class="line">zookeeper.connect&#x3D;localhost:2181</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<p>先启动zookeeper(若使用上面的zookeeper服务，则不需要再次启动)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;zookeeper-server-start.sh -daemon config&#x2F;zookeeper.properties</span><br><span class="line">#查看zk服务</span><br><span class="line">ps -ef|grep zookeeper</span><br></pre></td></tr></table></figure>

<p>启动kafka</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;kafka-server-start.sh config&#x2F;server.properties</span><br><span class="line">#后台启动</span><br><span class="line">.&#x2F;bin&#x2F;kafka-server-start.sh -daemon config&#x2F;server.properties</span><br></pre></td></tr></table></figure>
<h2 id="三-发送消息"><a href="#三-发送消息" class="headerlink" title="三 发送消息"></a>三 发送消息</h2></li>
<li><p>建立主题</p>
<p>用一个分区和一个副本创建一个名为“ test”的主题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &gt; bin&#x2F;kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic test</span><br><span class="line">  </span><br><span class="line"># 错误：could not be established. Broker may not be available</span><br><span class="line">  --将 localhost 改为指定 确定的ip</span><br></pre></td></tr></table></figure>

<p>运行list topic命令，则可以看到该主题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 所有topic</span><br><span class="line">&gt; bin&#x2F;kafka-topics.sh --list --bootstrap-server localhost:9092</span><br><span class="line"></span><br><span class="line"># 查看指定topic的详情</span><br><span class="line">&gt; bin&#x2F;kafka-topics.sh --describe --bootstrap-server 192.168.50.129:9092 --topic test</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="2">
<li><p>发送消息</p>
<p>运行生产者，然后在控制台中键入一些消息以发送到服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; bin&#x2F;kafka-console-producer.sh --bootstrap-server localhost:9092 --topic test</span><br><span class="line">This is a message</span><br><span class="line">This is another message</span><br></pre></td></tr></table></figure>
</li>
<li><p>接受消息(新建窗口)</p>
<p>Kafka还有一个命令行使用者，它将消息转储到标准输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; bin&#x2F;kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</span><br><span class="line">This is a message</span><br><span class="line">This is another message</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="四-kafka-manager-可视化界面"><a href="#四-kafka-manager-可视化界面" class="headerlink" title="四 kafka manager 可视化界面"></a>四 kafka manager 可视化界面</h2><ol>
<li><p>浏览器版本</p>
<p>官网：<a href="https://github.com/yahoo/CMAK" target="_blank" rel="noopener">https://github.com/yahoo/CMAK</a></p>
<p>新版本必须java11才支持</p>
<ul>
<li><p>配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kafka-manager.zkhosts&#x3D;&quot;kafka-manager-zookeeper:2181&quot;</span><br><span class="line">#kafka-manager.zkhosts&#x3D;$&#123;?ZK_HOSTS&#125;</span><br><span class="line">kafka-manager.zkhosts&#x3D;&quot;192.168.50.129:9092&quot;</span><br><span class="line">cmak.zkhosts&#x3D;&quot;kafka-manager-zookeeper:2181&quot;</span><br><span class="line">#cmak.zkhosts&#x3D;$&#123;?ZK_HOSTS&#125;</span><br><span class="line">cmak.zkhosts&#x3D;&quot;192.168.50.129:2181&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;cmak</span><br></pre></td></tr></table></figure>
</li>
<li><p>页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. add cluster</span><br><span class="line">2. Cluster Zookeeper Hosts(zookeeper地址)</span><br><span class="line">3. 其他默认</span><br><span class="line">4. 保存</span><br><span class="line"></span><br><span class="line">浏览器访问： ip:9000</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>桌面客户端</p>
<p>kafka tool：<a href="https://www.kafkatool.com/download.html" target="_blank" rel="noopener">https://www.kafkatool.com/download.html</a></p>
<p>显示字符串信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示topic的信息</span><br><span class="line">tools--settings--topics--key&#x2F;value -- 改为string类型</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kafka</tag>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Mysql 主从配置+MyCat</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu%20Mysql%20%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE+MyCat/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##安装环境及版本：</p>
<ul>
<li>系统：ubuntu 18.04 LTS</li>
<li>mysql:  5.7</li>
</ul>
<p>##一 MySql主从配置<br>#####1 安装mysql<br>1  安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>开启外网访问<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo vi &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br><span class="line">其中bind-address &#x3D; 127.0.0.1注释了</span><br></pre></td></tr></table></figure></li>
<li>授权用户远程访问<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入mysql命令行(root:root)</span><br><span class="line">mysql&gt;  grant all on *.* to root@&#39;%&#39; identified by &#39;root&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></li>
<li>虚拟机克隆一份</li>
</ol>
<p>#####2 修改主服务器配置</p>
<ol>
<li>修复mysqld.cnf配置并重启<br>vim /etc/mysql/mysql.conf.d/mysqld.cnf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 下面两行的注释放开</span><br><span class="line">server-id               &#x3D; 1      #主数据库端ID号</span><br><span class="line">log_bin                 &#x3D; &#x2F;var&#x2F;log&#x2F;mysql&#x2F;mysql-bin.log      #开启二进制日志</span><br></pre></td></tr></table></figure>
重启<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;mysql restart</span><br></pre></td></tr></table></figure></li>
<li>创建从服务器访问的权限账号<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建slave账号you，密码123456</span><br><span class="line">mysql&gt;grant replication slave on *.* to &#39;you&#39;@&#39;192.168.234.130&#39; identified by &#39;123456&#39;;</span><br><span class="line">#更新数据库权限</span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-6c75ea35df049786.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>查看主服务器状态<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-430c95ee6ad417b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>#####3 修改从服务器配置</p>
<ol>
<li>修复mysqld.cnf配置并重启<br>vim /etc/mysql/mysql.conf.d/mysqld.cnf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"># 下面两行的注释放开</span><br><span class="line">server-id               &#x3D; 2      #主数据库端ID号,和从数据不能重复</span><br><span class="line">log_bin                 &#x3D; &#x2F;var&#x2F;log&#x2F;mysql&#x2F;mysql-bin.log      #开启二进制日志</span><br></pre></td></tr></table></figure></li>
<li>执行同步命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置主服务器ip，账号密码，同步位置(同上图标记)</span><br><span class="line">mysql&gt;change master to master_host&#x3D;&#39;192.168.234.129&#39;,</span><br><span class="line">master_user&#x3D;&#39;you&#39;,</span><br><span class="line">master_password&#x3D;&#39;123456&#39;,</span><br><span class="line">master_log_file&#x3D;&#39;mysql-bin.000001&#39;,</span><br><span class="line">master_log_pos&#x3D;602;</span><br><span class="line">#开启同步功能</span><br><span class="line">mysql&gt;start slave;</span><br></pre></td></tr></table></figure></li>
<li>查看 slave 从库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show slave status\G;</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-36641201cbd9c3b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>##二 MyCat配置</p>
<ol>
<li>配置安装<br>官网下载：<a href="http://dl.mycat.io" target="_blank" rel="noopener">http://dl.mycat.io</a></li>
</ol>
<p>文件说名：</p>
<ul>
<li>server.xml MyCat 的配置文件，设置账号、参数等</li>
<li>schema.xml MyCat 对应的物理数据库和数据库表的配置</li>
<li>rule.xml MyCat 分片（分库分表）规则</li>
</ul>
<ol start="2">
<li>配置schema.xml，多余的可以删除<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schema name&#x3D;&quot;ego&quot;:  要操作的数据库逻辑名</span><br><span class="line">table name&#x3D;&quot;test&quot;:  要操作的表的逻辑名</span><br><span class="line">writeHost:  mysql的连接信息</span><br><span class="line">readHost: mysql的连接信息</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-4df8c35035ef80ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>配置 server.xml，连接macat的信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;user name&#x3D;&quot;root&quot; defaultAccount&#x3D;&quot;true&quot;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;password&quot;&gt;123456&lt;&#x2F;property&gt;</span><br><span class="line">                # 要操作的数据库逻辑名，对应上面的配置</span><br><span class="line">                &lt;property name&#x3D;&quot;schemas&quot;&gt;ego&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;user&gt;</span><br></pre></td></tr></table></figure></li>
<li>启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;mycat start</span><br></pre></td></tr></table></figure></li>
<li>测试mycat与测试mysql完全一致，mysql怎么连接，mycat就怎么连接。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;mycat 默认端口8806</span><br><span class="line">mysql -uroot -p123456 -P8066 -h127.0.0.1</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Mysql 数据差异对比</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu%20Mysql%20%E6%95%B0%E6%8D%AE%E5%B7%AE%E5%BC%82%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
## 环境及版本

<ul>
<li>linux： ubuntu 18.0.4 lsb</li>
<li>mysql:   5.7.x || 8.x</li>
</ul>
<p>##　一 mysqldiff</p>
<ol>
<li><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># wget https:&#x2F;&#x2F;cdn.mysql.com&#x2F;archives&#x2F;mysql-utilities&#x2F;mysql-utilities-1.6.5.tar.gz</span><br><span class="line"># tar xf mysql-utilities-1.6.5.tar.gz</span><br><span class="line"># cd mysql-utilities-1.6.5</span><br><span class="line"># python setup.py build</span><br><span class="line"># python setup.py install</span><br><span class="line"># mysqldiff --version</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令</p>
<ul>
<li><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldiff </span><br><span class="line">--server1&#x3D;user:pass@host:port:socket </span><br><span class="line">--server2&#x3D;user:pass@host:port:socket  </span><br><span class="line">db1.object1:db2.object1  </span><br><span class="line">db3:db4</span><br><span class="line"></span><br><span class="line"># 这个语法有两个用法：</span><br><span class="line">db1.object1:db2.object1：如果指定了具体表对象，那么就会详细对比两个表的差异，包括表名、字段名、备注、索引、大小写等所有的表相关的对象。</span><br><span class="line">db3:db4：如果只指定数据库，那么就将两个数据库中互相缺少的对象显示出来，不比较对象里面的差异。这里的对象包括表、存储过程、函数、触发器等。</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数说明</p>
</li>
</ul>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># --server1 配置server1的连接</span><br><span class="line"># --server2 配置server2的连接</span><br><span class="line"># db1:db2 要对比的数据库</span><br><span class="line"># --changes-for 修改对象。例如--changes-for&#x3D;server2，那么对比以sever1为主，生成的差异的修改也是针对server2的对象的修改</span><br><span class="line"># --difftype  差异的信息显示的方式，有[unified|context|differ|sql]，默认是unified。如果使用sql，那么就直接生成差异的SQL</span><br><span class="line"># -vv：便于调试，输出许多信息</span><br><span class="line"># --force：完成所有的比较，不会在遇到一个差异之后退出</span><br></pre></td></tr></table></figure></code></pre><ul>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 测试</span><br><span class="line">mysqldiff --server1&#x3D;root:root@localhost --server2&#x3D;root:root@localhost --changes-for&#x3D;server2 --difftype&#x3D;sql --force study.test1:study.test2</span><br><span class="line"></span><br><span class="line"># 保存差异sql</span><br><span class="line">mysqldiff --server1&#x3D;root:root@localhost --server2&#x3D;root:root@localhost --changes-for&#x3D;server2 --difftype&#x3D;sql --force study:study &gt;output.sql</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="二-mysqldbcompare"><a href="#二-mysqldbcompare" class="headerlink" title="二  mysqldbcompare"></a>二  mysqldbcompare</h2><ol>
<li><p>安装</p>
<p>同上 mysqldiff</p>
</li>
<li><p>命令</p>
<ul>
<li><p>语法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldbcompare </span><br><span class="line">--server1&#x3D;user:pass@host:port:socket </span><br><span class="line">--server2&#x3D;user:pass@host:port:socket </span><br><span class="line">db1:db2</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># --server1 配置server1的连接</span><br><span class="line"># --server2 配置server2的连接</span><br><span class="line"># db1:db2 要对比的数据库</span><br><span class="line"># --changes-for 修改对象。例如--changes-for&#x3D;server2，那么对比以sever1为主，生成的差异的修改也是针对server2的对象的修改</span><br><span class="line"># --difftype  差异的信息显示的方式，有[unified|context|differ|sql]，默认是unified。如果使用sql，那么就直接生成差异的SQL</span><br><span class="line"># -t,--run-all-tests 运行完整比较，遇到第一次差异时不停止</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 本地数据库</span><br><span class="line">mysqldbcompare --server1&#x3D;root:root@localhost --server2&#x3D;root:root@localhost --changes-for&#x3D;server1 --difftype&#x3D;sql --run-all-tests ys_asset:ys_asset2</span><br><span class="line"></span><br><span class="line"># 远程数据库，并且保存差异sql文件</span><br><span class="line">mysqldbcompare --server1&#x3D;root:root@localhost --server2&#x3D;root:&#39;123qwe&#39;@10.95.138.105:3306 --changes-for&#x3D;server1 --difftype&#x3D;sql --run-all-tests ys_asset:ys_asset &gt;results.log</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Mysql 安装配置</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu%20Mysql%20%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
## 环境及版本

<ul>
<li>linux： ubuntu 18.0.4 lsb</li>
<li>mysql:   5.7.x || 8.x</li>
</ul>
<h2 id="一-安装5-7-x-默认源"><a href="#一-安装5-7-x-默认源" class="headerlink" title="一 安装5.7.x(默认源)"></a>一 安装5.7.x(默认源)</h2><ol>
<li><p>安装命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 华为云镜像</span><br><span class="line">sudo sed -i &quot;s@http:&#x2F;&#x2F;.*archive.ubuntu.com@http:&#x2F;&#x2F;repo.huaweicloud.com@g&quot; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">sudo sed -i &quot;s@http:&#x2F;&#x2F;.*security.ubuntu.com@http:&#x2F;&#x2F;repo.huaweicloud.com@g&quot; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line"># 更新源</span><br><span class="line">sudo apt update</span><br><span class="line"># 安装</span><br><span class="line">sudo apt install mysql-server</span><br><span class="line"># 查看是否安装成功</span><br><span class="line">sudo service mysql status</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改用户密码（可选）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#修改配置文件</span><br><span class="line">sudo vim &#x2F;etc&#x2F;mysql&#x2F;debian.cnf</span><br><span class="line">#修改后重启</span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure>

<p>方式2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">&#x2F;&#x2F; 下面这句命令有点长，请注意。</span><br><span class="line">update mysql.user set authentication_string&#x3D;password(&#39;root&#39;) where user&#x3D;&#39;root&#39; and Host &#x3D;&#39;localhost&#39;;</span><br><span class="line">update user set plugin&#x3D;&quot;mysql_native_password&quot;; </span><br><span class="line">flush privileges;</span><br><span class="line">quit;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>外网访问</p>
<ul>
<li><p>开放远程访问端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#其中bind-address &#x3D; 127.0.0.1注释掉</span><br><span class="line">sudo vim &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure>
</li>
<li><p>授权用户远程访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#进入mysql命令行，密码随便输一个就能进入(root:root)</span><br><span class="line">sudo mysql -uroot -proot</span><br><span class="line">#授权远程用户 root 和密码 root</span><br><span class="line">mysql&gt; grant all on *.* to root@&#39;%&#39; identified by &#39;root&#39;;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure>
<h2 id="二-安装8-x"><a href="#二-安装8-x" class="headerlink" title="二 安装8.x"></a>二 安装8.x</h2></li>
</ul>
</li>
<li><p>下载源配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -c https:&#x2F;&#x2F;repo.mysql.com&#x2F;&#x2F;mysql-apt-config_0.8.16-1_all.deb</span><br><span class="line">wget -c https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql-apt-config_0.8.10-1_all.deb</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i mysql-apt-config_0.8.16-1_all.deb</span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;你的密码&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>远程访问</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line">CREATE USER &#39;user&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;Password&#39;;</span><br><span class="line">GRANT ALL ON *.* TO &#39;user&#39;@&#39;localhost&#39;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="三-Docker-安装"><a href="#三-Docker-安装" class="headerlink" title="三 Docker 安装"></a>三 Docker 安装</h2><ol>
<li><p>镜像地址</p>
<p><a href="https://hub.docker.com/_/mysql?tab=tags&amp;page=1&amp;ordering=last_updated" target="_blank" rel="noopener">https://hub.docker.com/_/mysql?tab=tags&amp;page=1&amp;ordering=last_updated</a></p>
</li>
<li><p>拉取镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line">docker pull mysql:8.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;默认密码123456</span><br><span class="line">docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 mysql:5.7</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="四-完全删除"><a href="#四-完全删除" class="headerlink" title="四 完全删除"></a>四 完全删除</h2><ol>
<li><p>删除mysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt-get remove --purge mysql-\*</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找剩余文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo find &#x2F; -name mysql -print</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动删除残留</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo rm -rf &#x2F;ect&#x2F;init.d&#x2F;mysql</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="五-附加配置"><a href="#五-附加配置" class="headerlink" title="五 附加配置"></a>五 附加配置</h2><ol>
<li><p>开启binlog</p>
<p>mysql 5.7 binlog ，mysql 8.0默认开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;mysql&#x2F;my.conf 增加如下</span><br><span class="line">[mysqld]</span><br><span class="line">  log-bin&#x3D;mysql-bin</span><br><span class="line">  server-id&#x3D;1</span><br></pre></td></tr></table></figure>

<p>查看状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;SHOW VARIABLES LIKE &#39;%bin%&#39;;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-18-0-4-SonarQube-6-7-x-安装教程</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-18-0-4-SonarQube-6-7-x-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##安装环境及版本：</p>
<ul>
<li>系统：Ubuntu 18.04 LTS</li>
<li>JDK:  OpenJDK 1.8.0</li>
<li>MySql : 5.7</li>
<li>SonarQube: SonarQube 6.7.7</li>
</ul>
<p>##一 下载sonar</p>
<ol>
<li>官网地址：<a href="https://www.sonarqube.org/downloads/" target="_blank" rel="noopener">https://www.sonarqube.org/downloads/</a></li>
</ol>
<ul>
<li>拉到最下面，选择Show all versions，可选择历史版本<br><img src="https://upload-images.jianshu.io/upload_images/2803682-89fef61dfdae3420.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ul>
<p>##二 上传至Ubuntu</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;解压</span><br><span class="line">unzip sonarqube-6.7.7.zip</span><br><span class="line">&#x2F;&#x2F;移动目录</span><br><span class="line">mv sonarqube-6.7.7 &#x2F;usr&#x2F;local&#x2F;sonar</span><br></pre></td></tr></table></figure>

<p>##三 数据库配置</p>
<ul>
<li>必须新建一个数据库 ：<strong>sonar</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li>不能使用root数据库用户，新建个数据库用户<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#39;sonar&#39; IDENTIFIED BY &#39;123456&#39;; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT ALL ON sonar.* TO &#39;sonar&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT ALL ON sonar.* TO &#39;sonar&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></li>
<li>配置sonar的数据库信息(<strong>vim conf/sonar.properties</strong>)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sonar.jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;sonar?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;rewriteBatchedStatements&#x3D;true&amp;useConfigs&#x3D;maxPerformance&amp;useSSL&#x3D;false</span><br><span class="line">sonar.jdbc.username&#x3D;sonar</span><br><span class="line">sonar.jdbc.password&#x3D;123456</span><br></pre></td></tr></table></figure>
##四 启动</li>
<li>不能使用root用户启动，新建个用户<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;新建用户</span><br><span class="line">useradd sonar</span><br><span class="line">&#x2F;&#x2F;赋权</span><br><span class="line">chown -R sonar.sonar &#x2F;usr&#x2F;local&#x2F;sonar</span><br><span class="line">&#x2F;&#x2F;修改密码</span><br><span class="line">passwd sonar</span><br><span class="line">&#x2F;&#x2F;切换到sonar用户</span><br><span class="line">su sonar</span><br></pre></td></tr></table></figure></li>
<li>启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;linux-x86-64&#x2F;sonar.sh console</span><br></pre></td></tr></table></figure>
##五 登录系统</li>
<li><a href="http://ip:9000" target="_blank" rel="noopener">http://ip:9000</a> 用户名密码：admin</li>
<li>汉化,重启服务即可<br><img src="https://upload-images.jianshu.io/upload_images/2803682-5a113cd0cae5a532.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ul>
<p>参考：<br><a href="https://blog.csdn.net/weixin_43931358/article/details/102666710" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43931358/article/details/102666710</a><br><a href="https://blog.csdn.net/ToFate_/article/details/86007770" target="_blank" rel="noopener">https://blog.csdn.net/ToFate_/article/details/86007770</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux/Ubuntu/Ubuntu-18-Consul 环境搭建</title>
    <url>/blog/2021/06/02/Linux/Ubuntu/Ubuntu-18-Consul%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>1 下载</p>
<p>​    官网 <a href="https://www.consul.io/downloads" target="_blank" rel="noopener">https://www.consul.io/downloads</a></p>
<p>​    中文官网 <a href="https://kingfree.gitbook.io/consul/getting-started/agent" target="_blank" rel="noopener">https://kingfree.gitbook.io/consul/getting-started/agent</a></p>
<p>2 启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开发服务器模式</span><br><span class="line">consul.exe agent -dev</span><br><span class="line"># 远程可以访问 </span><br><span class="line">consul.exe agent -dev -ui -node&#x3D;my-test-consul -client 0.0.0.0</span><br><span class="line"></span><br><span class="line"># agent 运行一个consul agent</span><br><span class="line"># -dev dev表示开发模式运行，另外还有-server表示服务模式运行</span><br><span class="line"># -ui 启用内置的Web UI服务器和所需的HTTP路由</span><br><span class="line"># -node&#x3D;my-test-consul	集群中此节点的名称。这在集群内必须是唯一的。默认情况下，这是机器的主机名</span><br><span class="line"># -client 指定客户端访问的地址。默认是“127.0.0.1”，使用0.0.0.0绑定所有客户端地址</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 服务器模式</span><br><span class="line">consul.exe agent -server -ui -bind&#x3D;127.0.0.1 -data-dir &#x2F;tmp&#x2F;consul</span><br><span class="line"># 生产环境</span><br><span class="line">consul agent -server -bootstrap-expect 1 -datacenter&#x3D;ysdc -data-dir .&#x2F;consul -node&#x3D;consul-server -bind&#x3D;127.0.0.1</span><br><span class="line"></span><br><span class="line"># agent  	运行一个consul agent</span><br><span class="line"># -server   dev表示开发模式运行，另外还有-server表示服务模式运行</span><br><span class="line"># -ui   	显示ui页面</span><br><span class="line"># -bind	 	节点名称</span><br><span class="line"># -data-dir</span><br></pre></td></tr></table></figure>

<p>3 常用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 已注册服务</span><br><span class="line">curl http:&#x2F;&#x2F;localhost:8500&#x2F;v1&#x2F;catalog&#x2F;services</span><br><span class="line"></span><br><span class="line">#json 格式化</span><br><span class="line">curl http:&#x2F;&#x2F;localhost:8500&#x2F;v1&#x2F;catalog&#x2F;services | python -m json.tool</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Ubuntu-18-开机自启</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-18-%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>ubuntu18.04 不再使用initd管理系统，改用systemd</p>
<ol>
<li>设置启动参数<br>vim /lib/systemd/system/rc.local.service <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;&#x2F;etc&#x2F;rc.local Compatibility</span><br><span class="line">Documentation&#x3D;man:systemd-rc-local-generator(8)</span><br><span class="line">ConditionFileIsExecutable&#x3D;&#x2F;etc&#x2F;rc.local</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">ExecStart&#x3D;&#x2F;etc&#x2F;rc.local start</span><br><span class="line">TimeoutSec&#x3D;0</span><br><span class="line">RemainAfterExit&#x3D;yes</span><br><span class="line">GuessMainPID&#x3D;no</span><br><span class="line"></span><br><span class="line">#这一段原文件没有，需要自己添加</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">Alias&#x3D;rc-local.service</span><br></pre></td></tr></table></figure></li>
<li>添加软链接<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;rc.local.service &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;rc.local.service</span><br></pre></td></tr></table></figure></li>
<li>创建服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch &#x2F;etc&#x2F;rc.local</span><br></pre></td></tr></table></figure></li>
<li>赋可执行权限<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 755 &#x2F;etc&#x2F;rc.local</span><br></pre></td></tr></table></figure></li>
<li>编辑自启动服务<br>vim /etc/rc.local<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#开机打印hello</span><br><span class="line">echo &quot;hello&quot; &gt; &#x2F;etc&#x2F;test.log</span><br><span class="line"># 开机启动zookeeper</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;bin start</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-18-Solr-8-2-搭建</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-18-Solr-8-2-%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##安装环境及版本：</p>
<ul>
<li>系统：ubuntu 18.04 LTS</li>
<li>jdk:  1.8.0</li>
<li>Tomcat: 9.0.22</li>
<li>Solr： 8.2.0</li>
<li>集群版：<a href="https://www.jianshu.com/p/91e6e4cc111d" target="_blank" rel="noopener">https://www.jianshu.com/p/91e6e4cc111d</a></li>
</ul>
<h2 id="一-官方方式-推荐"><a href="#一-官方方式-推荐" class="headerlink" title="一. 官方方式(推荐)"></a>一. 官方方式(推荐)</h2><ol>
<li>下载压缩包，上传并解压<br>Solr: <a href="https://lucene.apache.org/solr/downloads.html" target="_blank" rel="noopener">https://lucene.apache.org/solr/downloads.html</a><br>官方安装教程：<a href="https://lucene.apache.org/solr/guide/8_1/installing-solr.html" target="_blank" rel="noopener">https://lucene.apache.org/solr/guide/8_1/installing-solr.html</a></li>
<li>启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; -force 显示进度</span><br><span class="line">bin&#x2F;solr start -force</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">![image.png](https:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;2803682-b99f655da01ee7ee.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">3. 创建核心</span><br></pre></td></tr></table></figure>
bin/solr create -c <name><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![image.png](https:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;2803682-aba83c383a8f5e30.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">![image.png](https:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;2803682-1ba0564ae9ca7025.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line"></span><br><span class="line">## 一. Solr+Tomcat</span><br><span class="line">1 下载压缩包</span><br><span class="line">tomcat :https:&#x2F;&#x2F;tomcat.apache.org&#x2F;download-90.cgi</span><br><span class="line">Solr: https:&#x2F;&#x2F;lucene.apache.org&#x2F;solr&#x2F;downloads.html</span><br><span class="line">2. 上传至服务器并解压</span><br></pre></td></tr></table></figure>
tar zxvf apache-tomcat-9.0.22.tar.gz<br>tar zxvf solr-8.2.0.tgz<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![image.png](https:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;2803682-199c556af37e6c3e.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">3. tomcat复制到&#x2F;usr&#x2F;local目录下</span><br></pre></td></tr></table></figure>
cp apache-tomcat-9.0.22 /usr/local/tomcat -r<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. 把solr的web项目复制到tomcat的webapps下</span><br></pre></td></tr></table></figure>
//进入到solr的web项目下<br>cd solr-8.2.0/server/solr-webapp<br>//复制并重命名<br>cp webapp/ /usr/local/tomcat/webapps/solr -r<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. 复制对应jar包到tomcat&#x2F;webapps&#x2F;solr&#x2F;WEB-INF&#x2F;lib&#x2F;</span><br><span class="line">- solr-8.2.0&#x2F;server&#x2F;lib&#x2F;ext 下所有jar包</span><br><span class="line">- solr-8.2.0&#x2F;server&#x2F;lib 下metrics开头的jar包</span><br></pre></td></tr></table></figure>
// * 代表所有<br>cp <em>.jar /usr/local/tomcat/webapps/solr/WEB-INF/lib/<br>cp metrics-</em>.jar /usr/local/tomcat/webapps/solr/WEB-INF/lib/<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6. 复制solr-8.2.0&#x2F;server下的solr文件夹，到tomcat目录下solrhome</span><br></pre></td></tr></table></figure>
cp solr /usr/local/tomcat/solrhome -r<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7. 编辑tomcat&#x2F;webapps&#x2F;solr&#x2F;WEB-INF&#x2F;web.xml</span><br><span class="line">这段手动加上</span><br></pre></td></tr></table></figure>
<env-entry>
  <env-entry-name>solr/home</env-entry-name>
  <!--这个路径对应上面的solrhome全路径-->
  <env-entry-value>/usr/local/tomcat/solrhome</env-entry-value>
  <env-entry-type>java.lang.String</env-entry-type>
</env-entry>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这段手动注释掉</span><br></pre></td></tr></table></figure>
<security-constraint>
 <web-resource-collection>
   <web-resource-name>Disable TRACE</web-resource-name>
   <url-pattern>/</url-pattern>
   <http-method>TRACE</http-method>
 </web-resource-collection>
 <auth-constraint/>
</security-constraint>
<security-constraint>
 <web-resource-collection>
   <web-resource-name>Enable everything but TRACE</web-resource-name>
   <url-pattern>/</url-pattern>
   <http-method-omission>TRACE</http-method-omission>
 </web-resource-collection>
</security-constraint>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![image.png](https:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;2803682-d915e35e69944b33.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">![image.png](https:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;2803682-11ca1d1575bacb9a.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">8. 启动</span><br></pre></td></tr></table></figure>
./tomcat/bin/startup.sh
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">浏览器访问：http:&#x2F;&#x2F;ip:8080&#x2F;solr&#x2F;index.html</span><br><span class="line">浏览器界面没相应的，换个浏览器试试</span><br><span class="line">![image.png](https:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;2803682-47e08b9978e2ff65.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">##二. 中文分词</span><br><span class="line">1. 下载jar和文件：https:&#x2F;&#x2F;github.com&#x2F;magese&#x2F;ik-analyzer-solr</span><br><span class="line">2. 将jar包放入Solr服务的Jetty或Tomcat的webapp&#x2F;WEB-INF&#x2F;lib&#x2F;目录下；</span><br><span class="line">3. 将resources目录下的5个配置文件放入solr服务的Jetty或Tomcat的webapp&#x2F;WEB-INF&#x2F;classes&#x2F;目录下；</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>IKAnalyzer.cfg.xml</p>
</li>
<li><p>ext.dic</p>
</li>
<li><p>stopword.dic</p>
</li>
<li><p>ik.conf</p>
</li>
<li><p>dynamicdic.txt</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. 配置solrhome&#x2F;new_core&#x2F;conf的managed-schema，添加ik分词器，示例如下；</span><br></pre></td></tr></table></figure>
<!-- ik分词器 -->
<fieldType name="text_ik" class="solr.TextField">
<analyzer type="index">
    <tokenizer class="org.wltea.analyzer.lucene.IKTokenizerFactory" useSmart="false" conf="ik.conf"/>
    <filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
<analyzer type="query">
    <tokenizer class="org.wltea.analyzer.lucene.IKTokenizerFactory" useSmart="true" conf="ik.conf"/>
    <filter class="solr.LowerCaseFilterFactory"/>
</analyzer>
</fieldType>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官方安装方式的，修改路径为：solr&#x2F;server&#x2F;solr&#x2F;configsets&#x2F;_default&#x2F;conf，然后还需要重新建立collection才行。</span><br><span class="line">5. 重启服务器</span><br><span class="line">![image.png](https:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;2803682-a29a55417c714e29.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line"></span><br><span class="line">##三 问题解决：</span><br><span class="line">1 Can&#39;t find resource &#39;schema.xml&#39; in classpath or &#39;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;solrhome&#x2F;new_core&#39;</span><br><span class="line">![image.png](https:&#x2F;&#x2F;upload-images.jianshu.io&#x2F;upload_images&#x2F;2803682-b5b6edc488bc6af1.png?imageMogr2&#x2F;auto-orient&#x2F;strip%7CimageView2&#x2F;2&#x2F;w&#x2F;1240)</span><br><span class="line">解决方法：先复制，然后重启tomcat</span><br></pre></td></tr></table></figure>
cp solr-8.2.0/server/solr/configsets/_default/conf /usr/local/tomcat/solrhome/new_core/ -r
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Java代码</span><br></pre></td></tr></table></figure>
      // solr的core名称(索引库)
  final String collection = "gettingstarted";

<p>  // 添加数据<br>  @Test<br>  public void add() throws Exception {</p>
<pre><code>// 创建客户端
HttpSolrClient client = new HttpSolrClient.Builder(&quot;http://192.168.234.128:8983/solr/&quot;).build();

// 添加数据
final SolrInputDocument doc = new SolrInputDocument();
doc.addField(&quot;id&quot;, UUID.randomUUID().toString());
doc.addField(&quot;name&quot;, &quot;我是测试数据&quot;);

// 保存并提交
client.add(collection, doc);
client.commit(collection);</code></pre><p>  }</p>
<p>  // 查询数据<br>  @Test<br>  public void query() throws Exception {</p>
<pre><code>// 创建客户端
HttpSolrClient client = new HttpSolrClient.Builder(&quot;http://192.168.234.128:8983/solr/&quot;).build();

// 查询条件
final Map&lt;String, String&gt; queryParamMap = new HashMap&lt;String, String&gt;();
queryParamMap.put(&quot;q&quot;, &quot;*:*&quot;);
queryParamMap.put(&quot;fl&quot;, &quot;id, name&quot;);
queryParamMap.put(&quot;sort&quot;, &quot;id asc&quot;);
MapSolrParams queryParams = new MapSolrParams(queryParamMap);

// 获取结果
final QueryResponse response = client.query(collection, queryParams);
final SolrDocumentList documents = response.getResults();

for (SolrDocument document : documents) {
    System.out.println(document.getFirstValue(&quot;id&quot;));
    System.out.println(document.getFirstValue(&quot;name&quot;));
}</code></pre><p>  }</p>
<pre><code></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-Docker-搭建教程</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-Docker-%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>#安装环境及版本：</p>
<ul>
<li>系统：ubuntu 18.04 LTS</li>
<li>Dcoker: </li>
</ul>
<h1 id="一-安装"><a href="#一-安装" class="headerlink" title="一 安装"></a>一 安装</h1><h3 id="方式1-阿里云源"><a href="#方式1-阿里云源" class="headerlink" title="方式1 阿里云源"></a>方式1 阿里云源</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># step 1: 安装必要的一些系统工具</span><br><span class="line">sudo apt-<span class="keyword">get</span> update</span><br><span class="line">sudo apt-<span class="keyword">get</span> -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"># step 2: 安装GPG证书</span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"># Step 3: 写入软件源信息</span><br><span class="line">sudo add-apt-repository "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"</span><br><span class="line"># Step 4: 更新并安装Docker-CE</span><br><span class="line">sudo apt-<span class="keyword">get</span> -y update</span><br><span class="line">sudo apt-<span class="keyword">get</span> -y install docker-ce</span><br></pre></td></tr></table></figure>



<h3 id="方式2-脚本"><a href="#方式2-脚本" class="headerlink" title="方式2 脚本"></a>方式2 脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https:&#x2F;&#x2F;get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh</span><br></pre></td></tr></table></figure>



<h3 id="方式3-apt命令"><a href="#方式3-apt命令" class="headerlink" title="方式3 apt命令"></a>方式3 apt命令</h3><h5 id="1-设置存储库"><a href="#1-设置存储库" class="headerlink" title="1 设置存储库"></a>1 设置存储库</h5><ol>
<li>更新apt包索引<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li>安装包以允许apt通过HTTPS使用存储库：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure></li>
<li>添加Docker的官方GPG密钥：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></li>
<li>使用以下命令设置稳定存储库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;ubuntu \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br></pre></td></tr></table></figure>
<h5 id="2-安装DOCKER-CE"><a href="#2-安装DOCKER-CE" class="headerlink" title="2 安装DOCKER CE"></a>2 安装DOCKER CE</h5></li>
<li>更新apt包索引。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li>安装最新版本的Docker CE和containerd，或者转到下一步安装特定版本：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li>
<li>通过运行hello-world 映像验证是否正确安装了Docker CE <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure>
<h1 id="二-常用命令"><a href="#二-常用命令" class="headerlink" title="二 常用命令"></a>二 常用命令</h1></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 启动 停止 重启 docker服务</span><br><span class="line">$ sudo service docker start|stop|restart</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; docker 命令</span><br><span class="line">docker search 关键字 eg：docker search redis，检索镜像(一般从docker hub检索)</span><br><span class="line">docker pull 镜像名:tag 拉去镜像</span><br><span class="line">docker images 镜像列表</span><br><span class="line">docker container ls  列表所有的容器</span><br><span class="line">docker rmi image-id 删除指定镜像</span><br><span class="line">docker rm container-id 删除指定容器</span><br><span class="line">docker ps 查看运行中的容器 -a 查看所有容器</span><br><span class="line">docker start&#x2F;stop container-id||container-name 开启&#x2F;停止 指定容器id或者容器名称的容器</span><br><span class="line">docker version 版本信息</span><br></pre></td></tr></table></figure>

<h1 id="国内镜像"><a href="#国内镜像" class="headerlink" title="国内镜像"></a>国内镜像</h1><p>修改daemon配置文件/etc/docker/daemon.json来使用加速器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p &#x2F;etc&#x2F;docker</span><br><span class="line">sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;4oekmmf9.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>



<h1 id="三-卸载"><a href="#三-卸载" class="headerlink" title="三 卸载"></a>三 卸载</h1><ol>
<li>卸载Docker CE软件包：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get purge docker-ce</span><br></pre></td></tr></table></figure></li>
<li>主机上的图像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo rm -rf &#x2F;var&#x2F;lib&#x2F;docker</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>#附件<br>官方教程：<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a><br>阿里教程：<a href="https://yq.aliyun.com/articles/110806?spm=5176.8351553.0.0.74621991Vgp3xS" target="_blank" rel="noopener">https://yq.aliyun.com/articles/110806?spm=5176.8351553.0.0.74621991Vgp3xS</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-Gitlab-社区版搭建</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-Gitlab-%E7%A4%BE%E5%8C%BA%E7%89%88%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##安装环境及版本：</p>
<ul>
<li>系统：ubuntu 18.04 LTS</li>
<li>Gitlab: 最新版本 latest</li>
</ul>
<p>##一  安装并配置必要的依赖项</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y curl openssh-server ca-certificates</span><br></pre></td></tr></table></figure>
<p>##二 添加GitLab软件包存储库并安装软件包<br>添加GitLab包存储库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;packages.gitlab.com&#x2F;install&#x2F;repositories&#x2F;gitlab&#x2F;gitlab-ce&#x2F;script.deb.sh | sudo bash</span><br></pre></td></tr></table></figure>
<p>安装GitLab包。并设置gitlab访问地址为’<a href="https://localhost&#39;" target="_blank" rel="noopener">https://localhost&#39;</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo EXTERNAL_URL&#x3D;&quot;https:&#x2F;&#x2F;localhost&quot; apt-get install gitlab-ce</span><br></pre></td></tr></table></figure>
<p>##三 编辑GitLab配置文件<br>1 修改GitLab默认访问地址,上一步已经制定了访问地址，此处可修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo vim &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 将external_url  地址改成本地</span><br><span class="line">&#x2F;&#x2F; external_url &#39;http:&#x2F;&#x2F;localhost&#39;</span><br></pre></td></tr></table></figure>

<p>2 保存，更新配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<p>##四 启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl start&#x2F;stop</span><br></pre></td></tr></table></figure>
<p>外网访问 <a href="http://192.168.234.134/80" target="_blank" rel="noopener">http://192.168.234.134/80</a> （192.168.234.134为ubuntu的ip）<br>在您第一次访问时，您将被重定向到密码重置屏幕。提供初始管理员帐户的密码，您将被重定向回登录屏幕。使用默认帐户的用户名root登录</p>
<h2 id="设置镜像加速器"><a href="#设置镜像加速器" class="headerlink" title="设置镜像加速器"></a>设置镜像加速器</h2><p> 下载镜像慢问题，比如gitlab、nginx。。<br>1 登录阿里云平台，找到 容器镜像服务<br>阿里云平台： <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a><br><img src="https://upload-images.jianshu.io/upload_images/2803682-e75ab7b9032053ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>附录：<br>官网安装地址：<a href="https://about.gitlab.com/install/#ubuntu" target="_blank" rel="noopener">https://about.gitlab.com/install/#ubuntu</a><br>其他安装方案：<a href="https://www.howtoing.com/how-to-install-and-configure-gitlab-on-ubuntu-18-04" target="_blank" rel="noopener">https://www.howtoing.com/how-to-install-and-configure-gitlab-on-ubuntu-18-04</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-18-Solr集群-8-X-搭建</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-18-Solr%E9%9B%86%E7%BE%A4-8-X-%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##安装环境及版本：</p>
<ul>
<li>系统：ubuntu 18.04 LTS</li>
<li>jdk:  1.8.0</li>
<li>Tomcat: 9.0.22</li>
<li>Solr： 8.2.0</li>
<li>单机版：<a href="https://www.jianshu.com/p/59a3b9d3ba6d" target="_blank" rel="noopener">https://www.jianshu.com/p/59a3b9d3ba6d</a></li>
</ul>
<h2 id="一-官方方式-简单，推荐"><a href="#一-官方方式-简单，推荐" class="headerlink" title="一. 官方方式(简单，推荐)"></a>一. 官方方式(简单，推荐)</h2><ol>
<li>下载压缩包，上传并解压<br>Solr: <a href="https://lucene.apache.org/solr/downloads.html" target="_blank" rel="noopener">https://lucene.apache.org/solr/downloads.html</a><br>官方安装教程：<a href="https://lucene.apache.org/solr/guide/8_1/solr-tutorial.html" target="_blank" rel="noopener">https://lucene.apache.org/solr/guide/8_1/solr-tutorial.html</a></li>
<li>启动(交互式启动)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; -force 显示进度</span><br><span class="line"> .&#x2F;bin&#x2F;solr -e cloud -force</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">这将启动一个交互式会话，引导您完成设置带有嵌入式ZooKeeper的简单SolrCloud集群的步骤。</span><br><span class="line">该脚本首先询问您要在本地群集中运行多少个Solr节点，默认值为2。</span><br></pre></td></tr></table></figure>
Welcome to the SolrCloud example!</li>
</ol>
<p>This interactive session will help you launch a SolrCloud cluster on your local workstation.<br>To begin, how many Solr nodes would you like to run in your local cluster? (specify 1-4 nodes) [2]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">该脚本支持最多启动4个节点，但我们建议在启动时使用默认值2。这些节点将分别存在于一台计算机上，但将使用不同的端口来模拟不同服务器上的操作。</span><br><span class="line">接下来，该脚本将提示您将端口绑定到每个Solr节点，例如：</span><br></pre></td></tr></table></figure>
<p>Please enter the port for node1 [8983]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为每个节点选择任何可用端口; 第一个节点的默认值为8983，第二个节点的默认值为7574。该脚本将按顺序启动每个节点，并显示它用于启动服务器的命令，例如：</span><br></pre></td></tr></table></figure>
<p>solr start -cloud -s example/cloud/node1/solr -p 8983</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一个节点还将启动绑定到端口9983的嵌入式ZooKeeper服务器。第一个节点的Solr主目录example&#x2F;cloud&#x2F;node1&#x2F;solr位于-s选项所指示的位置。</span><br><span class="line"></span><br><span class="line">启动集群中的所有节点后，脚本会提示您输入要创建的集合的名称：</span><br></pre></td></tr></table></figure>
<p>Please provide a name for your new collection: [gettingstarted]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">建议的默认值是“gettingstarted”，但您可能希望选择更适合您的特定搜索应用程序的名称。</span><br><span class="line"></span><br><span class="line">接下来，脚本会提示您输入要分配集合的分片数。[分片](https:&#x2F;&#x2F;lucene.apache.org&#x2F;solr&#x2F;guide&#x2F;8_1&#x2F;shards-and-indexing-data-in-solrcloud.html#shards-and-indexing-data-in-solrcloud)进行更详细的覆盖以后，所以如果您不确定，我们建议使用2默认，这样你可以看到一个集合在SolrCloud集群跨多个节点分布。</span><br><span class="line"></span><br><span class="line">接下来，该脚本将提示您为每个分片创建的副本数。 本指南稍后将详细介绍[复制](https:&#x2F;&#x2F;lucene.apache.org&#x2F;solr&#x2F;guide&#x2F;8_1&#x2F;shards-and-indexing-data-in-solrcloud.html#shards-and-indexing-data-in-solrcloud)，因此如果您不确定，请使用默认值2，以便您可以在SolrCloud中查看复制的处理方式。</span><br><span class="line"></span><br><span class="line">最后，该脚本将提示您输入集合的配置目录的名称。您可以选择**_default**或**sample_techproducts_configs**。拉出配置目录，&#96;server&#x2F;solr&#x2F;configsets&#x2F;&#96;以便您可以预先查看它们。当您仍在为文档设计架构时，**_default**配置非常有用，并且在您尝试使用Solr时需要一些灵活性，因为它具有无架构功能。但是，在创建集合之后，可以禁用无模式功能以锁定模式（以便在执行此操作后索引的文档不会更改模式）或自行配置模式。这可以按如下方式完成（假设您的集合名称是&#96;mycollection&#96;）：</span><br><span class="line"></span><br><span class="line">3. 常用命令</span><br></pre></td></tr></table></figure>
<p>// 删除此集合<br>bin/solr delete -c techproducts<br>// 然后创建一个新的集合<br>bin/solr create -c <yourCollection> -s 2 -rf 2<br>// 要停止我们启动的两个Solr节点，请发出以下命令<br>bin/solr stop -all</p>
<p>//重新启动Solr<br>./bin/solr start -c -p 8983 -s example/cloud/node1/solr -force<br>//完成后启动第二个节点，并告诉它如何连接到ZooKeeper<br>./bin/solr start -c -p 7574 -s example/cloud/node2/solr -z localhost:9983 -force</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 二. 自定义方式(Zookeeper+Tomcat+Solr)</span><br><span class="line">#### 1. zookeeper集群</span><br><span class="line">1. 上传zookeeper到服务器，解压复制</span><br></pre></td></tr></table></figure>
<p>//解压<br>tar zxvf apache-zookeeper-3.5.5-bin<br>//复制到自己的路径<br>cp apache-zookeeper-3.5.5-bin /usr/local/zookeeper/zk1 -r<br>cp apache-zookeeper-3.5.5-bin /usr/local/zookeeper/zk2 -r<br>cp apache-zookeeper-3.5.5-bin /usr/local/zookeeper/zk3 -r</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 把zookeeper&#x2F;zk1&#x2F;conf&#x2F;zoo_sample.cfg复制一份改为zoo.cfg,并修改</span><br></pre></td></tr></table></figure>
<p> cp zoo_sample.cfg zoo.cfg<br> vim zoo.cfg</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">&#x2F;&#x2F;修改data路径</span><br><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;zk1&#x2F;data</span><br><span class="line">&#x2F;&#x2F;修改端口</span><br><span class="line">clientPort&#x3D;2181</span><br><span class="line">&#x2F;&#x2F;可选：zookeeper默认使用jetty，端口占用8080</span><br><span class="line">admin.serverPort&#x3D;8888</span><br><span class="line">&#x2F;&#x2F;增加集群配置</span><br><span class="line">server.1&#x3D;192.168.234.129:2881:3881</span><br><span class="line">server.2&#x3D;192.168.234.129:2882:3882</span><br><span class="line">server.3&#x3D;192.168.234.129:2883:3883</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-81ac755c47cc86b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>3.在zookeeper/zk1 目录下新建data文件夹，并新建文件myid，内容分别对应为zookeeper的编号(1,2,3)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd data&#x2F;</span><br><span class="line">echo 1 &gt;&gt; myid</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>分别启动即可<br><img src="https://upload-images.jianshu.io/upload_images/2803682-0e7d1f7a0dc63534.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<h4 id="2-solr集群"><a href="#2-solr集群" class="headerlink" title="2. solr集群"></a>2. solr集群</h4><ol>
<li>首先搭建单机版，并测试通过<br><a href="https://www.jianshu.com/p/59a3b9d3ba6d" target="_blank" rel="noopener">https://www.jianshu.com/p/59a3b9d3ba6d</a></li>
<li>复制四份solr的tomcat，每个tomcat都是单机版的solr<br><img src="https://upload-images.jianshu.io/upload_images/2803682-6793cc73ffaa817e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p><strong>以下修改，四个solr的tomcat文件都要同步修改</strong><br>3. 修改tomcat/binserver.xml的端口，分别为60** ,70** ,80** ,90**</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;第一处</span><br><span class="line">&lt;Server port&#x3D;&quot;8005&quot; shutdown&#x3D;&quot;SHUTDOWN&quot;&gt;</span><br><span class="line">&#x2F;&#x2F;第二处</span><br><span class="line">&lt;Connector port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">               connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">               redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span><br><span class="line">&#x2F;&#x2F;第三处</span><br><span class="line">&lt;Connector port&#x3D;&quot;8009&quot; protocol&#x3D;&quot;AJP&#x2F;1.3&quot; redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>修改tomcat*/webapps/solr/WEB-INF/web.xml的 标签<env-entry><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> # 这个路径对应上面的solrhome全路径(tomcat1,tomcat2,tomcat3,tomcat4)</span><br><span class="line">&lt;env-entry-value&gt;&#x2F;usr&#x2F;local&#x2F;solr-cloud&#x2F;tomcat1&#x2F;solrhome&lt;&#x2F;env-entry-value&gt;</span><br></pre></td></tr></table></figure></li>
<li>修改solrhorm下的solr.xml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;分别对应步骤3的端口(6080,7080,8080,9080)</span><br><span class="line">&lt;int name&#x3D;&quot;hostPort&quot;&gt;$&#123;jetty.port:9080&#125;&lt;&#x2F;int&gt;</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-d645614c6c043b87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>修改每一台solr的tomcat 的 bin目录下catalina.sh文件中加入DzkHost指定zookeeper服务器地址：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JAVA_OPTS&#x3D;&quot;-DzkHost&#x3D;192.168.234.129:2181,192.168.234.129:2182,192.168.234.129:2183&quot;</span><br></pre></td></tr></table></figure></li>
<li>启动四个tomat<br>浏览器访问：<a href="http://ip:8080/solr/index.html" target="_blank" rel="noopener">http://ip:8080/solr/index.html</a><br><img src="https://upload-images.jianshu.io/upload_images/2803682-8e10db404571ddee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><h4 id="3-新建collections-core核心"><a href="#3-新建collections-core核心" class="headerlink" title="3 新建collections/core核心"></a>3 新建collections/core核心</h4></li>
<li>新建索引，会报错<br><img src="https://upload-images.jianshu.io/upload_images/2803682-2281941aafea8eb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2 打开solr原始目录（solr安装包解压后的目录），找到 /server/scripts/cloud-scripts/zkcli.sh，使用这个脚本来上传core配置到zookeeper，命令如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;-zkhost：后面是zookeeper的地址， -cmd upconfig：上传命令</span><br><span class="line">&#x2F;&#x2F; -confdir：上传文件的路径 -confname myconf：上传后的名称</span><br><span class="line">.&#x2F;zkcli.sh -zkhost 192.168.234.129:2181,192.168.234.129:2182,192.168.234.129:2183 -cmd upconfig -confdir &#x2F;home&#x2F;lrxc&#x2F;solr-8.2.0&#x2F;server&#x2F;solr&#x2F;configsets&#x2F;_default&#x2F;conf -confname myconf</span><br></pre></td></tr></table></figure></li>
<li>再次创建即可<br><img src="https://upload-images.jianshu.io/upload_images/2803682-c714a638593c06dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<h2 id="Java连接代码"><a href="#Java连接代码" class="headerlink" title="Java连接代码"></a>Java连接代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	&#x2F;&#x2F; solr的core名称(索引库)</span><br><span class="line">	final String collection &#x3D; &quot;gettingstarted&quot;;</span><br><span class="line">        &#x2F;&#x2F; 添加数据</span><br><span class="line">	@Test</span><br><span class="line">	public void add() throws Exception &#123;</span><br><span class="line">		&#x2F;&#x2F; 创建客户端</span><br><span class="line">		List&lt;String&gt; solrUrls &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">		solrUrls.add(&quot;http:&#x2F;&#x2F;192.168.234.128:8983&#x2F;solr&quot;);</span><br><span class="line">		solrUrls.add(&quot;http:&#x2F;&#x2F;192.168.234.128:8983&#x2F;solr&quot;);</span><br><span class="line">		CloudSolrClient client &#x3D; new CloudSolrClient.Builder(solrUrls).withConnectionTimeout(10000)</span><br><span class="line">				.withSocketTimeout(60000).build();</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; 添加数据</span><br><span class="line">		final SolrInputDocument doc &#x3D; new SolrInputDocument();</span><br><span class="line">		doc.addField(&quot;id&quot;, UUID.randomUUID().toString());</span><br><span class="line">		doc.addField(&quot;name&quot;, &quot;我是测试数据&quot;);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; 保存并提交</span><br><span class="line">		client.add(collection, doc);</span><br><span class="line">		client.commit(collection);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F; 查询数据</span><br><span class="line">	@Test</span><br><span class="line">	public void query() throws Exception &#123;</span><br><span class="line">		&#x2F;&#x2F; 创建客户端</span><br><span class="line">		List&lt;String&gt; solrUrls &#x3D; new ArrayList&lt;String&gt;();</span><br><span class="line">		solrUrls.add(&quot;http:&#x2F;&#x2F;192.168.234.128:8983&#x2F;solr&quot;);</span><br><span class="line">		solrUrls.add(&quot;http:&#x2F;&#x2F;192.168.234.128:7574&#x2F;solr&#x2F;&quot;);</span><br><span class="line">		CloudSolrClient client &#x3D; new CloudSolrClient.Builder(solrUrls).build();</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; 查询条件</span><br><span class="line">		final Map&lt;String, String&gt; queryParamMap &#x3D; new HashMap&lt;String, String&gt;();</span><br><span class="line">		queryParamMap.put(&quot;q&quot;, &quot;*:*&quot;);</span><br><span class="line">&#x2F;&#x2F;		queryParamMap.put(&quot;fl&quot;, &quot;id, name&quot;);</span><br><span class="line">&#x2F;&#x2F;		queryParamMap.put(&quot;sort&quot;, &quot;id asc&quot;);</span><br><span class="line">		MapSolrParams queryParams &#x3D; new MapSolrParams(queryParamMap);</span><br><span class="line"></span><br><span class="line">		&#x2F;&#x2F; 获取结果</span><br><span class="line">		final QueryResponse response &#x3D; client.query(collection, queryParams);</span><br><span class="line">		final SolrDocumentList documents &#x3D; response.getResults();</span><br><span class="line"></span><br><span class="line">		for (SolrDocument document : documents) &#123;</span><br><span class="line">			System.out.println(document.getFirstValue(&quot;id&quot;));</span><br><span class="line">			System.out.println(document.getFirstValue(&quot;name&quot;));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>附录：<br>参考文章：<a href="https://oumuv.github.io/2018/11/28/solr-2/" target="_blank" rel="noopener">https://oumuv.github.io/2018/11/28/solr-2/</a></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-Nexus3-Maven私服</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-Nexus3-Maven%E7%A7%81%E6%9C%8D/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##一  安装nexus<br>1 下载nexus镜像<br>官网：<a href="https://help.sonatype.com/repomanager3/download" target="_blank" rel="noopener">https://help.sonatype.com/repomanager3/download</a><br>2. 上传至ubuntu</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;解压到自己的目录</span><br><span class="line">tar -zxvf  nexus-3.17.0-01-unix.tar.gz .</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>启动nexus<br>Nexus默认的端口是8081，可以在<strong>etc/nexus-default.properties</strong>配置中修改。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入bin目录下</span><br><span class="line">.&#x2F;nexux start</span><br></pre></td></tr></table></figure></li>
<li>等待一分钟 浏览器访问<br><a href="http://192.168.234.132:8081/" target="_blank" rel="noopener">http://192.168.234.132:8081/</a><br><img src="https://upload-images.jianshu.io/upload_images/2803682-95d2d68bbbe2ad7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>可以看到账号admin   密码需要手动获取<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取密码</span><br><span class="line">$ cat &#x2F;usr&#x2F;local&#x2F;sonatype-work&#x2F;nexus3&#x2F;admin.password</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>##二 上传代码至Nexus</p>
<ol>
<li>设置厂库可以重复上传<br>左侧选择Reposiroty—选择厂库maven-releases—找到Hosted—选择Allow redeploy—  Save<br><img src="https://upload-images.jianshu.io/upload_images/2803682-2df3e82c6635e86b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2 在maven的 settings.xml 中配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servers&gt;</span><br><span class="line">&lt;server&gt;</span><br><span class="line">  &lt;!--nexus 仓库名--&gt;</span><br><span class="line">  &lt;id&gt;maven-releases&lt;&#x2F;id&gt;</span><br><span class="line">  &lt;!--nexus 仓库的账号密码--&gt;</span><br><span class="line">  &lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">  &lt;password&gt;123&lt;&#x2F;password&gt;</span><br><span class="line">&lt;&#x2F;server&gt;</span><br><span class="line">&lt;&#x2F;servers&gt;</span><br></pre></td></tr></table></figure>
3 配置项目pom.xml文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置maven私服地址，用户打包上传--&gt;</span><br><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;!--id 对应新建仓库的名字--&gt;</span><br><span class="line">        &lt;id&gt;maven-releases&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;192.168.234.132:8081&#x2F;repository&#x2F;test-repository&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;repository&gt;</span><br><span class="line">&lt;&#x2F;distributionManagement&gt;</span><br></pre></td></tr></table></figure>
4 发布到nexus<br><img src="https://upload-images.jianshu.io/upload_images/2803682-2391492e773f3eda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>出现BUILD SUCCESS 代表成功。<br>5 查看nexus厂库<br><img src="https://upload-images.jianshu.io/upload_images/2803682-8a0a0fa4acb444c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<p>##三 使用私服</p>
<ol>
<li>直接在项目的pom.xml 添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!--maven依赖:上传到nexus的代码信息--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.bxlt&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;nexus_api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.0-RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;repositories&gt;</span><br><span class="line">    &lt;!--配置nexus私服地址--&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;maven-releases&lt;&#x2F;id&gt;</span><br><span class="line">        &lt;name&gt;maven-releases&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;192.168.234.132:8081&#x2F;repository&#x2F;test-repository&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;repository&gt;</span><br><span class="line">&lt;&#x2F;repositories&gt;</span><br></pre></td></tr></table></figure></li>
<li>查看下载地址<br><img src="https://upload-images.jianshu.io/upload_images/2803682-083f4d6547ef5450.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>##四. maven的 settings.xml 综合配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;settings xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0&quot;</span><br><span class="line">          xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">          xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;SETTINGS&#x2F;1.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;settings-1.0.0.xsd&quot;&gt;</span><br><span class="line">   </span><br><span class="line">    &lt;!--该值表示构建系统本地仓库的路径。--&gt;</span><br><span class="line">    &lt;localRepository&gt;E:\Repository\repository&lt;&#x2F;localRepository&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--远程仓库名、用户名、密码，有些仓库访问是需要安全认证的 --&gt;</span><br><span class="line">    &lt;servers&gt;</span><br><span class="line">        &lt;server&gt;</span><br><span class="line">            &lt;!-- 远程厂库的id(Name) --&gt;</span><br><span class="line">            &lt;id&gt;maven-public&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;username&gt;admin&lt;&#x2F;username&gt;</span><br><span class="line">            &lt;password&gt;admin&lt;&#x2F;password&gt;</span><br><span class="line">        &lt;&#x2F;server&gt;</span><br><span class="line">    &lt;&#x2F;servers&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--为仓库列表配置的下载镜像列表。  --&gt;</span><br><span class="line">    &lt;mirrors&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;!--远程厂库的id(Name)  --&gt;</span><br><span class="line">            &lt;id&gt;maven-public&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;!--此处配置所有的构建均从私有仓库中下载 *代表所有，也可以写central --&gt;</span><br><span class="line">            &lt;mirrorOf&gt;*&lt;&#x2F;mirrorOf&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;192.168.234.130:8091&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;mirror&gt;</span><br><span class="line">    &lt;&#x2F;mirrors&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--根据环境参数来调整构建配置的列表。--&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;id&gt;nexus&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;!--远程仓库列表。  --&gt;</span><br><span class="line">            &lt;repositories&gt;</span><br><span class="line">                &lt;repository&gt;</span><br><span class="line">                	&lt;!-- 远程厂库的id(Name) --&gt;</span><br><span class="line">                    &lt;id&gt;maven-public&lt;&#x2F;id&gt;</span><br><span class="line">                    &lt;url&gt;http:&#x2F;&#x2F;192.168.234.130:8091&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">	                &lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span><br><span class="line">	                &lt;releases&gt;&lt;enabled&gt;true&lt;&#x2F;enabled&gt;&lt;&#x2F;releases&gt;</span><br><span class="line">	                &lt;snapshots&gt;&lt;enabled&gt;true&lt;&#x2F;enabled&gt;&lt;&#x2F;snapshots&gt;</span><br><span class="line">	            &lt;&#x2F;repository&gt;</span><br><span class="line">            &lt;&#x2F;repositories&gt;</span><br><span class="line">            &lt;!-- 插件仓库列表 --&gt;</span><br><span class="line">            &lt;pluginRepositories&gt;</span><br><span class="line">                &lt;pluginRepository&gt;</span><br><span class="line">                    &lt;id&gt;maven-public&lt;&#x2F;id&gt;</span><br><span class="line">                    &lt;url&gt;http:&#x2F;&#x2F;192.168.234.130:8091&#x2F;repository&#x2F;maven-public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">                    &lt;releases&gt;&lt;enabled&gt;true&lt;&#x2F;enabled&gt;&lt;&#x2F;releases&gt;</span><br><span class="line">                    &lt;snapshots&gt;&lt;enabled&gt;true&lt;&#x2F;enabled&gt;&lt;&#x2F;snapshots&gt;</span><br><span class="line">                &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">            &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">        &lt;&#x2F;profile&gt;</span><br><span class="line">    &lt;&#x2F;profiles&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!--激活配置--&gt;</span><br><span class="line">    &lt;activeProfiles&gt;</span><br><span class="line">        &lt;!--profile下的id--&gt;</span><br><span class="line">        &lt;activeProfile&gt;nexus&lt;&#x2F;activeProfile&gt;</span><br><span class="line">    &lt;&#x2F;activeProfiles&gt;</span><br><span class="line">&lt;&#x2F;settings&gt;</span><br></pre></td></tr></table></figure>
##参考文章：<br><a href="https://blog.csdn.net/fly910905/article/details/78668677" target="_blank" rel="noopener">https://blog.csdn.net/fly910905/article/details/78668677</a><br><a href="https://cloud.tencent.com/developer/article/1014577" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1014577</a></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-MongoDB 配置</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-MongoDB%20%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="安装环境及版本："><a href="#安装环境及版本：" class="headerlink" title="安装环境及版本："></a>安装环境及版本：</h2><ul>
<li><p>系统：ubuntu 18.04 LTS</p>
</li>
<li><p>MongoDB: </p>
</li>
</ul>
<h2 id="一-安装"><a href="#一-安装" class="headerlink" title="一 安装"></a>一 安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br><span class="line">sudo apt install mongodb</span><br><span class="line">sudo systemctl status mongodb</span><br></pre></td></tr></table></figure>

<p>默认端口:  27017</p>
<h2 id="二-使用"><a href="#二-使用" class="headerlink" title="二 使用"></a>二 使用</h2><ol>
<li><p>基础命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#进入命令行</span><br><span class="line">mongo</span><br><span class="line">#显示所有数据库</span><br><span class="line">show dbs</span><br><span class="line">#切换数据库</span><br><span class="line">use admin</span><br><span class="line">#退出</span><br><span class="line">quit()</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.restaurants.insert(</span><br><span class="line">   &#123;</span><br><span class="line">      &quot;borough&quot; : &quot;Manhattan&quot;,</span><br><span class="line">      &quot;cuisine&quot; : &quot;Italian&quot;,</span><br><span class="line">      &quot;name&quot; : &quot;Vella&quot;,</span><br><span class="line">      &quot;id&quot; : &quot;41704620&quot;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.col.find()</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.restaurants.update(</span><br><span class="line">    &#123; &quot;name&quot; : &quot;Vella&quot; &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      $set: &#123; &quot;cuisine&quot;: &quot;American (New)&quot; &#125;,</span><br><span class="line">      $currentDate: &#123; &quot;lastModified&quot;: true &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#删除一个集合中的所有文档，传递一个空的条件文档即可</span><br><span class="line">db.restaurants.remove( &#123; &#125; )</span><br><span class="line">#删除一个集合</span><br><span class="line">db.restaurants.drop()</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="三-卸载"><a href="#三-卸载" class="headerlink" title="三 卸载"></a>三 卸载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop mongodb</span><br><span class="line">sudo apt purge mongodb</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-Jenkins-搭建全教程</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-Jenkins-%E6%90%AD%E5%BB%BA%E5%85%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="一-安装Jenkins"><a href="#一-安装Jenkins" class="headerlink" title="一 安装Jenkins"></a>一 安装Jenkins</h2><p>1 需要先安装jdk环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;jenkins 对jdk版本有要求，具体看官网</span><br><span class="line"># sudo apt install openjdk-8-jdk-headless</span><br></pre></td></tr></table></figure>
<p>2 配置jenkins</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装命令</span><br><span class="line"># wget -q -O - https:&#x2F;&#x2F;pkg.jenkins.io&#x2F;debian&#x2F;jenkins.io.key | sudo apt-key add -</span><br><span class="line"># sudo sh -c &#39;echo deb http:&#x2F;&#x2F;pkg.jenkins.io&#x2F;debian-stable binary&#x2F; &gt; &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;jenkins.list&#39;</span><br><span class="line"># sudo apt-get update</span><br><span class="line"># sudo apt-get install jenkins</span><br></pre></td></tr></table></figure>
<p>3 jenkins 相关命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line"># sudo service jenkins start|stop|restart</span><br><span class="line"># sudo &#x2F;etc&#x2F;init.d&#x2F;jenkins restart</span><br></pre></td></tr></table></figure>
<p>官方安装教程：<a href="https://jenkins.io/zh/doc/book/installing/#debianubuntu" target="_blank" rel="noopener">https://jenkins.io/zh/doc/book/installing/#debianubuntu</a></p>
<h2 id="二-配置jenkins"><a href="#二-配置jenkins" class="headerlink" title="二 配置jenkins"></a>二 配置jenkins</h2><ol>
<li><p>获取登录密码<br>浏览器打开  <a href="http://192.168.x.x:8080" target="_blank" rel="noopener">http://192.168.x.x:8080</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ubuntu 执行，获取登录密码</span><br><span class="line"># cat &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword</span><br></pre></td></tr></table></figure></li>
<li><p>选择 安装推荐的插件，耐心等待</p>
</li>
<li><p>修改admin密码. </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户列表---&gt;选中admin---&gt;设置---&gt;输入新密码---&gt;保存</span><br></pre></td></tr></table></figure>
<p>若界面是英文，把jenkins服务重启下就好了</p>
</li>
<li><p>增加root权限<br>将root添加到jenkins用户组中，让root用户拥有管理jenkins的权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo gpasswd -a root jenkins</span><br></pre></td></tr></table></figure>
<p>让jenkins用root身份运行，配置文件在/etc/default/jenkins</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JENKINS_USER&#x3D;root</span><br><span class="line">JENKINS_GROUP&#x3D;root</span><br></pre></td></tr></table></figure>
<p>jenkins的工作目录在/var/lib/jenkins,把jenkins的默认运行用户改成了root</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chown -R root:root &#x2F;var&#x2F;lib&#x2F;jenkins</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置jenkins全局jdk, maven环境<br><img src="https://upload-images.jianshu.io/upload_images/2803682-1a01a84442d3a7ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;一般默认jdk路径</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-8-openjdk-amd64</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/2803682-1b3d9c7cc432848f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
<li><p>安装maven项目插件(Maven Integration)<br><img src="https://upload-images.jianshu.io/upload_images/2803682-f239865d3c281f6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<h2 id="三-Jenkins-自动部署"><a href="#三-Jenkins-自动部署" class="headerlink" title="三 Jenkins 自动部署"></a>三 Jenkins 自动部署</h2><ol>
<li>jenkins新建maven项目<br><img src="https://upload-images.jianshu.io/upload_images/2803682-a343f3bda587d68c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>配置git代码地址<br><img src="https://upload-images.jianshu.io/upload_images/2803682-56f5e89b9c053400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>打包命令<br><img src="https://upload-images.jianshu.io/upload_images/2803682-5c89debd6e23f319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>自动部署脚本<br><img src="https://upload-images.jianshu.io/upload_images/2803682-afaf7847ebc7e705.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将应用停止</span></span><br><span class="line">echo "Stopping SpringBoot Application"</span><br><span class="line">pid=`ps -ef | grep test.jar | grep -v grep | awk '&#123;print $2&#125;'`</span><br><span class="line">if [ -n "$pid" ]</span><br><span class="line">then</span><br><span class="line">   kill -9 $pid</span><br><span class="line">else</span><br><span class="line">   echo Application is already stopped</span><br><span class="line">fi</span><br><span class="line">mv -f /var/lib/jenkins/workspace/test/target/jenkins-test-1.0-SNAPSHOT.jar /usr/local/spring/test.jar</span><br><span class="line">chmod 777 /usr/local/spring/test.jar</span><br><span class="line">echo "执行....."</span><br><span class="line">nohup java -jar /usr/local/spring/test.jar &amp;</span><br></pre></td></tr></table></figure>
后台启动通用版，直接配置即可<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">服务器名称(pom文件定义)</span></span><br><span class="line">SERVER_NAME=jenkins-test</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成的jar包名称</span></span><br><span class="line">JAR_NAME=jenkins-test-1.0-SNAPSHOT.jar</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成的jar包路径</span></span><br><span class="line">JAR_PATH=/var/lib/jenkins/workspace/test/target</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行jar的工作路径，统一管理，并需要提前创建好</span></span><br><span class="line">JAR_WORK_PATH=/usr/local/spring</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将应用停止</span></span><br><span class="line">echo "Stopping SpringBoot Application"</span><br><span class="line">pid=`ps -ef | grep "$SERVER_NAME" | grep -v grep | awk '&#123;print $2&#125;'`</span><br><span class="line">if [ -n "$pid" ]</span><br><span class="line">then</span><br><span class="line">   kill -9 $pid</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">mv -f $JAR_PATH/$JAR_NAME $JAR_WORK_PATH</span><br><span class="line">chmod 777 $JAR_WORK_PATH/$JAR_NAME</span><br><span class="line">echo "执行....."</span><br><span class="line">BUILD_ID=dontKillMe nohup java -jar $JAR_WORK_PATH/$JAR_NAME &amp;</span><br></pre></td></tr></table></figure>
参数说明：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###</span></span></span><br><span class="line">-z	检测字符串长度是否为0，为0返回 true。	[ -z $a ] 返回 false。</span><br><span class="line">-n	检测字符串长度是否不为 0，不为 0 返回 true。	[ -n "$a" ] 返回 true。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如果 expression 返回 <span class="literal">true</span>，<span class="keyword">then</span> 后边的语句将会被执行；如果返回 <span class="literal">false</span>，不会执行任何语句</span></span><br><span class="line">if [ expression ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression is true</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如果 expression 返回 <span class="literal">true</span>，那么 <span class="keyword">then</span> 后边的语句将会被执行；否则，执行 <span class="keyword">else</span> 后边的语句</span></span><br><span class="line">if [ expression ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression is true</span><br><span class="line">else</span><br><span class="line">   Statement(s) to be executed if expression is not true</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>5 开始构建并查看构建日志<br><img src="https://upload-images.jianshu.io/upload_images/2803682-898f820615e36215.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="四-卸载jenkins"><a href="#四-卸载jenkins" class="headerlink" title="四 卸载jenkins"></a>四 卸载jenkins</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;服务</span><br><span class="line">sudo apt-get remove jenkins</span><br><span class="line">&#x2F;&#x2F;安装包</span><br><span class="line">sudo apt-get remove --auto-remove jenkins</span><br><span class="line">&#x2F;&#x2F;配置和数据</span><br><span class="line">sudo apt-get purge jenkins</span><br><span class="line">sudo apt-get purge --auto-remove jenkins</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-Nginx-Vsftpd-图片服务器</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-Nginx-Vsftpd-%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##安装环境及版本：</p>
<ul>
<li>系统：ubuntu 18.04 LTS</li>
<li>Nginx: 1.16.0</li>
<li>Vsftpd: 3.0.3</li>
</ul>
<p>##一.安装Vsftpd</p>
<ol>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure></li>
<li>配置vsftpd<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;vsftpd.conf</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-71ac5a0ec73b1618.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>增加用户<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;增加用户</span><br><span class="line">$ useradd ftp</span><br><span class="line">&#x2F;&#x2F;设置密码</span><br><span class="line">$ passwd ftp</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure>
切换用户ftp登录  提示This account is currently not available问题：<br>修改登录权限，把/sbin /nologin 改成/bin/bash<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-12c3da124b1f8140.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>创建文件夹，用于以后存放图片<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;home</span><br><span class="line">$ mkdir ftp</span><br><span class="line">&#x2F;&#x2F; 改变用户的拥有者及用户组: chown [-R] 账号名称:用户组名称 文件或目录</span><br><span class="line">$ chown ftp:ftp ftp</span><br><span class="line">&#96;</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-2d4d4c057a97666a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>测试, 外网访问<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp localhost</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-ace5a69acaa1ffb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<h2 id="二-配置Nginx"><a href="#二-配置Nginx" class="headerlink" title="二. 配置Nginx"></a>二. 配置Nginx</h2><p>1 安装：<a href="https://www.jianshu.com/p/20157e8a0b06" target="_blank" rel="noopener">https://www.jianshu.com/p/20157e8a0b06</a><br>2 编辑nginx.conf<br><strong>sudo vi /etc/nginx/nginx.conf</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	...</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">	location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;home&#x2F;ftp;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>上传一张图片 1.jpg 到 /home/ftp 下<br><img src="https://upload-images.jianshu.io/upload_images/2803682-ce43017f272738b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>浏览器访问<br><img src="https://upload-images.jianshu.io/upload_images/2803682-03607234d147bdcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<h2 id="Java代码上传"><a href="#Java代码上传" class="headerlink" title="Java代码上传"></a>Java代码上传</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.net.ftp.FTP;</span><br><span class="line">import org.apache.commons.net.ftp.FTPClient;</span><br><span class="line">import org.apache.commons.net.ftp.FTPFile;</span><br><span class="line">import org.apache.commons.net.ftp.FTPReply;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * ftp上传下载工具类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class FtpUtil &#123;</span><br><span class="line"></span><br><span class="line">	&#x2F;** </span><br><span class="line">	 * Description: 向FTP服务器上传文件 </span><br><span class="line">	 * @param host FTP服务器hostname </span><br><span class="line">	 * @param port FTP服务器端口 </span><br><span class="line">	 * @param username FTP登录账号 </span><br><span class="line">	 * @param password FTP登录密码 </span><br><span class="line">	 * @param basePath FTP服务器基础目录</span><br><span class="line">	 * @param filePath FTP服务器文件存放路径。例如分日期存放：&#x2F;2015&#x2F;01&#x2F;01。文件的路径为basePath+filePath</span><br><span class="line">	 * @param filename 上传到FTP服务器上的文件名 </span><br><span class="line">	 * @param input 输入流 </span><br><span class="line">	 * @return 成功返回true，否则返回false </span><br><span class="line">	 *&#x2F;  </span><br><span class="line">public static boolean uploadFile(String host, int port, String username, String password, String basePath,</span><br><span class="line">			String filePath, String filename, InputStream input) &#123;</span><br><span class="line">		boolean result &#x3D; false;</span><br><span class="line">		FTPClient ftp &#x3D; new FTPClient();</span><br><span class="line">		try &#123;</span><br><span class="line">			int reply;</span><br><span class="line">			ftp.connect(host, port);&#x2F;&#x2F; 连接FTP服务器</span><br><span class="line">			&#x2F;&#x2F; 如果采用默认端口，可以使用ftp.connect(host)的方式直接连接FTP服务器</span><br><span class="line">			ftp.login(username, password);&#x2F;&#x2F; 登录</span><br><span class="line">			reply &#x3D; ftp.getReplyCode();</span><br><span class="line">			if (!FTPReply.isPositiveCompletion(reply)) &#123;</span><br><span class="line">				System.out.println(&quot;ftp登录失败&quot;);</span><br><span class="line">				ftp.disconnect();</span><br><span class="line">				return result;</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F;切换到上传目录</span><br><span class="line">			if (!ftp.changeWorkingDirectory(basePath+filePath)) &#123;</span><br><span class="line">				&#x2F;&#x2F;如果目录不存在创建目录</span><br><span class="line">				String[] dirs &#x3D; filePath.split(&quot;&#x2F;&quot;);</span><br><span class="line">				String tempPath &#x3D; basePath;</span><br><span class="line">				for (String dir : dirs) &#123;</span><br><span class="line">					if (null &#x3D;&#x3D; dir || &quot;&quot;.equals(dir)) continue;</span><br><span class="line">					tempPath +&#x3D; &quot;&#x2F;&quot; + dir;</span><br><span class="line">					if (!ftp.changeWorkingDirectory(tempPath)) &#123;</span><br><span class="line">						if (!ftp.makeDirectory(tempPath)) &#123;</span><br><span class="line">							return result;</span><br><span class="line">						&#125; else &#123;</span><br><span class="line">							ftp.changeWorkingDirectory(tempPath);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			&#x2F;&#x2F;设置上传文件的类型为二进制类型</span><br><span class="line">			ftp.setFileType(FTP.BINARY_FILE_TYPE);</span><br><span class="line">			&#x2F;&#x2F;上传文件</span><br><span class="line">			if (!ftp.storeFile(filename, input)) &#123;</span><br><span class="line">				return result;</span><br><span class="line">			&#125;</span><br><span class="line">			input.close();</span><br><span class="line">			ftp.logout();</span><br><span class="line">			result &#x3D; true;</span><br><span class="line">		&#125; catch (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			if (ftp.isConnected()) &#123;</span><br><span class="line">				try &#123;</span><br><span class="line">					ftp.disconnect();</span><br><span class="line">				&#125; catch (IOException ioe) &#123;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#x2F;** </span><br><span class="line">	 * Description: 从FTP服务器下载文件 </span><br><span class="line">	 * @param host FTP服务器hostname </span><br><span class="line">	 * @param port FTP服务器端口 </span><br><span class="line">	 * @param username FTP登录账号 </span><br><span class="line">	 * @param password FTP登录密码 </span><br><span class="line">	 * @param remotePath FTP服务器上的相对路径 </span><br><span class="line">	 * @param fileName 要下载的文件名 </span><br><span class="line">	 * @param localPath 下载后保存到本地的路径 </span><br><span class="line">	 * @return </span><br><span class="line">	 *&#x2F;  </span><br><span class="line">	public static boolean downloadFile(String host, int port, String username, String password, String remotePath,</span><br><span class="line">			String fileName, String localPath) &#123;</span><br><span class="line">		boolean result &#x3D; false;</span><br><span class="line">		FTPClient ftp &#x3D; new FTPClient();</span><br><span class="line">		try &#123;</span><br><span class="line">			int reply;</span><br><span class="line">			ftp.connect(host, port);</span><br><span class="line">			&#x2F;&#x2F; 如果采用默认端口，可以使用ftp.connect(host)的方式直接连接FTP服务器</span><br><span class="line">			ftp.login(username, password);&#x2F;&#x2F; 登录</span><br><span class="line">			reply &#x3D; ftp.getReplyCode();</span><br><span class="line">			if (!FTPReply.isPositiveCompletion(reply)) &#123;</span><br><span class="line">				ftp.disconnect();</span><br><span class="line">				return result;</span><br><span class="line">			&#125;</span><br><span class="line">			ftp.changeWorkingDirectory(remotePath);&#x2F;&#x2F; 转移到FTP服务器目录</span><br><span class="line">			FTPFile[] fs &#x3D; ftp.listFiles();</span><br><span class="line">			for (FTPFile ff : fs) &#123;</span><br><span class="line">				if (ff.getName().equals(fileName)) &#123;</span><br><span class="line">					File localFile &#x3D; new File(localPath + &quot;&#x2F;&quot; + ff.getName());</span><br><span class="line"></span><br><span class="line">					OutputStream is &#x3D; new FileOutputStream(localFile);</span><br><span class="line">					ftp.retrieveFile(ff.getName(), is);</span><br><span class="line">					is.close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			ftp.logout();</span><br><span class="line">			result &#x3D; true;</span><br><span class="line">		&#125; catch (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; finally &#123;</span><br><span class="line">			if (ftp.isConnected()) &#123;</span><br><span class="line">				try &#123;</span><br><span class="line">					ftp.disconnect();</span><br><span class="line">				&#125; catch (IOException ioe) &#123;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		try &#123;  </span><br><span class="line">	        FileInputStream in&#x3D;new FileInputStream(new File(&quot;E:&#x2F;a.png&quot;));  </span><br><span class="line">	        boolean flag &#x3D; uploadFile(&quot;192.168.17.129&quot;, 21, &quot;ftpuser&quot;, &quot;ftpuser&quot;, &quot;&#x2F;home&#x2F;ftp&quot;,&quot;&#x2F;&quot;, &quot;abc1.png&quot;, in);  </span><br><span class="line">	        System.out.println(flag);  </span><br><span class="line">	    &#125; catch (FileNotFoundException e) &#123;  </span><br><span class="line">	        e.printStackTrace();  </span><br><span class="line">	    &#125;  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-Nginx-配置</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-Nginx-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="安装环境及版本："><a href="#安装环境及版本：" class="headerlink" title="安装环境及版本："></a>安装环境及版本：</h2><ul>
<li>系统：ubuntu 18.04 LTS</li>
<li>Nginx: 1.16.0</li>
</ul>
<h2 id="一-安装"><a href="#一-安装" class="headerlink" title="一  安装"></a>一  安装</h2><ol>
<li>更新软件源<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li>
<li>安装<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure></li>
<li>命令启动、停止、重启<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service  nginx start|stop|reload</span><br></pre></td></tr></table></figure></li>
<li>外网访问<br>默认端口80<br><img src="https://upload-images.jianshu.io/upload_images/2803682-b94cc8f9679732ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
<h2 id="二-代理转发"><a href="#二-代理转发" class="headerlink" title="二  代理转发"></a>二  代理转发</h2><ol>
<li><p>配置代理</p>
<p>sudo vim /etc/nginx/nginx.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">		#监听端口</span><br><span class="line">        listen       80;</span><br><span class="line">		#监听地址</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">			proxy_pass  http:&#x2F;&#x2F;localhost:8081;</span><br><span class="line">        &#125;</span><br><span class="line">		location &#x2F;jian &#123;</span><br><span class="line">            proxy_pass  https:&#x2F;&#x2F;www.jianshu.com&#x2F;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代理说明：<br>访问 <a href="http://localhost:80" target="_blank" rel="noopener">http://localhost:80</a>   实际是：<a href="https://localhost:8081" target="_blank" rel="noopener">https://localhost:8081</a><br>访问 <a href="http://localhost/jian" target="_blank" rel="noopener">http://localhost/jian</a>  实际是：<a href="https://www.jianshu.com" target="_blank" rel="noopener">https://www.jianshu.com</a></p>
<ol start="2">
<li>location正则写法</li>
</ol>
</li>
</ol>
<ul>
<li>已=开头表示精确匹配</li>
<li>^~ 开头表示uri以某个常规字符串开头，不是正则匹配</li>
<li>~ 开头表示区分大小写的正则匹配;</li>
<li>~* 开头表示不区分大小写的正则匹配</li>
<li>/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li>
</ul>
<p>location正则详解：<a href="https://segmentfault.com/a/1190000002797606" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002797606</a></p>
<ol start="3">
<li><p>proxy_pass 转发相对–绝对路径</p>
<p>在nginx中配置proxy_pass时，当在后面的url加上了/，相当于是绝对根路径，则nginx不会把location中匹配的路径部分代理走;</p>
<p>如果没有/，则会把匹配的路径部分也给代理走</p>
<p>例：localhost/proxy/test.html 进行访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location  &#x2F;proxy&#x2F; &#123;</span><br><span class="line">	proxy_pass http:&#x2F;&#x2F;127.0.0.1:81&#x2F;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转发到：localhost/test.html </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location  &#x2F;proxy&#x2F; &#123;</span><br><span class="line">	proxy_pass http:&#x2F;&#x2F;127.0.0.1:81; #少一个 &#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转发到：localhost/proxy/test.html</p>
</li>
<li><p>重启nginx服务</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>

<p>访问 <a href="http://localhost/jian" target="_blank" rel="noopener">http://localhost/jian</a><br><img src="https://upload-images.jianshu.io/upload_images/2803682-d8ac8dfe3a612108.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="三-卸载"><a href="#三-卸载" class="headerlink" title="三  卸载"></a>三  卸载</h2><p><strong>首先停止nginx 服务</strong></p>
<ol>
<li>删除nginx<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt --purge remove nginx</span><br></pre></td></tr></table></figure></li>
<li>自动移除全部不使用的软件包<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt autoremove</span><br></pre></td></tr></table></figure></li>
<li>列出与nginx相关的软件 并删除显示的软件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg --get-selections|grep nginx</span><br><span class="line"></span><br><span class="line">apt-get --purge remove nginx</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-Redis-集群</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-Redis-%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##安装环境及版本：</p>
<ul>
<li>系统：ubuntu 18.04 LTS</li>
<li>Redis： redis-5.0.5</li>
<li>配置说明：六个节点，三主三从</li>
</ul>
<p>##一 安装Redis</p>
<ol>
<li>编译命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;gcc编译器 -y默认所有提示选是</span><br><span class="line"># apt install gcc -y</span><br><span class="line">&#x2F;&#x2F;make 命令</span><br><span class="line"># apt install make</span><br></pre></td></tr></table></figure></li>
<li>下载并解压<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;找个目录存放临时文件</span><br><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;tmp</span><br><span class="line">&#x2F;&#x2F;下载</span><br><span class="line"># wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.5.tar.gz</span><br><span class="line">&#x2F;&#x2F;解压</span><br><span class="line"># tar -zxvf redis-5.0.5.tar.gz </span><br><span class="line"># cd redis-5.0.5</span><br><span class="line">&#x2F;&#x2F;编译 </span><br><span class="line"># make &#x2F;&#x2F;若报错Entering directory xxx，使用make MALLOC&#x3D;libc</span><br><span class="line">&#x2F;&#x2F;安装  PREFIX后跟安装路径</span><br><span class="line"># make install PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis1</span><br></pre></td></tr></table></figure></li>
<li>启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入安装路径的bin下</span><br><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis1&#x2F;bin</span><br><span class="line">&#x2F;&#x2F;启动</span><br><span class="line"># .&#x2F;redis-server $   &#x2F;&#x2F; $表示后台启动</span><br></pre></td></tr></table></figure>
<h2 id="二-搭建集群"><a href="#二-搭建集群" class="headerlink" title="二 搭建集群"></a>二 搭建集群</h2></li>
<li>复制源码目录的redis.conf到安装目录下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp &#x2F;usr&#x2F;local&#x2F;tmp&#x2F;redis-5.0.5&#x2F;redis.conf &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis1</span><br></pre></td></tr></table></figure></li>
<li>编辑redis.conf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;外网访问</span><br><span class="line"># bind 127.0.0.1</span><br><span class="line">&#x2F;&#x2F;更改端口</span><br><span class="line"># port 9001</span><br><span class="line">&#x2F;&#x2F;开启集群模式</span><br><span class="line"># cluster-enabled yes</span><br><span class="line">&#x2F;&#x2F;后台启动</span><br><span class="line"># daemonize yes</span><br><span class="line">&#x2F;&#x2F;关闭保护模式</span><br><span class="line"># protected-mode no</span><br></pre></td></tr></table></figure></li>
<li>测试单个redis启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入安装路径的bin下</span><br><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis1&#x2F;bin</span><br><span class="line">&#x2F;&#x2F;启动</span><br><span class="line"># .&#x2F;redis-server $   &#x2F;&#x2F; $表示后台启动</span><br></pre></td></tr></table></figure></li>
<li>复制多份redis文件,并修改端口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入安装目录下</span><br><span class="line"># cd &#x2F;usr&#x2F;local&#x2F;redis-cluster</span><br><span class="line">&#x2F;&#x2F;开始复制</span><br><span class="line"># cp redis1 redis2</span><br><span class="line"># cp redis1 redis3</span><br><span class="line"># cp redis1 redis4</span><br><span class="line"># cp redis1 redis5</span><br><span class="line"># cp redis1 redis6</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-342c4d1efce6499b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分别修改bin目录下redis.conf的port为 9001,9002,9003,9004,9005,9006</span><br></pre></td></tr></table></figure></li>
<li>启动、关闭脚本<br>新建文件 <strong>vim start.sh</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#一键开启所有的redis集群</span><br><span class="line"> </span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis1&#x2F;bin</span><br><span class="line">.&#x2F;redis-server .&#x2F;redis.conf</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis2&#x2F;bin</span><br><span class="line">.&#x2F;redis-server .&#x2F;redis.conf</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis3&#x2F;bin</span><br><span class="line">.&#x2F;redis-server .&#x2F;redis.conf</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis4&#x2F;bin</span><br><span class="line">.&#x2F;redis-server .&#x2F;redis.conf</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis5&#x2F;bin</span><br><span class="line">.&#x2F;redis-server .&#x2F;redis.conf</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis6&#x2F;bin</span><br><span class="line">.&#x2F;redis-server .&#x2F;redis.conf</span><br></pre></td></tr></table></figure>
新建文件 <strong>vim stop.sh</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#一键关闭所有redis集群</span><br><span class="line"> </span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis1&#x2F;bin</span><br><span class="line">.&#x2F;redis-cli -h 127.0.0.1 -p 9001 shutdown</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis2&#x2F;bin</span><br><span class="line">.&#x2F;redis-cli -h 127.0.0.1 -p 9002 shutdown</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis3&#x2F;bin</span><br><span class="line">.&#x2F;redis-cli -h 127.0.0.1 -p 9003 shutdown</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis4&#x2F;bin</span><br><span class="line">.&#x2F;redis-cli -h 127.0.0.1 -p 9004 shutdown </span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis5&#x2F;bin</span><br><span class="line">.&#x2F;redis-cli -h 127.0.0.1 -p 9005 shutdown</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis-cluster&#x2F;redis6&#x2F;bin</span><br><span class="line">.&#x2F;redis-cli -h 127.0.0.1 -p 9006 shutdown</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>对文件赋执行权限</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chmod 777 start.sh</span><br><span class="line"># chmod 777 stop.sh</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>启动集群<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;启动脚本</span><br><span class="line"># sh start.sh</span><br><span class="line">&#x2F;&#x2F;查看redis进程</span><br><span class="line"># ps -ef|grep redis</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-818952811d8a2fe4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>可以看到全部启动成功</li>
<li>查看集群状态<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;任意一个redis的bin目录下,启动客户端</span><br><span class="line"># cd redis1&#x2F;bin </span><br><span class="line">&#x2F;&#x2F;启动客户端 -c 是指集群模式启动</span><br><span class="line"># .&#x2F;redis-cli -c -p 9001</span><br><span class="line">&#x2F;&#x2F;集群信息</span><br><span class="line"># cluster info</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-aa2943391618b042.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>可以看到失败了。。。继续<br>8 关联集群<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;任意一个redis的bin目录下,启动客户端</span><br><span class="line"># cd redis1&#x2F;bin</span><br><span class="line">&#x2F;&#x2F;此处一定要使用真实ip地址，不用使用127.0.0.1:9001  这种</span><br><span class="line"># .&#x2F;redis-cli --cluster create 192.168.234.128:9001 192.168.234.128:9002 192.168.234.128:9003 192.168.234.128:9004 192.168.234.128:9005 192.168.234.128:9006 --cluster-replicas 1</span><br></pre></td></tr></table></figure>
说明：5.0以后/redis-trib.rb方式已经不支持，改用redis-cli</li>
<li>再次查看集群状态<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># .&#x2F;redis1&#x2F;bin&#x2F;redis-cli -c -p 9001</span><br><span class="line"># cluster info</span><br></pre></td></tr></table></figure>
<img src="https://upload-images.jianshu.io/upload_images/2803682-ca50048cd32dc6de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-Tomcat-War部署</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-Tomcat-War%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一: 环境搭建</p>
<ol>
<li>安装本地VM 虚拟机</li>
<li>安装Ubuntu 18.0.4</li>
<li>安装JDK 8<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;命令行直接输入java，根据提示安装即可，建议jdk8</span><br><span class="line"># sudo apt install openjdk-8-jre-headless</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CentOS jdk 安装方法：</span><br><span class="line">&#x2F;&#x2F;看yum中管理的可用的JDK软件包列表</span><br><span class="line"># yum search java | grep -i --color JDK</span><br><span class="line">&#x2F;&#x2F;选择要安装的版本</span><br><span class="line"># yum install java-1.8.0-openjdk-devel.x86_64</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>4 配置Tomcat 9:<br>官网：<a href="https://tomcat.apache.org/download-90.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-90.cgi</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;解压</span><br><span class="line"># tar -xf apache-tomcat-8.5.15.tar.gz</span><br><span class="line">&#x2F;&#x2F;移动tomcat文件到&#x2F;mnt&#x2F;tomcat目录下</span><br><span class="line"># sudo mv apache-tomcat-8.5.15 &#x2F;mnt&#x2F;tomcat</span><br></pre></td></tr></table></figure>

<p>二. 打War包</p>
<ol>
<li>IDEA编写Demo</li>
<li>点击工具栏的project structure（或File-&gt;project structure）</li>
<li>左侧选择Artifacts,创建Web Application :Archive ,选择“for 工程名:war exploded”,填写Name和output路径，双击下面两个。保存<br><img src="https://upload-images.jianshu.io/upload_images/2803682-7c03ae9cf4fa8481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
<li>点击菜单栏build,选择build artifacts,选择该Artifact完成</li>
</ol>
<p>三. 部署到Ubuntu</p>
<ol>
<li>War包传到Ubuntu<br>War包放到webapps目录下，不用解压</li>
<li>配置tomcat下的/conf/server.xml(好像不加也可以，自测)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;在Host配置段中添加,docBase参数标识的是war包的名称</span><br><span class="line">&lt;Context path&#x3D;&quot;&#x2F;&quot; docBase&#x3D;&quot;webapp.war&quot; debug&#x3D;&quot;0&quot; privileged&#x3D;&quot;true&quot; reloadable&#x3D;&quot;true&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li>
<li>进入tomcat/bin  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># .&#x2F;startup.sh</span><br><span class="line">&#x2F;&#x2F;启动失败等问题 加下权限</span><br><span class="line">#  chmod 777 *.sh</span><br></pre></td></tr></table></figure></li>
<li>浏览器浏览<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;webapp 是war包名称</span><br><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;webapp&#x2F;index.jsp</span><br></pre></td></tr></table></figure></li>
<li>外部电脑调用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;ubuntu查勘ip</span><br><span class="line"># ifconfig</span><br><span class="line">&#x2F;&#x2F;外部电脑调用地址</span><br><span class="line">http:&#x2F;&#x2F;ip:8080&#x2F;webapp&#x2F;index.jsp</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>四，JDK卸载<br>1 OpenJDK 卸载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;可是都试一遍</span><br><span class="line"># sudo apt-get purge openjdk*</span><br><span class="line"># sudo apt-get remove openjdk*</span><br><span class="line"># sudo apt-get autoremove default-jdk</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-之SSH、源</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-%E4%B9%8BSSH%E3%80%81%E6%BA%90/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<h2 id="一-SSH远程服务"><a href="#一-SSH远程服务" class="headerlink" title="一 SSH远程服务"></a>一 SSH远程服务</h2><p>1 Ubuntu安装SSH服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;修改root密码</span><br><span class="line"># sudo paswd root</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;安装ssh服务</span><br><span class="line"># sudo apt-get install openssh-server </span><br><span class="line">##查询ssh进程是否启动成功</span><br><span class="line"># ps -e | grep ssh </span><br><span class="line">##重新启动ssh服务</span><br><span class="line"># sudo &#x2F;etc&#x2F;init.d&#x2F;ssh restart </span><br><span class="line"># sudo service ssh restart</span><br><span class="line">&#x2F;&#x2F;查看IP ssh连接即可</span><br><span class="line"># ifconfig</span><br></pre></td></tr></table></figure>
<p>2  错误：ssh 服务器拒绝了密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;修改 vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config   被注释掉时，将注释全部释放就可以</span><br><span class="line">LoginGraceTime 120</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">StrictModes yes</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>更新配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># source &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure></li>
<li>修改密码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;设置root密码</span><br><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>
<h2 id="二-安装shadowsocks-服务"><a href="#二-安装shadowsocks-服务" class="headerlink" title="二 安装shadowsocks 服务"></a>二 安装shadowsocks 服务</h2>1 安装ss</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt install shadowsocks ##安装ss</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;python 版本</span><br><span class="line"># sudo apt-get update</span><br><span class="line"># sudo apt-get install python-gevent python-pip</span><br><span class="line"># sudo pip install shadowsocks</span><br><span class="line"># apt-get install python-m2crypto</span><br></pre></td></tr></table></figure>
<p>2 配置服务器参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;shadowsocks.json</span><br><span class="line">&#123;</span><br><span class="line">&quot;server&quot;:&quot;0.0.0.0&quot;, #你的服务器IP</span><br><span class="line">&quot;server_port&quot;:8388,</span><br><span class="line">&quot;local_port&quot;:1080,</span><br><span class="line">&quot;password&quot;:&quot;YourPwdForSS&quot;, #你的服务器密码</span><br><span class="line">&quot;timeout&quot;:600,</span><br><span class="line">&quot;method&quot;:&quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3 启动/关闭服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;开启</span><br><span class="line"># sudo ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d start </span><br><span class="line">&#x2F;&#x2F;关闭</span><br><span class="line"># sudo ssserver -c &#x2F;etc&#x2F;shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>
<p>4  ss客户端 <a href="https://github.com/shadowsocks/shadowsocks-windows" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows</a></p>
<p>填写信息:<br>服务器地址，端口号，密码，加密方式与代理端口默认即可。<br>右键任务栏图标，选择启用系统代理 Go</p>
<h2 id="三-镜像源切换"><a href="#三-镜像源切换" class="headerlink" title="三 镜像源切换"></a>三 镜像源切换</h2><p>1 备份官方源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>添加镜像源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu mirro:</span><br><span class="line">    sudo sed -i &quot;s@http:&#x2F;&#x2F;.*archive.ubuntu.com@http:&#x2F;&#x2F;repo.huaweicloud.com@g&quot; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br><span class="line">    sudo sed -i &quot;s@http:&#x2F;&#x2F;.*security.ubuntu.com@http:&#x2F;&#x2F;repo.huaweicloud.com@g&quot; &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt-get update</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="四，关于ubunut-静态ip配置"><a href="#四，关于ubunut-静态ip配置" class="headerlink" title="四，关于ubunut 静态ip配置"></a>四，关于ubunut 静态ip配置</h2><p>  1 ubuntu 18</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo vim &#x2F;etc&#x2F;netplan&#x2F;xx_config.yaml</span><br><span class="line">addresses:</span><br><span class="line">        - x.x.x.x&#x2F;24</span><br><span class="line">&#x2F;&#x2F;保存退出。应用</span><br><span class="line"># sudo netplan apply</span><br></pre></td></tr></table></figure>
<p>原内容<br><img src="https://upload-images.jianshu.io/upload_images/2803682-3d7d3ec3e4378950.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>改后<br><img src="https://upload-images.jianshu.io/upload_images/2803682-943e6bdcba4de14f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-Redis-配置</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-Redis-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一  安装<br>1 直接命令安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt-get update</span><br><span class="line"># sudo apt-get install redis-server</span><br><span class="line">&#x2F;&#x2F;后台启动，手动指定配置文件</span><br><span class="line">redis-server &#x2F;etc&#x2F;redis&#x2F;edis.conf</span><br></pre></td></tr></table></figure>
<p>二  启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;成功后会有界面</span><br><span class="line"># redis-server</span><br><span class="line">后台启动使用默认配置</span><br><span class="line"># redis-server &amp;</span><br><span class="line">&#x2F;&#x2F;后台启动，手动指定配置文件</span><br><span class="line">redis-server &#x2F;etc&#x2F;redis&#x2F;edis.conf</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;附加命令：</span><br><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;redis-server stop</span><br><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;redis-server start</span><br><span class="line"># &#x2F;etc&#x2F;init.d&#x2F;redis-server restart</span><br></pre></td></tr></table></figure>
<p>三  连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># redis-cli</span><br><span class="line">&#x2F;&#x2F;以上命令将打开以下终端：</span><br><span class="line">redis 127.0.0.1:6379&gt;</span><br><span class="line">&#x2F;&#x2F;127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</span><br><span class="line">redis 127.0.0.1:6379&gt;ping</span><br><span class="line">PONG</span><br><span class="line">&#x2F;&#x2F;显示PONG表示成功</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;附加端口查看方式</span><br><span class="line"># pgrep redis</span><br><span class="line"># ps -ef |grep redis</span><br></pre></td></tr></table></figure>

<p>四  外网访问<br>打开配置文件：/etc/redis/redis.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;打开把bind一行 注释掉</span><br><span class="line"># bind 127.0.0.1</span><br><span class="line">&#x2F;&#x2F;开启后台运行</span><br><span class="line"># daemonize no</span><br><span class="line">&#x2F;&#x2F;关闭保护模式</span><br><span class="line"># protected-mode no </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;关闭防火墙</span><br><span class="line"># sudo  ufw enable|disable</span><br><span class="line">&#x2F;&#x2F;关闭redis 防火墙</span><br><span class="line"># sudo ufw allow 6379</span><br></pre></td></tr></table></figure>

<p>五 卸载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;卸载软件</span><br><span class="line"># apt-get remove redis</span><br><span class="line"># apt-get purge --auto-remove redis-server</span><br><span class="line">&#x2F;&#x2F;清除配置</span><br><span class="line">#apt-get remove --purge redis</span><br><span class="line">&#x2F;&#x2F;删除残留文件,先查找出来文件,再进行删除</span><br><span class="line"># find &#x2F; -name redis</span><br><span class="line">&#x2F;&#x2F;全部删除即可</span><br><span class="line">#rm -rf var&#x2F;lib&#x2F;redis&#x2F;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装Zookeeper</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-%E5%AE%89%E8%A3%85Zookeeper/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>##安装环境及版本：</p>
<ul>
<li>系统：Ubuntu 18.0.4</li>
<li>Zookeeper: 3.5.5<br>##一 安装<br>1 下载zookeeper，选择带bin的这个<br>官网：<a href="http://apache.mirrors.ionfish.org/zookeeper/zookeeper-3.5.5/" target="_blank" rel="noopener">http://apache.mirrors.ionfish.org/zookeeper/zookeeper-3.5.5/</a><br><img src="https://upload-images.jianshu.io/upload_images/2803682-a6d314691be883ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2 上传至Ubuntu<br>3 配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;解压后进入conf目录,复制一份zoo_sample.cfg重命名为zoo.cfg,编辑</span><br><span class="line">tickTime&#x3D;2000</span><br><span class="line">initLimit&#x3D;10</span><br><span class="line">syncLimit&#x3D;5</span><br><span class="line">dataDir&#x3D;&#x2F;usr&#x2F;local&#x2F;zookeeper&#x2F;data</span><br><span class="line">clientPort&#x3D;2181</span><br><span class="line">&#x2F;&#x2F;可选：zookeeper默认使用jetty，端口占用8080</span><br><span class="line">admin.serverPort&#x3D;8888</span><br></pre></td></tr></table></figure>
##二  启动<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;进入bin目录下</span><br><span class="line"># .&#x2F;zkServer.sh start</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查看状态</span><br><span class="line"># .&#x2F;zkServer.sh status</span><br><span class="line">&#x2F;&#x2F;停止</span><br><span class="line"># .&#x2F;zkServer.sh stop</span><br></pre></td></tr></table></figure>
出现started.代表成功<br><img src="https://upload-images.jianshu.io/upload_images/2803682-442f2691e917daf6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>##三 开机自启(可选)<br>配置如下：<a href="https://www.jianshu.com/p/c59cdf58726a" target="_blank" rel="noopener">https://www.jianshu.com/p/c59cdf58726a</a></li>
</ul>
<p>##四 外网访问</p>
<ol>
<li>下载可视化工具<a href="https://issues.apache.org/jira/secure/attachment/12436620/ZooInspector.zip" target="_blank" rel="noopener">zooinspector</a></li>
<li>解压进入到ZooInspector\build 目录,cmd命令运行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar zookeeper-dev-ZooInspector.jar</span><br></pre></td></tr></table></figure></li>
<li>连接zookeeper<br><img src="https://upload-images.jianshu.io/upload_images/2803682-06edc2697b05568c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>连接成功<br><img src="https://upload-images.jianshu.io/upload_images/2803682-c911df45b179afbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-安装RabbitMQ</title>
    <url>/blog/2018/07/01/Linux/Ubuntu/Ubuntu-%E5%AE%89%E8%A3%85RabbitMQ/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<p>一 安装<br>1 .安装Erlang</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line"># apt-get install erlang</span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>执行下面的命令，新增APT仓库到/etc/apt/sources.list.d/rabbitmq.list</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;deb http:&#x2F;&#x2F;www.rabbitmq.com&#x2F;debian&#x2F; testing main&#39; |</span><br><span class="line">        sudo tee &#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;rabbitmq.list</span><br></pre></td></tr></table></figure></li>
<li><p>更新仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line"># sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li><p>安装Rabbit Server，执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># sudo apt-get install rabbitmq-server</span><br><span class="line">&#x2F;&#x2F;如安装失败，添加公钥到信任列表</span><br><span class="line"># wget http:&#x2F;&#x2F;www.rabbitmq.com&#x2F;rabbitmq-signing-key-public.asc</span><br></pre></td></tr></table></figure>
<p>二 浏览器访问<br>1 开启Web管理插件，这样我们就可以通过浏览器来进行管理了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line"># rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure></li>
<li><p>浏览器访问<br>//默认用户guest 密码guest<br><a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a></p>
</li>
<li><p>为远程访问添加用户，guest只能本地访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;新建用户  </span><br><span class="line"># rabbitmqctl add_user &lt;用户名&gt; &lt;密码&gt;</span><br><span class="line">&#x2F;&#x2F;设定用户administrator角色</span><br><span class="line"># rabbitmqctl set_user_tags &lt;用户名&gt; administrator</span><br><span class="line">&#x2F;&#x2F;赋予用户权限</span><br><span class="line"># rabbitmqctl set_permission -p &#x2F; &lt;用户名&gt; &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;查看所有账号</span><br><span class="line"># rabbitmqctl list_users</span><br><span class="line">&#x2F;&#x2F;修改密码</span><br><span class="line"># rabbitmqctl change_password &lt;用户名&gt; &lt;新密码&gt;</span><br><span class="line">&#x2F;&#x2F;删除用户</span><br><span class="line"># rabbitmqctl delete_user &lt;用户名&gt;</span><br></pre></td></tr></table></figure>
<p>4 启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;关机后重启</span><br><span class="line">#  service rabbitmq-server start</span><br><span class="line">&#x2F;&#x2F;开机自启</span><br><span class="line"># chkconfig rabbitmq-server on</span><br></pre></td></tr></table></figure></li>
<li><p>代码连接不上的。进web页面更新下权限<br><img src="https://upload-images.jianshu.io/upload_images/2803682-7f6d294e434307d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
</li>
</ol>
<p>三 卸载<br>1 卸载软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line"># sudo apt-get remove rabbitmq-server</span><br><span class="line"># sudo dpkg -r rabbitmq-server</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>清理配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;</span><br><span class="line"># sudo apt-get remove --purge rabbitmq-server</span><br><span class="line"># sudo dpkg -P rabbitmq-server</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
